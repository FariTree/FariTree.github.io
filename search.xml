<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025HXCTF初赛-Crypto-WP</title>
    <url>/2025/05/11/2025HXCTF%E5%88%9D%E8%B5%9B-Crypto-WP/</url>
    <content><![CDATA[<p>给学校新生赛出的题，出的不算难，但是新生好像没几个学密码的。。。
<span id="more"></span></p>
<h3 id="送你弗莱格">送你弗莱格</h3>
<p>一眼摩斯密码，发现“嘀”总是单独出现，猜测是空格，“滴”是“.”，“嗒”是
“-”。 写个脚本替换一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&quot;滴滴滴滴嘀嗒滴滴嗒嘀嗒滴嗒滴嘀嗒嘀滴滴嗒滴嘀嗒嗒嗒嗒滴嗒嗒嘀嗒嗒嘀嗒嗒嗒嘀滴嗒滴嘀滴滴滴嘀滴嘀滴滴嗒嗒滴嗒嘀嗒滴嗒滴嘀嗒嗒嗒嘀嗒滴滴嘀滴嘀滴滴嗒嗒滴嗒嘀滴滴嘀滴滴滴嘀滴滴嗒嗒滴嗒嘀滴滴嗒滴嘀滴滴嗒嘀嗒滴嘀嗒滴嘀嗒滴嗒嗒嘀嗒嗒嗒嗒嗒滴嗒&quot;</span></span><br><span class="line">convet = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">match</span> c:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;滴&quot;</span>:</span><br><span class="line">            convet += <span class="string">&quot;.&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;嘀&quot;</span>:</span><br><span class="line">            convet += <span class="string">&quot; &quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;嗒&quot;</span>:</span><br><span class="line">            convet += <span class="string">&quot;-&quot;</span></span><br><span class="line"><span class="built_in">print</span>(convet)</span><br><span class="line"><span class="comment"># .... -..- -.-. - ..-. ----.-- -- --- .-. ... . ..--.- -.-. --- -.. . ..--.- .. ... ..--.- ..-. ..- -. -. -.-- -----.-</span></span><br></pre></td></tr></table></figure>
<p>HXCTF{MORSE_CODE_IS_FUNNY}</p>
<h3 id="classic">Classic</h3>
<p>注意到密文分三字节一组，每组开头都是e5，e6，猜测是UTF-8编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;e585ace6ada3e887aae794b1e585ace6ada3e69687e6988ee5928ce8b090e585ace6ada3e585ace6ada3e69687e6988ee5928ce8b090e69687e6988ee585ace6ada3e5b9b3e7ad89e5928ce8b090e887aae794b1e5928ce8b090e6b395e6b2bbe585ace6ada3e5928ce8b090e5928ce8b090e695ace4b89ae5928ce8b090e69687e6988ee5928ce8b090e585ace6ada3e585ace6ada3e585ace6ada3e5928ce8b090e887aae794b1e5928ce8b090e5af8ce5bcbae5928ce8b090e5928ce8b090e585ace6ada3e585ace6ada3e5928ce8b090e5af8ce5bcbae5928ce8b090e69687e6988ee585ace6ada3e6b091e4b8bbe585ace6ada3e5b9b3e7ad89e5928ce8b090e695ace4b89ae585ace6ada3e69687e6988ee585ace6ada3e6b091e4b8bbe585ace6ada3e585ace6ada3e5928ce8b090e5af8ce5bcbae5928ce8b090e5928ce8b090e5928ce8b090e6b091e4b8bbe585ace6ada3e887aae794b1e5928ce8b090e6b395e6b2bbe5928ce8b090e69687e6988ee585ace6ada3e6b091e4b8bbe585ace6ada3e6b091e4b8bbe5928ce8b090e6b091e4b8bbe585ace6ada3e6b091e4b8bbe5928ce8b090e6b091e4b8bbe5928ce8b090e585ace6ada3e5928ce8b090e5af8ce5bcbae585ace6ada3e585ace6ada3e585ace6ada3e5928ce8b090e5928ce8b090e5928ce8b090e5928ce8b090e788b1e59bbd&quot;</span></span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"><span class="built_in">print</span>(c.decode())</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公正自由公正文明和谐公正公正文明和谐文明公正平等和谐自由和谐法治公正和谐和谐敬业和谐文明和谐公正公正公正和谐自由和谐富强和谐和谐公正公正和谐富强和 谐文明公正民主公正平等和谐敬业公正文明公正民主公正公正和谐富强和谐和谐和谐民主公正自由和谐法治和谐文明公正民主公正民主和谐民主公正民主和谐民主和谐 公正和谐富强公正公正公正和谐和谐和谐和谐爱国</span><br></pre></td></tr></table></figure>
<p>然后社会主义核心价值观解码得：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db6b2e47c926f403f02ae9baf031d72aa1a160fc38</span><br></pre></td></tr></table></figure>
<p>根据题目描述，猜测是仿射加密，所以爆破密钥：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&quot;db6b2e47c926f403f02ae9baf031d72aa1a160fc38&quot;</span></span><br><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(cipher)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">        flag = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> cipher:</span><br><span class="line">            flag += <span class="built_in">chr</span>((a*c + b) % <span class="number">256</span>)</span><br><span class="line">        <span class="keyword">if</span> flag.startswith(<span class="string">&quot;HXCTF&#123;&quot;</span>):</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># HXCTF&#123;Y0u_found_^^e!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="base16">base^{16}</h3>
<p>这题主要是想让大家写脚本，稍微试试可以发现是交替的base64和base91，循环了16轮：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base91</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;enc.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">cipher = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    cipher = base91.decode(cipher.decode())</span><br><span class="line">    cipher = base64.b64decode(cipher)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"><span class="comment"># HXCTF&#123;B6bbAa@ass5ssEee36b6644A4&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="ezrsa">ezRSA</h3>
<p>从后往前递归恢复p就行。</p>
<p>假设和已经知道p， q的后k
bits，然后枚举p的后第k+1个比特，通过下式恢复q的后第k+1一个比特： <span class="math display">\[
q_k = p_k \oplus leak_k
\]</span></p>
<p>然后检查是否满足： <span class="math display">\[
((q_{k+1} &lt;&lt; k) + q_{lsb})((p_{k+1} &lt;&lt; k) + p_{lsb}) \equiv
n \mod 2^{k+1}
\]</span></p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">20581338524773710931014796705060927721164022110933170236907622868446276673276379960074983874694013071501404205921712458516719528791313217075372120292540769607768267213148470047192533783356651951103773544607365700830304720348095357381720861732062131428306950367835186817770742714377511664088124921726109762611</span></span><br><span class="line">n = <span class="number">131955690538161673663979223798074678499726259420694182793841613919440640794173261722991102718429029438380697505701015619452283142119487944084622078736557807531823541140258838261464844922518316272881433984179091296264635187662962573084675257499354062781067172877584482339564742280505536614114067794677477277487</span></span><br><span class="line">leak = <span class="number">2854831492248561377973114517344274987491834433439026310389937614171692082857812555747188089670141576752295596881129854180086210600895683598247563627762686</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">p_lsb, k</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">512</span>:</span><br><span class="line">        <span class="keyword">return</span> [p_lsb]</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        p = (bit &lt;&lt; k) + p_lsb</span><br><span class="line">        q = leak ^ p</span><br><span class="line">        <span class="keyword">if</span> (p*q - n) % (<span class="number">2</span>**(k+<span class="number">1</span>)) == <span class="number">0</span>:</span><br><span class="line">            result.extend(recover(p, k+<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">result = recover(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> n % res == <span class="number">0</span>:</span><br><span class="line">        p = res</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q = n // p</span><br><span class="line">d = <span class="built_in">pow</span>(<span class="number">65537</span>, -<span class="number">1</span>, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p * q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># HXCTF&#123;7his_i5_the_r3al_s1gn-in_que5ti0n&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="weaksystem">WeakSystem</h3>
<p>密文空间大小只有<span class="math inline">\(A_8^8\)</span>，所以直接枚举key就行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations, product</span><br><span class="line">cipher = [<span class="number">9</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">81</span>, <span class="number">97</span>, <span class="number">187</span>, <span class="number">195</span>, <span class="number">131</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">123</span>, <span class="number">195</span>, <span class="number">233</span>, <span class="number">163</span>, <span class="number">177</span>, <span class="number">155</span>, <span class="number">145</span>, <span class="number">209</span>, <span class="number">235</span>, <span class="number">123</span>, <span class="number">115</span>, <span class="number">137</span>, <span class="number">131</span>, <span class="number">209</span>, <span class="number">123</span>, <span class="number">163</span>, <span class="number">131</span>, <span class="number">233</span>, <span class="number">123</span>, <span class="number">11</span>, <span class="number">123</span>, <span class="number">179</span>, <span class="number">131</span>, <span class="number">155</span>, <span class="number">219</span>]</span><br><span class="line">key = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">all_key = <span class="built_in">list</span>(permutations(key))</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> all_key:</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">        binc = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">bin</span>(cipher[i])[<span class="number">2</span>:].zfill(<span class="number">8</span>)]</span><br><span class="line">        c_ = [binc[key[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c_)):</span><br><span class="line">            c &lt;&lt;= <span class="number">1</span></span><br><span class="line">            c ^= c_[j]</span><br><span class="line">        flag += <span class="built_in">chr</span>(c)</span><br><span class="line">    <span class="keyword">if</span> flag.startswith(<span class="string">&quot;HXCTF&#123;&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># HXCTF&#123;easy_encrypto_What_can_I_say&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="weirvierwilson">WeirVierWilson</h3>
<p>这题就考了一个威尔逊定理，看题名也能猜到。</p>
<p>为了加速这个循环，主要用到了下面这个等式：</p>
<p><span class="math display">\[
(p - 1)! \equiv -1 \mod p
\]</span></p>
<p>所以实际上只需要遍历： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p + <span class="number">1</span>, p + p.bit_length())</span><br></pre></td></tr></table></figure>
就可以求出私钥，然后就是一个简单的RSA解密。</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">prime = <span class="number">137507368993355914860594752037581031045352928887415381942526303684476934340258890988567168982905997088929819580321685527266991589958746449618579850907765883870406926066972236505061792661515022699471025570619211456282127086268577930799928025034487476640164726617790269194813768322066680097473281637077598071503</span></span><br><span class="line">n = <span class="number">135682573094891703553176370837232897617602270323588124823165101627726795394883393432665305493991941306105477252624327158129510957489322126803110534374827392252943932529899808378499467893344818778838011561390030105276983196848035629485680341851450845219061424892927388790415769446019942364106200260533601837319</span></span><br><span class="line">cipher = <span class="number">41622954513604406352873105855005440904638036223332018757506281634908104215433400850153277514829103000815542937837390595177169806358970750719651237435525099636604205350232352002592510801557603418471900545470844050105254021489131546373444583233001627136018732688443852250808321663559410660967027997290818817259</span></span><br><span class="line"></span><br><span class="line">d = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(prime + <span class="number">1</span>, prime + prime.bit_length()):</span><br><span class="line">    d = (d * i) % prime</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(cipher, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># HXCTF&#123;find_+he_f@c+ori@1_i5_very_5imp1e_wi+h_Wi15on&#x27;5_+heorem&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="babysign">babysign</h3>
<p>这题考的是DSA线性k攻击。但其实网上很多文章，直接拷打AI也能出。。。</p>
<p>DSA在每次签名过程中必须要选一个随机数k来保证私钥x不会泄露，而这里用的随机数生成器是LCG是线性的，不够随机。
具体利用方法如下：</p>
<p>根据DSA签名的等式，可以获取下面两组签名：</p>
<p><span class="math display">\[
\begin{gather}
s_1 \equiv (H(m) + xr_1)k_1^{-1} \mod q \\
s_2 \equiv (H(m) + xr_2)(ak_1 + b)^{-1} \mod q
\end{gather}
\]</span></p>
<p>这里面只有x,
k1两个未知数，直接解方程就能得到x，然后就可以伪造签名了。</p>
<p>选手可以自己推导解的表达式，这里我使用了sage的solve函数，不过对于这种简单的方程组，groebner_basis应该是最简单的。</p>
<p>exp.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line">a = <span class="number">0xe4b39d062f5eaffe04fd8c302b8f956a43264ead</span></span><br><span class="line">b = <span class="number">0xb703a3ec8c6a9520e77d6bb14220abfde7d12dc6</span>        </span><br><span class="line">io = remote(<span class="string">&quot;43.139.51.42&quot;</span>, <span class="number">32838</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;This is my pubkey: &quot;</span>)</span><br><span class="line">p, q, g, y = <span class="built_in">eval</span>(io.recvline().decode())</span><br><span class="line">io.recvuntil(<span class="string">b&quot;[+]: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;hijack&quot;</span>)</span><br><span class="line">msg1, r1, s1 = <span class="built_in">eval</span>(io.recvline().decode())</span><br><span class="line">msg1 = <span class="built_in">bytes</span>.fromhex(msg1)</span><br><span class="line">Hm1 = bytes_to_long(md5(msg1).digest())</span><br><span class="line">io.recvuntil(<span class="string">b&quot;[+]: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;hijack&quot;</span>)</span><br><span class="line">msg2, r2, s2 = <span class="built_in">eval</span>(io.recvline().decode())</span><br><span class="line">msg2 = <span class="built_in">bytes</span>.fromhex(msg2)</span><br><span class="line">Hm2 = bytes_to_long(md5(msg2).digest())</span><br><span class="line"></span><br><span class="line">x, k = var(<span class="string">&quot;x, k&quot;</span>)</span><br><span class="line">f1 = s1*k - Hm1 - x*r1</span><br><span class="line">f2 = s2*(a*k + b) - Hm2 - x*r2</span><br><span class="line">k_ = solve(f1, k)[<span class="number">0</span>].right()</span><br><span class="line">x = GF(q)(solve(f2(k=k_), x)[<span class="number">0</span>].right())</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;[+]: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;verify&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;[+]: &quot;</span>)</span><br><span class="line">msg = <span class="string">b&quot;faritree&quot;</span></span><br><span class="line">Hm = bytes_to_long(md5(msg).digest())</span><br><span class="line">k = <span class="number">1111</span></span><br><span class="line">r = <span class="built_in">pow</span>(g, k, p) % q</span><br><span class="line">s = (Hm + x * r) * <span class="built_in">pow</span>(k, -<span class="number">1</span>, q) % q</span><br><span class="line">signature = msg.<span class="built_in">hex</span>() + <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(r) + <span class="string">&quot;,&quot;</span> + <span class="built_in">str</span>(s)</span><br><span class="line">io.sendline(signature.encode())</span><br><span class="line"><span class="built_in">print</span>(io.recvline())</span><br><span class="line"><span class="built_in">print</span>(io.recvline())</span><br><span class="line">io.close()</span><br><span class="line"><span class="comment"># HXCTF&#123;D5A_1s_sa7e_but_LC6_n0t&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="ezdecision">ezDecision</h3>
<p>这题需要我们区分F1和F0生成的矩阵，可以发现F1生成的矩阵的行列式只与M有关，而M的行列式比较小，所以可以根据矩阵的行列式来判断。需要注意一下这里的矩阵是mod
q下的矩阵，所以比较小的值表现为接近0或者接近q。</p>
<p>exp.sage:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    M = <span class="built_in">eval</span>(f.readline())</span><br><span class="line">    p = <span class="built_in">int</span>(f.readline())</span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">    mat = matrix(ZZ, [m[<span class="number">0</span>:<span class="number">3</span>], m[<span class="number">3</span>:<span class="number">6</span>], m[<span class="number">6</span>:<span class="number">9</span>]])</span><br><span class="line">    tmp = mat.det() % p </span><br><span class="line">    flag &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> tmp &gt; p - <span class="number">10000</span> <span class="keyword">or</span> tmp &lt; <span class="number">10000</span>:</span><br><span class="line">        flag ^^= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag ^^= <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(flag))</span><br><span class="line"><span class="comment"># HXCTF&#123;Th3s3_m@trice5_ar3_n0t_di77icu1t_t0_di5tingu1sh&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="ezotp">ezOTP</h3>
<p>这题实现了一个魔改的RC4，没有密钥，但是可以发现在swap部分并不是真的交换，而是对值进行了同化，所以猜测在加密后部分时Sbox中的值全都一样，所以可以枚举Sbox，获取LCG的后面几个输出，然后恢复LCG，得到AES的密钥。</p>
<p>exp.sage:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, s</span>):</span><br><span class="line">        <span class="variable language_">self</span>.a = a</span><br><span class="line">        <span class="variable language_">self</span>.b = b</span><br><span class="line">        <span class="variable language_">self</span>.state = s</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.state = (<span class="variable language_">self</span>.a * <span class="variable language_">self</span>.state + <span class="variable language_">self</span>.b) % (<span class="number">2</span>**<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.state</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;enc.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    enc = <span class="built_in">eval</span>(f.readline())</span><br><span class="line">    cipher = <span class="built_in">eval</span>(f.readline())</span><br><span class="line">    </span><br><span class="line">total = <span class="built_in">len</span>(data)</span><br><span class="line"><span class="keyword">for</span> sbox <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    data = [sbox^^c <span class="keyword">for</span> c <span class="keyword">in</span> enc]</span><br><span class="line">    n = <span class="number">5</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        U128 = data[total - <span class="number">16</span>*(i + <span class="number">1</span>) : total - <span class="number">16</span>*i]</span><br><span class="line">        U128 = <span class="built_in">sum</span>([U128[i] &lt;&lt; <span class="number">8</span>*(<span class="number">15</span> - i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])</span><br><span class="line">        output = [U128] + output</span><br><span class="line">    <span class="comment"># print(output)</span></span><br><span class="line">    PR.&lt;a, b, s&gt; = PolynomialRing(Zmod(<span class="number">2</span>**<span class="number">128</span>))</span><br><span class="line">    x = [s]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">        x.append(a*x[-<span class="number">1</span>] + b)</span><br><span class="line">    I = PR.ideal([x[i] - output[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line">    a, b, s = I.groebner_basis()[:<span class="number">3</span>]</span><br><span class="line">    a = <span class="number">2</span>**<span class="number">128</span> - a.constant_coefficient()</span><br><span class="line">    b = <span class="number">2</span>**<span class="number">128</span> - b.constant_coefficient()</span><br><span class="line">    s = <span class="number">2</span>**<span class="number">128</span> - s.constant_coefficient()</span><br><span class="line">    lcg = LCG(a, b, s)</span><br><span class="line">    [lcg.<span class="built_in">next</span>() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>)]</span><br><span class="line">    key = lcg.<span class="built_in">next</span>()</span><br><span class="line">    flag = AES.new(<span class="built_in">int</span>(key).to_bytes(<span class="number">16</span>, <span class="string">&quot;big&quot;</span>), mode=AES.MODE_ECB).decrypt(cipher)</span><br><span class="line">    <span class="keyword">if</span> flag.startswith(<span class="string">b&quot;HXCTF&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># HXCTF&#123;a_5maLl_m157aK3_L3Ad5_7O_a_hU93_prOBl3m&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="lfsr">lfsr</h3>
<p>很常规的lfsr破解。</p>
<p>lfsr在生成随机数的过程中，一直在维护一个状态，这个状态由128个比特构成，我们可以把它记作：</p>
<p><span class="math display">\[
\mathbf{state} = (s_1, s_2, \cdots, s_{128})
\]</span> 加密过程还需要一个掩码mask,我们记作： <span class="math display">\[
\mathbf{mask} = (m_1, m_2, \cdots, m_{128})
\]</span>
然后将这两个向量作内积，得到的就是输出比特，要注意这里的运算是在<span class="math inline">\(GF(2)\)</span>上进行的(可以简单的理解为所有运算都要模2，保证数据只有1比特的大小)。那么新的状态可以表示为：
<span class="math display">\[
\mathbf{state}^{&#39;} = ( s_2, s_3, \cdots, s_{128}, \mathbf{state}
\cdot \mathbf{mask}^T )
\]</span> 我们可以把它写作矩阵形式： <span class="math display">\[
\mathbf{state}^{&#39;} = \mathbf{state}
\begin{pmatrix}
&amp;&amp;&amp;&amp;m_1\\
1&amp;&amp;&amp;&amp;m_2\\
&amp;1&amp;&amp;&amp;m_3\\
&amp;&amp;\ddots&amp;&amp;\vdots\\
&amp;&amp;&amp;1&amp;m_{128}
\end{pmatrix}
\]</span>
将这个矩阵作用128次后得到的状态，就是lfsr的连续128比特的输出，即： <span class="math display">\[
\mathbf{output} = \mathbf{state}
\begin{pmatrix}
&amp;&amp;&amp;&amp;m_1\\
1&amp;&amp;&amp;&amp;m_2\\
&amp;1&amp;&amp;&amp;m_3\\
&amp;&amp;\ddots&amp;&amp;\vdots\\
&amp;&amp;&amp;1&amp;m_{128}
\end{pmatrix}^{128}
\]</span> 所以有了<span class="math inline">\(\mathbf{output}\)</span>后，只需要右乘一个矩阵逆原就可以恢复初始状态，从而得到seed。</p>
<p>exp.sage:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">enc = <span class="string">b&#x27;\x81H\xd7_\x1c[\x00\xffkX+\x8d\n(-(U\xcd\x13$u\xa1\xceY.\x97\xfd8\x90\x07\xf5\x92&#x27;</span></span><br><span class="line">output = <span class="number">46569537592563541192266548905767353620</span></span><br><span class="line">mask = <span class="number">288869314699467157022235107404330039071</span></span><br><span class="line"></span><br><span class="line">mask_matrix = matrix([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(mask)[<span class="number">2</span>:].zfill(<span class="number">128</span>)])</span><br><span class="line">M = zero_matrix(GF(<span class="number">2</span>), <span class="number">1</span>, <span class="number">127</span>).stack(identity_matrix(<span class="number">127</span>)).augment(mask_matrix.T)</span><br><span class="line">output_vec = vector([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(output)[<span class="number">2</span>:].zfill(<span class="number">128</span>)])</span><br><span class="line">seed_vec = output_vec*(M^(-<span class="number">128</span>))</span><br><span class="line">seed = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> seed_vec:</span><br><span class="line">    seed &lt;&lt;= <span class="number">1</span></span><br><span class="line">    seed ^^= <span class="built_in">int</span>(s)</span><br><span class="line">cipher = AES.new(long_to_bytes(seed), AES.MODE_ECB)</span><br><span class="line">cipher.decrypt(enc)</span><br><span class="line"><span class="comment"># HXCTF&#123;s1mpl3_1ine@r_5y5tem&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2025D^3CTF-Crypto-WP</title>
    <url>/2025/06/01/2025D%5E3CTF-Crypto-WP/</url>
    <content><![CDATA[<p>赛中三道题只做出了一道，题目质量都非常好，所以写篇博客记录一下。</p>
<span id="more"></span>
<h3 id="d3fnv">d3fnv</h3>
<p><strong>题目描述</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Guessing is easy. Trusting is hard. Winning? That’s another story.</span><br></pre></td></tr></table></figure>
<p><strong>题目附件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BANNER = <span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ____ //|_____    __________________   ___   ____ ___   ______</span></span><br><span class="line"><span class="string">   / __ \/||__  /   / ____/_  __/ ____/  |__ \ / __ \__ \ / ____/</span></span><br><span class="line"><span class="string">  / / / /   /_ &lt;   / /     / / / /_      __/ // / / /_/ //___ \  </span></span><br><span class="line"><span class="string"> / /_/ /  ___/ /  / /___  / / / __/     / __// /_/ / __/____/ /  </span></span><br><span class="line"><span class="string">/_____/  /____/   \____/ /_/ /_/       /____/\____/____/_____/   </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MENU = <span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. Get p</span></span><br><span class="line"><span class="string">2. H4sh</span></span><br><span class="line"><span class="string">3. Flag</span></span><br><span class="line"><span class="string">4. Exit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FNV</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.pbit = <span class="number">1024</span></span><br><span class="line">        <span class="variable language_">self</span>.p = getPrime(<span class="variable language_">self</span>.pbit)</span><br><span class="line">        <span class="variable language_">self</span>.key = random.randint(<span class="number">0</span>, <span class="variable language_">self</span>.p)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">H4sh</span>(<span class="params">self, value:<span class="built_in">str</span></span>):</span><br><span class="line">        length = <span class="built_in">len</span>(value)</span><br><span class="line">        x = (<span class="built_in">ord</span>(value[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span>) % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> value:</span><br><span class="line">            x = ((<span class="variable language_">self</span>.key * x) % <span class="variable language_">self</span>.p) ^ <span class="built_in">ord</span>(c)</span><br><span class="line">        </span><br><span class="line">        x ^= length</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = <span class="variable language_">self</span>.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            <span class="variable language_">self</span>.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.send(<span class="string">b&quot;Bye~&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.request.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.send(BANNER)</span><br><span class="line">        </span><br><span class="line">        n = <span class="number">32</span></span><br><span class="line">        cnt = <span class="number">67</span></span><br><span class="line">        str_table = string.ascii_letters + string.digits</span><br><span class="line">        <span class="variable language_">self</span>.send(<span class="string">b&#x27;Welcome to D^3CTF 2025&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.send(<span class="string">b&#x27;Could you break my modified fnv hash function?&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fnv = FNV()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">            <span class="variable language_">self</span>.send(MENU)</span><br><span class="line">            option = <span class="variable language_">self</span>.recv(<span class="string">b&#x27;option &gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">b&#x27;G&#x27;</span>:</span><br><span class="line">                p = <span class="variable language_">self</span>.fnv.p</span><br><span class="line">                <span class="variable language_">self</span>.send(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;H&#x27;</span>:</span><br><span class="line">                random_token = <span class="string">&#x27;&#x27;</span>.join(random.choices(str_table, k=n))</span><br><span class="line">                random_token_hash = <span class="variable language_">self</span>.fnv.H4sh(random_token)</span><br><span class="line">                <span class="variable language_">self</span>.send(<span class="string">b&#x27;Token Hash: &#x27;</span> + <span class="built_in">str</span>(random_token_hash).encode())</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;F&#x27;</span>:</span><br><span class="line">                random_token = <span class="string">&#x27;&#x27;</span>.join(random.choices(str_table, k=n))</span><br><span class="line">                <span class="variable language_">self</span>.send(<span class="string">b&#x27;Here is a random token x: &#x27;</span> + random_token.encode())</span><br><span class="line">                ans = <span class="variable language_">self</span>.recv(<span class="string">b&#x27;Could you tell the value of H4sh(x)? &#x27;</span>).strip().decode()</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(ans) % <span class="variable language_">self</span>.fnv.p == <span class="variable language_">self</span>.fnv.H4sh(random_token) % <span class="variable language_">self</span>.fnv.p:</span><br><span class="line">                    <span class="variable language_">self</span>.send(<span class="string">b&#x27;Congratulations! Here is your flag: &#x27;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.send(FLAG)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.send(<span class="string">b&#x27;Try again~&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10007</span></span><br><span class="line">    server = ForkedServer((HOST, PORT), Task)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<h4 id="思路">思路</h4>
<p>题目基于FNV，一共给了67次交互，首先肯定要2次来拿p和flag。剩下的65次都用来获取hash值。hash值可以由下面的式子表示：
<span class="math display">\[
x_i = v_{i,0}*2^7*k^{32} + v_{i,0}&#39;*k^{31} + v_{i,1}&#39;*k^{30} +
\cdots + v_{i,30}*k + v_{i,31} \mod P
\]</span></p>
<p>将65个<span class="math inline">\(x_i\)</span>写成矩阵形式： <span class="math display">\[
\begin{pmatrix}
x_0 \\
x_1 \\
\vdots \\
x_{64}
\end{pmatrix} =
\begin{pmatrix}
v_{0, 0} &amp; v_{0, 0}&#39; &amp; v_{0, 1}&#39; &amp; \dots &amp; v_{0,
31}&#39; \\
v_{1, 0} &amp; v_{1, 0}&#39; &amp; v_{1, 1}&#39; &amp; \dots &amp; v_{1,
31}&#39; \\
\vdots &amp; \vdots &amp;  \vdots &amp; &amp;\vdots \\
v_{64, 0} &amp; v_{64, 0}&#39; &amp; v_{64, 1}&#39; &amp; \dots &amp;
v_{64, 31}&#39; \\
\end{pmatrix}
\begin{pmatrix}
2^7*k^{32} \\
k^{31} \\
\vdots \\
k^{0}
\end{pmatrix}
\]</span></p>
<p>下面简记为<span class="math inline">\(\mathbf{x} =
\mathbf{Vk}\)</span>。<br>
用格基规约求出<span class="math inline">\(\mathbf{x}\)</span>的左核空间的话，前32个一定是
<span class="math inline">\(\mathbf{V}\)</span>的左核空间，所以再求左核的右核就是
<span class="math inline">\(\mathbf{V}\)</span>，但是由于<span class="math inline">\(\mathbf{V}\)</span>还不够小，所以求出来的实际是<span class="math inline">\(\mathbf{V}\)</span>经过一些微小的初等变换，这个变换可以如下表示为：
<span class="math display">\[\mathbf{V = V&#39;B}\]</span> 且<span class="math inline">\(\mathbf{BB^T}\)</span>可能的值非常少，测试发现<span class="math inline">\(\mathbf{BB^T}\)</span>经常是对角矩阵，而且前2个元素是2，后面的全是1。<br>
所以： <span class="math display">\[
\begin{gather}
\mathbf{x = V&#39;Bk}
\end{gather}
\]</span></p>
<p>解这个线性方程组得到<span class="math inline">\(\mathbf{Bk}\)</span>，然后让这个向量和自身点积得到<span class="math inline">\(\mathbf{k}\mathbf{B}\mathbf{B}^T\mathbf{k}^T\)</span>，然后只需要求解多项式方程的根就行。<br>
求出来的多个根应该可以用求<span class="math inline">\(\mathbf{V}\)</span>，然后通过看明文是否落在给定范围来判断是否正确。但是这里我直接猜测是最后一个根了，只要多爆几遍就行。</p>
<h4 id="exp">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, getRandomNBitInteger</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FNV</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, key</span>):</span><br><span class="line">        <span class="variable language_">self</span>.pbit = <span class="number">1024</span></span><br><span class="line">        <span class="variable language_">self</span>.p = p</span><br><span class="line">        <span class="variable language_">self</span>.key = key</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">H4sh</span>(<span class="params">self, value:<span class="built_in">str</span></span>):</span><br><span class="line">        length = <span class="built_in">len</span>(value)</span><br><span class="line">        x = (<span class="built_in">ord</span>(value[<span class="number">0</span>]) &lt;&lt; <span class="number">7</span>) % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> value:</span><br><span class="line">            x = ((<span class="variable language_">self</span>.key * x) % <span class="variable language_">self</span>.p) ^^ <span class="built_in">ord</span>(c)</span><br><span class="line">        </span><br><span class="line">        x ^^= length</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">once</span>():</span><br><span class="line">    io = remote(<span class="string">&quot;35.241.98.126&quot;</span>, <span class="number">30104</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;Could you break my modified fnv hash function?\n&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">b&quot;option &gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;G&quot;</span>)</span><br><span class="line">    p = <span class="built_in">int</span>(io.recvline().split(<span class="string">b&quot;=&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line">    </span><br><span class="line">    xl = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">65</span>):</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;option &gt;&quot;</span>)</span><br><span class="line">        io.sendline(<span class="string">b&quot;H&quot;</span>)</span><br><span class="line">        xi = <span class="built_in">int</span>(io.recvline().split(<span class="string">b&quot;: &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">        xl.append(xi ^^ (<span class="number">32</span>))</span><br><span class="line">    </span><br><span class="line">    M = column_matrix(xl + [p]) * getPrime(<span class="number">1024</span>)</span><br><span class="line">    M = M.augment(identity_matrix(M.nrows() - <span class="number">1</span>).stack(zero_vector(M.nrows() - <span class="number">1</span>)))</span><br><span class="line">    ML = M.LLL()</span><br><span class="line">    </span><br><span class="line">    K = ML[:<span class="number">32</span>, <span class="number">1</span>:]</span><br><span class="line">    </span><br><span class="line">    K = K.right_kernel_matrix().LLL().T</span><br><span class="line">    <span class="built_in">print</span>(K.dimensions())</span><br><span class="line">    Bk = K.change_ring(GF(p)).solve_right(vector(xl))</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">    f = <span class="number">2</span> * x^<span class="number">64</span> * (<span class="number">1</span> &lt;&lt; <span class="number">14</span>)</span><br><span class="line">    f += <span class="number">2</span> * x^(<span class="number">62</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>):</span><br><span class="line">        f += x^(<span class="number">2</span> * i)</span><br><span class="line">    f -= (Bk * Bk)</span><br><span class="line">    </span><br><span class="line">    key = f.roots()</span><br><span class="line">    <span class="keyword">if</span> key == []:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    key = <span class="built_in">int</span>(key[-<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">b&quot;option &gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;F&quot;</span>)</span><br><span class="line">    token = (io.recvline().split(<span class="string">b&quot;: &quot;</span>)[<span class="number">1</span>].strip()).decode()</span><br><span class="line">    <span class="built_in">print</span>(token)</span><br><span class="line">    fnv = FNV(p, key)</span><br><span class="line">    ans = fnv.H4sh(token)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;Could you tell the value of H4sh(x)? &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(ans).encode())</span><br><span class="line">    <span class="built_in">print</span>(io.recvall(<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">    io.close()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    once()</span><br></pre></td></tr></table></figure>
<h3 id="d3guess">*d3guess</h3>
<p><strong>题目描述</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Guessing is easy. Trusting is hard. Winning? That’s another story.</span><br></pre></td></tr></table></figure>
<p><strong>题目附件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">N = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">times = <span class="number">64</span></span><br><span class="line">r = <span class="number">.1</span></span><br><span class="line">h1 = <span class="string">&#x27;your number is too big&#x27;</span></span><br><span class="line">h2 = <span class="string">&#x27;your number is too small&#x27;</span></span><br><span class="line">h3 = <span class="string">&#x27;you win&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=== Welcome to D3CTF 2025 ===&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;You have at most 1 hour to solve this challenge.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Can you defeat the biased oracle?\n&quot;</span>)</span><br><span class="line">rr = Random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challge</span>(<span class="params">rounds, times, N, r, mode=<span class="number">0</span></span>):</span><br><span class="line">    wins = <span class="number">0</span></span><br><span class="line">    f = <span class="keyword">lambda</span> x: [<span class="number">0.075</span>, <span class="number">0.15</span>, <span class="number">0.225</span>, <span class="number">0.3</span>, <span class="number">0.375</span>, <span class="number">0.45</span>][<span class="number">5</span> - x * <span class="number">6</span> // <span class="number">2</span>**<span class="number">32</span>]</span><br><span class="line">    <span class="built_in">print</span>([<span class="string">&quot;Now let&#x27;s play a simple number-guessing game&quot;</span>, <span class="string">&quot;Let&#x27;s play a relatively simple number-guessing game again&quot;</span>][mode])</span><br><span class="line">    <span class="keyword">for</span> round_idx <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        x = rr.randint(<span class="number">1</span>, N - <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Starting Round <span class="subst">&#123;round_idx + <span class="number">1</span>&#125;</span> of <span class="subst">&#123;rounds&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># print(x)</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                guess = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;[d3ctf@oracle] give me a number &gt; &#x27;</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[!] Invalid input detected. Session terminated.&quot;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            <span class="keyword">if</span> guess &gt; x:</span><br><span class="line">                <span class="built_in">print</span>([f(<span class="built_in">abs</span>(guess - x)), [h1, h2][rr.random() &lt; r]][mode])</span><br><span class="line">            <span class="keyword">elif</span> guess &lt; x:</span><br><span class="line">                <span class="built_in">print</span>([f(<span class="built_in">abs</span>(guess - x)), [h2, h1][rr.random() &lt; r]][mode])</span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                <span class="built_in">print</span>(h3)</span><br><span class="line">                wins += <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> wins</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> challge(<span class="number">350</span>, <span class="number">32</span>, N, r) == <span class="number">350</span> <span class="keyword">and</span> challge(<span class="number">2200</span>, <span class="number">64</span>, N, r, mode=<span class="number">1</span>) &gt; <span class="number">2112</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[!] You have proven your power over probability. This is your <span class="subst">&#123;FLAG&#125;</span>. Congratulations!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[X] The oracle remains unbeaten. Try again, challenger.&quot;</span>)</span><br><span class="line">    exit()</span><br></pre></td></tr></table></figure>
<p>这题要解决mode0和mode1两个猜数游戏</p>
<h4 id="mode0">mode0</h4>
<p>需要猜测一个32bit的数，一共有32次机会。每次猜测能得到猜测的数g和被猜数x的距离通过f函数处理过的值，其实就是告诉你k，使得：
<span class="math display">\[
\frac{2^{32}k}{6} \leq \mid g - x\mid &lt; \frac{2^{32}(k + 1)}{6}, \ \
\ k \in \{0, 1, 2, 3, 4, 5\}
\]</span>
可以发现这个区间的大小是恒定的，下面记区间长度是gap。解决这个问题的思路还是二分，具体如下：<br>
首先第一次可以发送边界<span class="math inline">\(2^{32} -
1\)</span>然后根据k就可以二分区间。现在假设我们已知的区间边界是(a,
b)，那么可以发送(a + b) / 2 + gap，根据返回的k值来二分区间(a,
b)。这样不断二分就能得到x。</p>
<h4 id="mode1">mode1</h4>
<p>每次交互都会告诉你偏大还是偏小，而且结果有10%的概率出错。<br>
主要参考了洛谷上<a href="https://www.luogu.com.cn/problem/P9477">这题</a>的题解。
大体做法是每次发送概率分布的中位数，然后使用贝叶斯公式更新概率分布，原文中使用的动态开点线段树维护概率分布的数组，但是这里是python，所以就直接用列表模拟了。<br>
测试下来有80%的正确率，是不够题目要求的正确率的，但是加上MODE0的350个机数，MODE1只需要赢274次，后面用MT19937就行。</p>
<h4 id="exp-1">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.all_cmdline <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process, context</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">N = <span class="number">2</span>**<span class="number">32</span></span><br><span class="line">h1 = <span class="string">&#x27;your number is too big&#x27;</span></span><br><span class="line">h2 = <span class="string">&#x27;your number is too small&#x27;</span></span><br><span class="line">h3 = <span class="string">&#x27;you win&#x27;</span></span><br><span class="line">f = [<span class="number">0.075</span>, <span class="number">0.15</span>, <span class="number">0.225</span>, <span class="number">0.3</span>, <span class="number">0.375</span>, <span class="number">0.45</span>]</span><br><span class="line">path = <span class="string">&quot;/d/CTF/Chall/2025/D^3CTF/Crypto/d3guess/chal/chal.py&quot;</span></span><br><span class="line">io = process([<span class="string">&quot;python&quot;</span>, path])</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Can you defeat the biased oracle?\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">DATA = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== MODE 0 ========================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MODE_0</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendnumber</span>(<span class="params">num</span>):</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;[d3ctf@oracle] give me a number &gt; &#x27;</span>)</span><br><span class="line">        g = num</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(g).encode())</span><br><span class="line">        recv = io.recvline()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;win&quot;</span> <span class="keyword">in</span> recv:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k = <span class="number">5</span> - f.index(<span class="built_in">eval</span>(recv))</span><br><span class="line">            a = ceil((k &lt;&lt; <span class="number">32</span>) / <span class="number">6</span>)</span><br><span class="line">            b = floor(((k + <span class="number">1</span>) &lt;&lt; <span class="number">32</span>) / <span class="number">6</span>)</span><br><span class="line">            <span class="keyword">return</span> k, a, b, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mode0_playonce</span>():</span><br><span class="line">        io.recvline()</span><br><span class="line">        g = N - <span class="number">1</span></span><br><span class="line">        k, a, b, win = sendnumber(g)</span><br><span class="line">        <span class="keyword">if</span> win:</span><br><span class="line">            <span class="keyword">return</span> g, -<span class="number">0</span></span><br><span class="line">        left = g - b</span><br><span class="line">        right = g - a</span><br><span class="line">        </span><br><span class="line">        gap = (<span class="number">2</span> ** <span class="number">32</span>) / <span class="number">6</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">            mid= (right + left) / <span class="number">2</span></span><br><span class="line">            k, _, _, win = sendnumber(<span class="built_in">int</span>(mid + gap))</span><br><span class="line">            <span class="keyword">if</span> win:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">int</span>(mid + gap, -(i + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">1</span>):</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span> k == <span class="number">0</span></span><br><span class="line">                left = mid</span><br><span class="line">            <span class="comment"># print(flag, end=&quot; : &quot;)</span></span><br><span class="line">            <span class="comment"># print(f&quot;%f %f&quot; % (left, right))</span></span><br><span class="line">                </span><br><span class="line">        mid= ((right) + (left)) / <span class="number">2</span></span><br><span class="line">        <span class="comment"># print(f&quot;%f&quot; % mid)</span></span><br><span class="line">        k, _, _, win = sendnumber(<span class="built_in">int</span>(mid))</span><br><span class="line">        <span class="keyword">if</span> win:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">int</span>(mid), -<span class="number">31</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Now let&#x27;s play a simple number-guessing game\n&quot;</span>)</span><br><span class="line">    rounds = <span class="number">350</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> trange(rounds):</span><br><span class="line">        data = mode0_playonce()</span><br><span class="line">        DATA.append(data[<span class="number">0</span>] - <span class="number">1</span>)</span><br><span class="line">        DATA.append(data[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ======================== MODE 1 ========================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MODE_1</span>():</span><br><span class="line">    COUNT = <span class="number">64</span></span><br><span class="line">    K = <span class="number">1</span>/<span class="number">10</span></span><br><span class="line">    BOUND = (<span class="number">1</span>, <span class="number">2</span>**<span class="number">32</span> - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">MT19937Predictor</span>(<span class="params">data</span>):</span><br><span class="line">        v = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> data[i] &gt;= <span class="number">0</span>:</span><br><span class="line">                x = data[i]</span><br><span class="line">                v.extend([<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(x)[<span class="number">2</span>:].zfill(<span class="number">32</span>)])</span><br><span class="line">        v = vector(GF(<span class="number">2</span>), v)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(v) = &#125;</span>&quot;</span>)</span><br><span class="line">        rr = random.Random()</span><br><span class="line">        Mat = np.zeros((<span class="number">19968</span>, <span class="built_in">len</span>(v)), dtype=<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">19968</span>):</span><br><span class="line">            state = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">            state[i // <span class="number">32</span>] = <span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i % <span class="number">32</span>)</span><br><span class="line">            rr.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state + [<span class="built_in">int</span>(<span class="number">624</span>)]), <span class="number">624</span>))</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">                <span class="keyword">if</span> data[j] &lt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> data[j] == -<span class="number">128</span>:</span><br><span class="line">                        rr.getrandbits(<span class="number">32</span>)</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    rr.getrandbits(<span class="number">64</span> * -data[j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x = rr.getrandbits(<span class="number">32</span>)</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">                        Mat[i][tmp * <span class="number">32</span> + k] = (x &gt;&gt; (<span class="number">31</span> - k)) &amp; <span class="number">1</span></span><br><span class="line">                    tmp += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Construct matrix and solve&quot;</span>)</span><br><span class="line">        Mat = matrix(GF(<span class="number">2</span>), Mat)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;Mat.rank() = &#125;</span>&quot;</span>)</span><br><span class="line">        s = Mat.solve_left(v)</span><br><span class="line">        seed = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">19968</span>, <span class="number">32</span>):</span><br><span class="line">            x = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">                x &lt;&lt;= <span class="number">1</span></span><br><span class="line">                x += <span class="built_in">int</span>(s[i + j])</span><br><span class="line">            seed.append(<span class="built_in">int</span>(x))</span><br><span class="line">        RR = random.Random()</span><br><span class="line">        RR.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(seed + [<span class="built_in">int</span>(<span class="number">624</span>)]), <span class="literal">None</span>))</span><br><span class="line">        <span class="keyword">return</span> RR</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendonce</span>(<span class="params">guess</span>):</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;[d3ctf@oracle] give me a number &gt; &#x27;</span>)</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(guess).encode())</span><br><span class="line">        res = io.recvline()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;big&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">b&quot;small&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">b&quot;win&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">median</span>(<span class="params">Prob</span>):    </span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Prob)):</span><br><span class="line">            <span class="keyword">if</span> total &lt; <span class="number">1</span> / <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> total + Prob[i][<span class="number">2</span> ]&gt;= <span class="number">1</span> / <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">int</span>(((<span class="number">1</span> / <span class="number">2</span> - total) / Prob[i][<span class="number">2</span>]) * (Prob[i][<span class="number">1</span>] - Prob[i][<span class="number">0</span>] + <span class="number">1</span>) + Prob[i][<span class="number">0</span>])</span><br><span class="line">            total += Prob[i][<span class="number">2</span>]</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxim</span>(<span class="params">Prob: <span class="built_in">list</span></span>):</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        p = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Prob)):</span><br><span class="line">            left, right, pb = Prob[i]</span><br><span class="line">            <span class="keyword">if</span> (pb / (right - left + <span class="number">1</span>)) &gt; p:</span><br><span class="line">                p = pb / (right - left + <span class="number">1</span>)</span><br><span class="line">                res = (left, right)</span><br><span class="line">        <span class="keyword">return</span> res, p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">Prob: <span class="built_in">list</span>, guess, result</span>):</span><br><span class="line">        ind = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Prob)):</span><br><span class="line">            <span class="keyword">if</span> Prob[i][<span class="number">0</span>] &lt;= guess &lt;= Prob[i][<span class="number">1</span>]:</span><br><span class="line">                ind = i</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        left, right, p = Prob.pop(ind)</span><br><span class="line">        <span class="keyword">if</span> (left &lt;= guess - <span class="number">1</span>):</span><br><span class="line">            Prob.insert(ind, (left, guess - <span class="number">1</span>, (guess - left) * p / (right - left + <span class="number">1</span>)))</span><br><span class="line">        Prob.insert(ind + <span class="number">1</span>, (guess, guess, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">if</span> (right &gt;= guess + <span class="number">1</span>):</span><br><span class="line">            Prob.insert(ind + <span class="number">2</span>, (guess + <span class="number">1</span>, right, ((right - guess) * p / (right - left + <span class="number">1</span>))))</span><br><span class="line">        </span><br><span class="line">        a = <span class="number">0</span></span><br><span class="line">        b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ind + <span class="number">1</span>):</span><br><span class="line">            a += Prob[i][<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ind + <span class="number">2</span>, <span class="built_in">len</span>(Prob)):</span><br><span class="line">            b += Prob[i][<span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, ind + <span class="number">1</span>):</span><br><span class="line">            left, right, p = Prob[i]</span><br><span class="line">            <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">                Prob[i] = (left, right, (<span class="number">1</span> - K) * p / ((<span class="number">1</span> - K) * a + K * b))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Prob[i] = (left, right, K * p / ((<span class="number">1</span> - K) * b + K * a))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ind + <span class="number">2</span>, <span class="built_in">len</span>(Prob)):</span><br><span class="line">            left, right, p = Prob[i]</span><br><span class="line">            <span class="keyword">if</span> result == <span class="number">1</span>:</span><br><span class="line">                Prob[i] = (left, right, K * p / ((<span class="number">1</span> - K) * a + K * b))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                Prob[i] = (left, right, (<span class="number">1</span> - K) * p / ((<span class="number">1</span> - K) * b + K * a))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>():</span><br><span class="line">        prob = [(BOUND[<span class="number">0</span>], BOUND[<span class="number">1</span>], <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(COUNT):</span><br><span class="line">            <span class="keyword">if</span> i == COUNT - <span class="number">1</span>:</span><br><span class="line">                guess_range, _ = maxim(prob)</span><br><span class="line">                guess = (guess_range[<span class="number">0</span>] + guess_range[<span class="number">1</span>]) // <span class="number">2</span></span><br><span class="line">                res = sendonce(guess)</span><br><span class="line">                <span class="keyword">if</span> res == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">return</span> guess, -<span class="number">63</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            guess = median(prob)</span><br><span class="line">            res = sendonce(guess)</span><br><span class="line">            <span class="keyword">if</span> res == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> guess, -i</span><br><span class="line">            update(prob, guess, res)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">128</span>, -<span class="number">64</span></span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Let&#x27;s play a relatively simple number-guessing game again&quot;</span>)</span><br><span class="line">    rounds = <span class="number">2200</span></span><br><span class="line">    win = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">if</span> win == <span class="number">274</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        x = play()</span><br><span class="line">        <span class="keyword">if</span> x[<span class="number">0</span>] == -<span class="number">128</span>:</span><br><span class="line">            DATA.append(x[<span class="number">0</span>])</span><br><span class="line">            DATA.append(x[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            win += <span class="number">1</span></span><br><span class="line">            DATA.append(x[<span class="number">0</span>] - <span class="number">1</span>)</span><br><span class="line">            DATA.append(x[<span class="number">1</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(DATA) // <span class="number">2</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;lost rounds:&quot;</span>, (<span class="built_in">len</span>(DATA) // <span class="number">2</span>) - <span class="number">350</span> - win)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Start to creak MT...&quot;</span>)</span><br><span class="line">    MyR = MT19937Predictor(DATA)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;MT has been cracked&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(DATA)):</span><br><span class="line">        <span class="keyword">if</span> DATA[i] &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> DATA[i] == -<span class="number">128</span>:</span><br><span class="line">                MyR.getrandbits(<span class="number">32</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            MyR.getrandbits(<span class="number">64</span> * -DATA[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            MyR.getrandbits(<span class="number">32</span>)</span><br><span class="line">    remain = <span class="number">350</span> + <span class="number">2200</span> - <span class="built_in">len</span>(DATA) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(remain):</span><br><span class="line">        io.recvuntil(<span class="string">b&#x27;[d3ctf@oracle] give me a number &gt; &#x27;</span>)</span><br><span class="line">        io.sendline(<span class="built_in">str</span>(MyR.randint(<span class="number">1</span>, N - <span class="number">1</span>)).encode())</span><br><span class="line">        <span class="keyword">assert</span> <span class="string">b&quot;win&quot;</span> <span class="keyword">in</span> io.recvline()</span><br><span class="line">    <span class="built_in">print</span>(io.recvline())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MODE_0 begin...&quot;</span>)</span><br><span class="line">begin = time.time()</span><br><span class="line">MODE_0()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MODE_0 Over...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MODE_0 spent time:&quot;</span>, end - begin)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MODE_1 begin...&quot;</span>)</span><br><span class="line">begin = time.time()</span><br><span class="line">MODE_1()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MODE_1 Over...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MODE_1 spent time:&quot;</span>, end - begin)</span><br><span class="line"></span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure>
<h3 id="d3sysp2_2.0">*d3sys[p2_2.0]</h3>
<p><strong>题目描述</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Everything is in attachments! Let&#x27;s go and solve it!</span><br><span class="line"></span><br><span class="line">Author: deebato @ L-team x Ele3tronic x D^3CTF</span><br></pre></td></tr></table></figure>
<p><strong>题目附件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime, inverse</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">import</span> signal </span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">banner = <span class="string">br&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> _ .-&#x27;) _                               .-&#x27;) _               </span></span><br><span class="line"><span class="string">( (  OO) )                             (  OO) )              </span></span><br><span class="line"><span class="string"> \     .&#x27;_   ,---.   .-----.    .-----./     &#x27;._    ,------. </span></span><br><span class="line"><span class="string"> ,`&#x27;--..._) /  \  \ /  -.   \  &#x27;  .--./|&#x27;--...__)(&#x27;-| _.---&#x27; </span></span><br><span class="line"><span class="string"> |  |  \  &#x27;`--&#x27; `--&#x27;&#x27;-&#x27; _&#x27;  |  |  |(&#x27;-.&#x27;--.  .--&#x27;(OO|(_\     </span></span><br><span class="line"><span class="string"> |  |   &#x27; |            |_  &lt;  /_) |OO  )  |  |   /  |  &#x27;--.  </span></span><br><span class="line"><span class="string"> |  |   / :         .-.  |  | ||  |`-&#x27;|   |  |   \_)|  .--&#x27;  </span></span><br><span class="line"><span class="string"> |  &#x27;--&#x27;  /         \ `-&#x27;   /(_&#x27;  &#x27;--&#x27;\   |  |     \|  |_)   </span></span><br><span class="line"><span class="string"> `-------&#x27;           `----&#x27;&#x27;    `-----&#x27;   `--&#x27;      `--&#x27;     </span></span><br><span class="line"><span class="string">                   .-----.   .----.   .-----. .------.       </span></span><br><span class="line"><span class="string">                  / ,-.   \ /  ..  \ / ,-.   \|   ___|       </span></span><br><span class="line"><span class="string">                  &#x27;-&#x27;  |  |.  /  \  .&#x27;-&#x27;  |  ||  &#x27;--.        </span></span><br><span class="line"><span class="string">                     .&#x27;  / |  |  &#x27;  |   .&#x27;  / `---.  &#x27;.      </span></span><br><span class="line"><span class="string">                   .&#x27;  /__ &#x27;  \  /  &#x27; .&#x27;  /__ .-   |  |      </span></span><br><span class="line"><span class="string">                  |       | \  `&#x27;  / |       || `-&#x27;   /      </span></span><br><span class="line"><span class="string">                  `-------&#x27;  `---&#x27;&#x27;  `-------&#x27; `----&#x27;&#x27;       </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MENU2 = <span class="string">br&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> ====------------------------------------------------------------------------------------------------------====</span></span><br><span class="line"><span class="string"> |    |              +---------------------------------------------------------------------+              |   |</span></span><br><span class="line"><span class="string"> |    |              |            [G]et_dp_dq     [F]lag     [T]ime     [E]xit             |              |   |</span></span><br><span class="line"><span class="string"> |    |              +---------------------------------------------------------------------+              |   |</span></span><br><span class="line"><span class="string"> ====------------------------------------------------------------------------------------------------------====</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRT_RSA_SYSTEM</span>:</span><br><span class="line">    nbit = <span class="number">3072</span></span><br><span class="line">    blind_bit = <span class="number">153</span></span><br><span class="line">    unknownbit = <span class="number">983</span></span><br><span class="line">    e_bit = <span class="number">170</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        e = getPrime(<span class="variable language_">self</span>.e_bit)</span><br><span class="line">        p,q = [getPrime(<span class="variable language_">self</span>.nbit // <span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;D^3CTF&quot;</span>[:<span class="number">2</span>]]</span><br><span class="line">        n = p * q</span><br><span class="line">        <span class="variable language_">self</span>.pub = (n,e)</span><br><span class="line"></span><br><span class="line">        dp = inverse(e,p - <span class="number">1</span>)</span><br><span class="line">        dq = inverse(e,q - <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.priv = (p,q,dp,dq,e,n)</span><br><span class="line">        <span class="variable language_">self</span>.blind()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blind</span>(<span class="params">self</span>):</span><br><span class="line">        p,q,dp,dq,e,n = <span class="variable language_">self</span>.priv</span><br><span class="line">        rp,rq = [getPrime(<span class="variable language_">self</span>.blind_bit) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&quot;D^3CTF&quot;</span>[:<span class="number">2</span>]]</span><br><span class="line">        dp_ = (p-<span class="number">1</span>) * rp + dp</span><br><span class="line">        dq_ = (q-<span class="number">1</span>) * rq + dq</span><br><span class="line">        <span class="variable language_">self</span>.priv = (p,q,dp_,dq_,e,n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_priv_exp</span>(<span class="params">self</span>):</span><br><span class="line">        p,q,dp,dq,e,n = <span class="variable language_">self</span>.priv</span><br><span class="line">        dp_ = dp &gt;&gt; <span class="variable language_">self</span>.unknownbit</span><br><span class="line">        dq_ = dq &gt;&gt; <span class="variable language_">self</span>.unknownbit</span><br><span class="line">        <span class="keyword">return</span> (dp_,dq_)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,m</span>):</span><br><span class="line">        n,e = <span class="variable language_">self</span>.pub</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,c</span>):</span><br><span class="line">        p,q,dp,dq,e,n = <span class="variable language_">self</span>.priv</span><br><span class="line">        mp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">        mq = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">        h = inverse(q, p) * (mp - mq) % p</span><br><span class="line">        m = mq + h * q</span><br><span class="line">        <span class="comment"># m = crt([mp,mq],[p,q])</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">pow</span>(m,e,n) == c</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D3_SYS</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_recvall</span>(<span class="params">self</span>):</span><br><span class="line">        BUFF_SIZE = <span class="number">2048</span></span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            part = <span class="variable language_">self</span>.request.recv(BUFF_SIZE)</span><br><span class="line">            data += part</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(part) &lt; BUFF_SIZE:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> data.strip()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, msg, newline=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> newline:</span><br><span class="line">                msg += <span class="string">b&#x27;\n&#x27;</span></span><br><span class="line">            <span class="variable language_">self</span>.request.sendall(msg)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv</span>(<span class="params">self, prompt=<span class="string">b&#x27;&#x27;</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.send(prompt, newline=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._recvall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_dp_dq</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.crt_rsa.get_priv_exp()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc_token</span>(<span class="params">self</span>):</span><br><span class="line">        token = os.urandom(<span class="number">380</span>) </span><br><span class="line">        n,e = <span class="variable language_">self</span>.crt_rsa.pub</span><br><span class="line">        enc_token = <span class="built_in">pow</span>(bytes_to_long(token),e,n)</span><br><span class="line">        <span class="keyword">return</span> enc_token, sha256(token).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        signal.alarm(<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.send(banner)</span><br><span class="line">        <span class="variable language_">self</span>.send(<span class="string">b&quot;Welcome to D^3CTF 2025&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.send(<span class="string">b&quot;Hello player... This year I give you a new challenge which is similar as the second part in d3sys[D^3CTF 2023].&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.crt_rsa = CRT_RSA_SYSTEM()</span><br><span class="line">        <span class="keyword">for</span> __ <span class="keyword">in</span> <span class="string">&#x27;D^3CTF&#x27;</span>[:<span class="number">2</span>]:</span><br><span class="line">            <span class="variable language_">self</span>.send(MENU2)</span><br><span class="line">            option = <span class="variable language_">self</span>.recv(<span class="string">b&#x27;option &gt;&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> option == <span class="string">b&#x27;F&#x27;</span>:</span><br><span class="line">                cip,tokenhash = <span class="variable language_">self</span>.enc_token()</span><br><span class="line">                <span class="variable language_">self</span>.send(<span class="string">b&#x27;Encrypted Token: &#x27;</span> + <span class="built_in">hex</span>(cip).encode())</span><br><span class="line">                tokenhash_checked = <span class="variable language_">self</span>.recv(<span class="string">b&#x27;Token Hash: &#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> tokenhash_checked.decode() == tokenhash:</span><br><span class="line">                    <span class="variable language_">self</span>.send(<span class="string">b&#x27;Correct!&#x27;</span>)</span><br><span class="line">                    <span class="variable language_">self</span>.send(FLAG.encode())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.send(<span class="string">b&#x27;Wrong Token Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;G&#x27;</span>:</span><br><span class="line">                dp,dq = <span class="variable language_">self</span>.get_dp_dq()</span><br><span class="line">                <span class="variable language_">self</span>.send(<span class="string">f&#x27;dp,dq:<span class="subst">&#123;[dp,dq]&#125;</span>&#x27;</span>.encode())</span><br><span class="line">                <span class="variable language_">self</span>.send(<span class="string">f&#x27;n,e:<span class="subst">&#123;[self.crt_rsa.pub]&#125;</span>&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">elif</span> option == <span class="string">b&#x27;T&#x27;</span>:</span><br><span class="line">                <span class="keyword">pass</span> <span class="comment"># self.time()</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="variable language_">self</span>.request.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    HOST, PORT = <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;HOST:POST &quot;</span> + HOST+<span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(PORT))</span><br><span class="line">    server = ForkedServer((HOST, PORT), D3_SYS)</span><br><span class="line">    server.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>主要参考了<a href="https://github.com/D-3CTF/D3CTF-2025-Official-Writeup/blob/main/D3CTF-2025-Official-Writeup-CN.pdf">官方WP</a>和这篇<a href="https://eprint.iacr.org/2022/1163">论文</a>。</p>
<p>题目基于CRT-RSA的私钥泄露攻击。<br>
<strong>CRT-RSA</strong>即使用了CRT来加速RSA解密过程的RSA系统。加速过程需要用到私钥：
<span class="math display">\[
\begin{gather}
d_p = d \mod (p - 1)\\
d_q = d \mod(q - 1)
\end{gather}
\]</span> 常数<span class="math inline">\(k， l\)</span>满足： <span class="math display">\[
\begin{gather}
ed_p = 1 + k(p - 1)\\
ed_q = 1 + l(q - 1)
\end{gather}
\]</span></p>
<p>为了防止侧信道攻击，通常会为私钥添加盲因子<span class="math inline">\(r_p， r_q\)</span>，即新的私钥为： <span class="math display">\[
\begin{gather}
d_p&#39; = d_p + r_p(p - 1)\\
d_q&#39; = d_q + r_q(q - 1)
\end{gather}
\]</span> 常数<span class="math inline">\(k&#39;， l&#39;\)</span>满足：
<span class="math display">\[
\begin{gather}
ed_p&#39; = 1 + k&#39;(p - 1)\\
ed_q&#39; = 1 + l&#39;(q - 1)\\
k&#39; = k + er_p \\
l&#39; = l + er_q
\end{gather}
\]</span></p>
<h4 id="思路-1">思路</h4>
<p>本题泄露了<span class="math inline">\(d_p&#39;，d_q&#39;\)</span>的高位<span class="math inline">\(d_p&#39;^{(M)}, d_q&#39;^{(M)}\)</span>。 <span class="math display">\[
\begin{gather}
d_p&#39; = 2^id_p&#39;^{(M)} + d_p&#39;^{(L)}\\
d_q&#39; = 2^id_q&#39;^{(M)} + d_q&#39;^{(L)}
\end{gather}
\]</span> 按照论文中的思路，分为2步。</p>
<h5 id="step1">step1</h5>
<p>首先求出<span class="math inline">\(k&#39;， l&#39;\)</span>。 因为：
<span class="math display">\[
\begin{gather}
ed_p&#39; = 1 + k&#39;(p - 1)\\
ed_q&#39; = 1 + l&#39;(q - 1)\\
\end{gather}
\]</span> 所以：</p>
<p><span class="math display">\[
\begin{gather}
k&#39;l&#39;N = (ed_p&#39; - 1 + k&#39;)(ed_q&#39; - 1 + l&#39;)\\
k&#39;l&#39; \approx \frac{e^22^{2i}d_p&#39;^{(M)}d_q&#39;^{(M)}}{N}
\end{gather}
\]</span></p>
<p>拿到<span class="math inline">\(k&#39;，l&#39;\)</span>后，如果按照论文中使用分解算法的话时间是不够的，而本题的e较大，可以解下面的同余方程拿到<span class="math inline">\(k，l\)</span>： <span class="math display">\[
\begin{gather}
kl \equiv k&#39;l&#39; \mod e\\
klN \equiv (k - 1)(l - 1) \mod e
\end{gather}
\]</span> 然后根据<span class="math inline">\(k&#39; = k + er_p，l&#39;
= l + er_q\)</span>，在模<span class="math inline">\(k&#39;l&#39;\)</span>的情况下使用coppersmith方法求出<span class="math inline">\(r_p，r_q\)</span>。然后求出<span class="math inline">\(k&#39;，l&#39;\)</span></p>
<h5 id="step2">step2</h5>
<p>拿到<span class="math inline">\(k&#39;\)</span>后，根据如下等式：
<span class="math display">\[
\begin{gather}
e(d_p^{(M)}2^i + d_p^{(L)}) = 1 + k&#39;(p - 1)\\
e(d_p^{(M)}2^i + d_p^{(L)}) \equiv 1 \mod k&#39;p
\end{gather}
\]</span> 再使用coppersmith方法求出<span class="math inline">\(d_p^{(L)}\)</span>即可。</p>
<h4 id="exp-2">exp</h4>
<p>因为我的flatter好像有点问题（用起来比LLL慢），所以用的sage自带的small_roots，题目给的5s比较极限，加上服务器延迟，得多试几遍。
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">nbit = <span class="number">3072</span></span><br><span class="line">blind_bit = <span class="number">153</span></span><br><span class="line">unknownbit = <span class="number">983</span></span><br><span class="line">e_bit = <span class="number">170</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># io = remote(&quot;localhost&quot;, 9998)</span></span><br><span class="line">io = remote(<span class="string">&quot;node6.anna.nssctf.cn&quot;</span>, <span class="number">24225</span>)</span><br><span class="line">begin = time.time()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;option &gt;&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;G&quot;</span>)</span><br><span class="line">dp_msb, dq_msb = <span class="built_in">eval</span>(io.recvline().decode().split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">n, e = <span class="built_in">eval</span>(io.recvline().decode().split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">kl_ = (e**<span class="number">2</span> * <span class="number">2</span>**(<span class="number">2</span> * unknownbit) * dp_msb * dq_msb) // n + <span class="number">1</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(e))</span><br><span class="line">f = kl_ * n * x - (kl_ - x)*(x - <span class="number">1</span>)</span><br><span class="line">k = <span class="built_in">int</span>(f.roots(multiplicities=<span class="literal">False</span>)[<span class="number">0</span>])</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(kl_))</span><br><span class="line">f = e*x + k</span><br><span class="line">f = f.monic()</span><br><span class="line"></span><br><span class="line">a = time.time()</span><br><span class="line">rp = <span class="built_in">int</span>(f.small_roots(X=<span class="number">2</span>**blind_bit, beta=<span class="number">0.49</span>, epsilon = <span class="number">0.024</span>)[<span class="number">0</span>])</span><br><span class="line">k_ = e * rp + k</span><br><span class="line">l_ = kl_ // k_</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(k_ * n))</span><br><span class="line">f = e*((dp_msb*<span class="number">2</span>**unknownbit) + x) - <span class="number">1</span> + k_</span><br><span class="line">f = f.monic()</span><br><span class="line">r = f.small_roots(X=<span class="number">2</span>**unknownbit, beta=<span class="number">0.493</span>, epsilon=<span class="number">0.02</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(end - begin)</span><br><span class="line">p = <span class="built_in">int</span>(gcd(<span class="built_in">int</span>(f(r[<span class="number">0</span>])), n))</span><br><span class="line">q = n // p</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;option &gt;&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;F&quot;</span>)</span><br><span class="line">c = <span class="built_in">int</span>(io.recvline().decode().split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = long_to_bytes(m)</span><br><span class="line">m_h = sha256(m).hexdigest()</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Token Hash: &#x27;</span>)</span><br><span class="line">io.sendline(m_h.encode())</span><br><span class="line"><span class="built_in">print</span>(io.recvall(<span class="number">2</span>).decode())</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>FNV</tag>
        <tag>OL-attack</tag>
        <tag>PKE-attack</tag>
      </tags>
  </entry>
  <entry>
    <title>2025京麒CTF挑战赛-Crypto复现</title>
    <url>/2025/05/24/2025%E4%BA%AC%E9%BA%92CTF%E6%8C%91%E6%88%98%E8%B5%9B-Crypto%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>有点遗憾，下午睡了快4小时，结束后一小时把onlinecrypto整了出来。(っ╥╯﹏╰╥c)</p>
<span id="more"></span>
<h3 id="onelinecrypto">onelinecrypto</h3>
<p>题目很短： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">__import__</span>(<span class="string">&#x27;re&#x27;</span>).fullmatch(<span class="string">br&#x27;flag\&#123;[!-z]&#123;11&#125;\&#125;&#x27;</span>,flag:=os.getenvb(<span class="string">b&#x27;FLAG&#x27;</span>)) <span class="keyword">and</span> [is_prime(<span class="built_in">int</span>(flag.<span class="built_in">hex</span>(),<span class="number">16</span>)^^<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;🌌 &#x27;</span>))) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>^<span class="number">7</span>)]</span><br></pre></td></tr></table></figure></p>
<p>这题一开始没看懂在干嘛，因为assert是永真的。然后<a href="http://n1gh7ma12e.cn/"><span class="citation" data-cites="N1gh7ma12e">@N1gh7ma12e</span></a>说可能是侧信道，所以一直在试is_prime的时间。然后就发现只要输入的数字有一个小因子，那么is_prime很快就能返回False。当时就想到用这个方法判断flag是否含有因子2（虽然这个是显然的）。</p>
<p>然后就卡住了，而且由于昨晚睡太晚了，下午太困了就睡过去了，7点起来发现就5解了，所以又开始看这题。</p>
<h4 id="思路">思路</h4>
<p>这题大概的思路是先求出flag模3的值，然后是模5的值，，，。这样循环几次后就可以用crt求出flag。</p>
<p>首先来看怎么求mod3的值，我们可以给靶机输入 <span class="math inline">\(k*2^{256} ,k \in \{1, 2, 3\}\)</span>
，这样is_prime的输入就是 <span class="math inline">\(k*2^{256} +
m\)</span> ，而且 <span class="math inline">\(k*2^{256} + m\)</span>
模3的所以情况一定是 <span class="math inline">\(\{0,1,2\}\)</span>，所以当模3是0的时候，is_prime很快就能做出判断，这就从时间上告诉了我们flag模3的值。然后为了让区别更明显一些，我们不能只测这三个数，而是要对于每一个k，我们测出下面这些数的总时间:</p>
<p><span class="math display">\[
(k + j*3)*2^{256} + m, \ \ j \in {1,2,3 \dots}
\]</span></p>
<p>对于同一个k，这些数模3的值都是一样的。</p>
<p>然后来看模5，我们需要让is_prime输入的数不含因子3和2，所以输入下面的数：</p>
<p><span class="math display">\[
(k + j*15)*2^{256} + m, \ \ j \in {1,2,3 \dots}
\]</span></p>
<p>为了让他不含有因子3，可以解下面的同余方程:</p>
<p><span class="math display">\[
k*2^{256} + m \equiv 1 \mod 3
\]</span></p>
<p>由于m模3已经知道，所以可以求出k模3的值，记为<span class="math inline">\(k_1\)</span>，然后将他带入上式:</p>
<p><span class="math display">\[
(3*t + k_1)*2^{256} + m \equiv 1 \mod 3
\]</span></p>
<p>然后枚举 <span class="math inline">\(t \in \{0, 1, 2, 3,
4\}\)</span>，这样 <span class="math inline">\((3*t + k_1)*2^{256} +
m\)</span> 模5一定会出现 <span class="math inline">\(\{0,1,2,3,4\}\)</span>，而且一定不含因子3，所以当模5是0时，is_prime判断时间会很快，这就从时间上告诉了我们flag模5的值。同样为了让区别更明显，对于每一个t我们测出下面这些数的总时间：</p>
<p><span class="math display">\[
(3*t + k_1 + 15 * j)*2^{256} + m , \ \ j \in {1,2,3 \dots}
\]</span></p>
<p>对于同一个t，这些数模3模5的值都是一样的。</p>
<p>然后按照上面的步骤，依次求出模7，模11的的值，，，。最后将flag在模各个素数的值CRT。</p>
<h4 id="exp">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process, context</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;error&#x27;</span></span><br><span class="line">os.environ[<span class="string">&quot;FLAG&quot;</span>] = <span class="string">&quot;flag&#123;_test_flag_&#125;&quot;</span></span><br><span class="line">path = <span class="string">&quot;server.sage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpend</span>(<span class="params">io, numbers</span>):</span><br><span class="line">    payload = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(num) + <span class="string">&quot;\n&quot;</span> <span class="keyword">for</span> num <span class="keyword">in</span> numbers])</span><br><span class="line">    io.send(payload.encode())</span><br><span class="line">    begin = time()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(numbers)):</span><br><span class="line">        io.recvuntil((<span class="string">&quot;🌌 &quot;</span>).encode())</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="keyword">return</span> end - begin</span><br><span class="line"></span><br><span class="line">N = <span class="number">1</span></span><br><span class="line">pn = <span class="number">1</span></span><br><span class="line">fn = <span class="number">0</span></span><br><span class="line">an = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">io = process([<span class="string">&quot;sage&quot;</span>, path])</span><br><span class="line">io.recvuntil((<span class="string">&quot;🌌 &quot;</span>).encode())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>):</span><br><span class="line">    <span class="keyword">if</span> pn == <span class="number">1</span>:</span><br><span class="line">        pn = <span class="number">3</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pn = next_prime(pn)</span><br><span class="line">    spends = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span>) == <span class="number">0</span>:  <span class="comment"># 靶机里循环可能用完了，重置一下</span></span><br><span class="line">        io.close()</span><br><span class="line">        io = process([<span class="string">&quot;sage&quot;</span>, path])</span><br><span class="line">        io.recvuntil((<span class="string">&quot;🌌 &quot;</span>).encode())</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(pn):</span><br><span class="line">        numbers = [(an + k * N + j * N * pn) &lt;&lt; <span class="number">256</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">300</span>)]</span><br><span class="line">        spendtime = getSpend(io, numbers)</span><br><span class="line">        spends.append(spendtime)</span><br><span class="line">    <span class="comment"># print(spends)</span></span><br><span class="line">    k = spends.index(<span class="built_in">min</span>(spends))</span><br><span class="line">    fn_ = -((an + k*N) &lt;&lt; <span class="number">256</span>) % (pn)</span><br><span class="line">    fn = <span class="built_in">int</span>(crt([fn, fn_], [N, pn]))</span><br><span class="line">    an = (<span class="number">1</span> - fn) * <span class="built_in">pow</span>(<span class="number">1</span> &lt;&lt; <span class="number">256</span>, -<span class="number">1</span>, N * pn) % (N * pn)</span><br><span class="line">    N = N * pn</span><br><span class="line">    <span class="built_in">print</span>(fn, end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(fn))</span><br></pre></td></tr></table></figure>
<h3 id="unwind-on-vacation">Unwind On Vacation</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> shake_128</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">&quot;flag&#123;redacted&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hash</span>(<span class="params">msg</span>):</span><br><span class="line">    h = <span class="built_in">int</span>(shake_128(msg).hexdigest(<span class="number">3</span>*m),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> vector(GF(q),[(h:=h//q)%q <span class="keyword">if</span> i <span class="keyword">else</span> h%q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UOV</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m, n, q</span>):</span><br><span class="line">        <span class="variable language_">self</span>.params = (m, n, q)</span><br><span class="line">        <span class="variable language_">self</span>.pub = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.O = random_matrix(ZZ, n-m, m)</span><br><span class="line">        <span class="variable language_">self</span>.refresh()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">self</span>):</span><br><span class="line">        set_random_seed(seed:=secrets.randbits(<span class="number">128</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;🌻&quot;</span>, seed)</span><br><span class="line">        m, n, q = <span class="variable language_">self</span>.params</span><br><span class="line">        F = GF(q)</span><br><span class="line">        Ps = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            P1 = random_matrix(F, n-m, n-m)</span><br><span class="line">            P2 = random_matrix(F, n-m, m)</span><br><span class="line">            P3 = (-<span class="variable language_">self</span>.O.T*P1*<span class="variable language_">self</span>.O-<span class="variable language_">self</span>.O.T*P2)</span><br><span class="line">            P = block_matrix(F, [[P1, P2], [zero_matrix(F, m, n-m), P3]])</span><br><span class="line">            <span class="built_in">print</span>(P3.<span class="built_in">list</span>())</span><br><span class="line">            Ps.append(P)</span><br><span class="line">        set_random_seed(secrets.randbits(<span class="number">128</span>))</span><br><span class="line">        <span class="keyword">return</span> Ps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.pub = <span class="variable language_">self</span>.keygen()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="keyword">if</span> msg == <span class="string">&quot;Unwind On Vacation&quot;</span>: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        m, n, q = <span class="variable language_">self</span>.params</span><br><span class="line">        F = GF(q)</span><br><span class="line">        O = block_matrix(F, <span class="number">2</span>, <span class="number">1</span>, [<span class="variable language_">self</span>.O, identity_matrix(F, m)])</span><br><span class="line">        v = random_vector(F, n, <span class="number">1</span>)</span><br><span class="line">        M = matrix(F, [v*(<span class="variable language_">self</span>.pub[i]+<span class="variable language_">self</span>.pub[i].T)*O <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">        u = Hash(msg.encode())-vector([(v*<span class="variable language_">self</span>.pub[i]*v) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">        <span class="keyword">return</span> v+O*M.solve_right(u)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, msg, token</span>):</span><br><span class="line">        msg = Hash(msg.encode())</span><br><span class="line">        t = vector(token)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.params[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> t*<span class="variable language_">self</span>.pub[i]*t != msg[i]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">m, n = <span class="number">73</span>, <span class="number">180</span></span><br><span class="line">q = <span class="number">0x10001</span></span><br><span class="line">uov = UOV(m, n, q)</span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;signal&quot;</span>).alarm(<span class="number">1200</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>):</span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>):</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;R&quot;</span>: uov.refresh()</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;S&quot;</span>: <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;uov.sign(<span class="built_in">input</span>(<span class="string">&quot;💬 &quot;</span>))&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;V&quot;</span>: <span class="built_in">print</span>(<span class="string">&quot;🚩&quot;</span>, uov.verify(<span class="string">&quot;Unwind On Vacation&quot;</span>,</span><br><span class="line">                                        literal_eval(<span class="built_in">input</span>(<span class="string">&quot;📝 &quot;</span>)))*FLAG)</span><br></pre></td></tr></table></figure></p>
<p>复现的时候参考了<a href="https://github.com/hash-hash/My-CTF-Challenges/blob/main/jqctf-quals%202025/Unwind%20On%20Vacation/README.md"><span class="citation" data-cites="hash-hash">@hash-hash</span></a>师傅的WP，顺便找了篇<a href="https://drive.google.com/file/d/1c30oDb2WfUqbwsydSlDwNqRLwSKOg4qR/view">paper</a>学习了一下UOV。</p>
<h4 id="签名原理">签名原理</h4>
<p>这题的UOV并不是初代的的UOV，签名的方法也有所不同。这里就先说一下本题UOV的签名原理：<br>
这里的公钥同样是m个矩阵P，矩阵P都是如下形式： <span class="math display">\[
\mathbf{P}_i =
\begin{pmatrix}
\mathbf{P}_i^{(1)} &amp; \mathbf{P}_i^{(2)}\\
\mathbf{0} &amp; \mathbf{P}_i^{(3)}\\
\end{pmatrix}
\]</span>
签名的过程仍然是求这个这个矩阵对应的二次多元多项式的逆映射。这个矩阵和初代的UOV很像，但是他对应的油醋多项式中油变量是会混在一起的。而签名的关键在于公钥<span class="math inline">\(\mathbf{P}_i\)</span>中的<span class="math inline">\(\mathbf{P}_{i}^{(3)}\)</span>，具有如下形式：
<span class="math display">\[
\mathbf{P}_{i}^{(3)} = -\mathbf{O}^T\mathbf{P}_i^{(1)}\mathbf{O} -
\mathbf{O}^T\mathbf{P}_i^{(2)}
\]</span> 其中<span class="math inline">\(\mathbf{O}\)</span>就是私钥。这种形式的<span class="math inline">\(\mathbf{P}_i^{(3)}\)</span>会让公钥满足如下性质：
<span class="math display">\[
\mathbf{\overline{O}}^T\mathbf{P}_i\mathbf{\overline{O}} = \mathbf{0}
\]</span> 其中： <span class="math display">\[
\mathbf{\overline{O}} =
\begin{pmatrix}
\mathbf{O} \\
\mathbf{I}_m
\end{pmatrix}
\]</span></p>
<p>这样签名的形式就是: <span class="math display">\[
\mathbf{s} = \mathbf{v} + \mathbf{\overline{O}}\mathbf{x}
\]</span></p>
<p><span class="math inline">\(\mathbf{x}\)</span>就是签名要寻找的向量，我们带入得：
<span class="math display">\[
\mathbf{s}^T\mathbf{P}_i\mathbf{s} =
(\mathbf{v} + \mathbf{\overline{O}}\mathbf{x})^T
\mathbf{P}_i
(\mathbf{v} + \mathbf{\overline{O}}\mathbf{x}) =
\mathbf{v}^T\mathbf{P}_i\mathbf{v} + \mathbf{v}^T
(\mathbf{P}_i + \mathbf{P}_i^T)\mathbf{\overline{O}}\mathbf{x}
\]</span></p>
<p>可以发现二次项都消去了，所以只需要解一个线性方程组就行。而且想要完成签名，只需要拿到<span class="math inline">\(\mathbf{\overline{O}}\)</span>的列向量生成的空间的一组基就行，因为<span class="math inline">\(\mathbf{B}^T\mathbf{\overline{O}}^T\mathbf{P}_i\mathbf{\overline{O}}\mathbf{B}
= \mathbf{0}\)</span>也是成立的，其中<span class="math inline">\(\mathbf{B}\)</span>是对<span class="math inline">\(\mathbf{\overline{O}}\)</span>的初等列变换。</p>
<h4 id="解题思路">解题思路</h4>
<p>签名原理说完了，再来看看本题的解法。</p>
<p>本题的漏洞点在于每次刷新密钥用的都是同一个私钥，这样可以让我们收集到足够的方程来求解<span class="math inline">\(\mathbf{O}\)</span>，以<span class="math inline">\(\mathbf{O}\)</span>的第一条列向量<span class="math inline">\(\mathbf{o_1}\)</span>为例，将它线性化会有<span class="math inline">\(\frac{(n - m)(n - m - 1)}{2} + 2(n -
m)\)</span>即<span class="math inline">\(5885\)</span>个变量，而我们能收集到<span class="math inline">\(80m\)</span>即<span class="math inline">\(5840\)</span>个方程，所以解空间还有<span class="math inline">\(q^{45}\)</span>，而这里<span class="math inline">\(\mathbf{O}\)</span>的生成居然用的是<code>random_matrix(ZZ, n-m, m)</code>，(基环居然是<code>ZZ</code>，赛中完全没有注意到这点)，这会导致生成的<span class="math inline">\(\mathbf{O}\)</span>太小，让我们可以利用LLL恢复<span class="math inline">\(\mathbf{o_1}\)</span>。由于<span class="math inline">\(\mathbf{o}_1\mathbf{P}_i\mathbf{o}_2 =
0\)</span>，所以求出<span class="math inline">\(\mathbf{o}_1\)</span>可以通过求<span class="math inline">\(\mathbf{o}_1\mathbf{P}_i\)</span>右核的方式求出<span class="math inline">\(\mathbf{O}\)</span>，拿到<span class="math inline">\(\mathbf{O}\)</span>后正常签名就行。</p>
<h4 id="exp-1">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> shake_128</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> process, remote, context</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange, tqdm</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;error&quot;</span></span><br><span class="line">path = <span class="string">&quot;task.sage&quot;</span></span><br><span class="line">io = process([<span class="string">&quot;sage&quot;</span>, path])</span><br><span class="line">m, n = <span class="number">73</span>, <span class="number">180</span></span><br><span class="line">q = <span class="number">0x10001</span></span><br><span class="line">F = GF(q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recvpk</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;🌻 &quot;</span>.encode())</span><br><span class="line">    seed = <span class="built_in">int</span>(io.recvline())</span><br><span class="line">    set_random_seed(seed)</span><br><span class="line">    pk = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        P1 = random_matrix(F, n-m, n-m)</span><br><span class="line">        P2 = random_matrix(F, n-m, m)</span><br><span class="line">        P3 = matrix(F, m, m, literal_eval(io.recvline().decode()))</span><br><span class="line">        pk.append(block_matrix([[P1, P2], [<span class="number">0</span>, P3]]))</span><br><span class="line">    <span class="keyword">return</span> pk</span><br><span class="line"></span><br><span class="line">pks = []</span><br><span class="line">pks.extend(recvpk())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">79</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">b&quot;R&quot;</span>)</span><br><span class="line">    pks.extend(recvpk())</span><br><span class="line"></span><br><span class="line">A = []</span><br><span class="line">u = []</span><br><span class="line"><span class="keyword">for</span> pk <span class="keyword">in</span> tqdm(pks):</span><br><span class="line">    <span class="comment"># pk = pks[ind]</span></span><br><span class="line">    v = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, n - m):</span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                v.append(pk[i, j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                v.append(pk[i, j] + pk[j, i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - m):</span><br><span class="line">        v.append(pk[i, n-m])</span><br><span class="line">    A.append(v)</span><br><span class="line">    u.append(-pk[n - m, n - m])</span><br><span class="line"></span><br><span class="line">A = matrix(F, A)</span><br><span class="line">u = vector(F, u)</span><br><span class="line"></span><br><span class="line">v = A.solve_right(u)[-(n - m):].change_ring(ZZ)</span><br><span class="line">Ker = A.right_kernel_matrix()[:, -(n - m):].change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">H = Ker.change_ring(F).echelon_form().change_ring(ZZ)</span><br><span class="line">M = H.stack(v).stack(q * identity_matrix(Ker.ncols()))</span><br><span class="line">M = M.augment(column_matrix([<span class="number">0</span>] * M.nrows()))</span><br><span class="line">M[Ker.nrows(), -<span class="number">1</span>] = <span class="number">32</span></span><br><span class="line"></span><br><span class="line">ML = M.LLL()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ML.nrows()):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(ML[i][-<span class="number">1</span>]) == <span class="number">32</span>:</span><br><span class="line">        o1 = ML[i] * (ML[i][-<span class="number">1</span>]) / <span class="number">32</span></span><br><span class="line">        o1 = o1[:-<span class="number">1</span>].<span class="built_in">list</span>() + [<span class="number">1</span>] + [<span class="number">0</span>] * (m - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">o1 = vector(F, o1)</span><br><span class="line"><span class="built_in">print</span>(o1)</span><br><span class="line"><span class="keyword">assert</span> o1*pks[<span class="number">0</span>]*o1 == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">M = []</span><br><span class="line"><span class="keyword">for</span> pk <span class="keyword">in</span> tqdm(pks):</span><br><span class="line">    M.append(o1 * pk)</span><br><span class="line">M = matrix(F, M)</span><br><span class="line">O = M.right_kernel_matrix().T</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Hash</span>(<span class="params">msg</span>):</span><br><span class="line">    h = <span class="built_in">int</span>(shake_128(msg).hexdigest(<span class="number">3</span>*m),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> vector(GF(q),[(h:=h//q)%q <span class="keyword">if</span> i <span class="keyword">else</span> h%q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, O, pks</span>):</span><br><span class="line">    v = random_vector(F, n, <span class="number">1</span>)</span><br><span class="line">    M = matrix(F, [v*(pks[i]+pks[i].T)*O <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">    u = Hash(msg.encode())-vector([(v*pks[i]*v) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">    <span class="keyword">return</span> v+O*M.solve_right(u)</span><br><span class="line"></span><br><span class="line">pub = pks[-m:]</span><br><span class="line">io.sendlineafter(<span class="string">&quot;&gt; &quot;</span>, <span class="string">&quot;V&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">&quot;📝 &quot;</span>.encode(), <span class="built_in">str</span>(<span class="built_in">list</span>(sign(<span class="string">&quot;Unwind On Vacation&quot;</span>, O, pub))).encode())</span><br><span class="line"><span class="built_in">print</span>(io.recvall(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>侧信道</tag>
        <tag>UOV</tag>
      </tags>
  </entry>
  <entry>
    <title>2025OpenHarmonyCTF-Crypto-WP</title>
    <url>/2025/06/08/2025OpenHarmonyCTF-Crypto-WP/</url>
    <content><![CDATA[<p>第一届鸿蒙CTF，密码部分都挺简单的</p>
<span id="more"></span>
<h3 id="ea5y_rsa">Ea5y_RSA</h3>
<p><strong>题目描述</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">这是一个未完全开发的OpenHarmony应用，在hint.txt中泄露了部分日志记录。请根据给定的源码和日志记录得到flag</span><br></pre></td></tr></table></figure>
<p><strong>题目附件</strong></p>
<p><a href="Ea5y_RSA.zip">Ea5y_RSA.zip</a></p>
<h4 id="思路">思路</h4>
<p>Ea5y_rsa.ets里面有密文： <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">nlRTOIr7P61VxeNDiPtFd65VCBJWhKlpSMF+g7Fib3VYHZYc/kgNWeFHSMvcgsqWuBCfMkB90SPQDR6hKvaxhYrqLAg/8+rRWqZbL7hXD3s2JA92V8zgx18r9zmekS28UiTUTUZDkkAhhkrWFvdx3gqgxGwj/l+DX82StHiyyOo=</span><br></pre></td></tr></table></figure></p>
<p>hint.txt里面的gift有部分私钥： <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">00300d06092a864886f70d0101010500048202623082025e02010002818100a2f1fcc64fe2cb96aad3af057fdc9ad7fabe7d032b0fd6ef7a94af14d0adf155a85cb56edca219cd9f6077b41321093422890466a6c38ecc01f78c8db85c0ea27bd0a066709ac282688b8d0a3694a0a464f5d0292767a087636c0fe7dbfff92372836c4690b676fdde73b5479b46878d2449ddcd921f0837b52e6f7fd065b9dd02030100010281802b0d8d2048d33fbf9b7b3aef550d50cc6830148fd5bce5a978d5f83ca3b691e1740eaad193f230a727c931579f06478c42e3b909f65e0d48d1ec3a72e7974b362f59f5d3f871a2bd65bd44a8a503dd17b0b74e38b396c63f7e83dfa5ef203b9ebbcddfd3e4376b1388f1a9ce83225fe1</span><br></pre></td></tr></table></figure></p>
<p>只能提取出1024bit的n和d的高896bit: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0x00a2f1fcc64fe2cb96aad3af057fdc9ad7fabe7d032b0fd6ef7a94af14d0adf155a85cb56edca219cd9f6077b41321093422890466a6c38ecc01f78c8db85c0ea27bd0a066709ac282688b8d0a3694a0a464f5d0292767a087636c0fe7dbfff92372836c4690b676fdde73b5479b46878d2449ddcd921f0837b52e6f7fd065b9dd</span></span><br><span class="line">dh = <span class="number">0x2b0d8d2048d33fbf9b7b3aef550d50cc6830148fd5bce5a978d5f83ca3b691e1740eaad193f230a727c931579f06478c42e3b909f65e0d48d1ec3a72e7974b362f59f5d3f871a2bd65bd44a8a503dd17b0b74e38b396c63f7e83dfa5ef203b9ebbcddfd3e4376b1388f1a9ce83225fe1</span></span><br></pre></td></tr></table></figure></p>
<h4 id="exp">exp</h4>
<p>d高位泄露攻击： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line">c = <span class="string">&#x27;nlRTOIr7P61VxeNDiPtFd65VCBJWhKlpSMF+g7Fib3VYHZYc/kgNWeFHSMvcgsqWuBCfMkB90SPQDR6hKvaxhYrqLAg/8+rRWqZbL7hXD3s2JA92V8zgx18r9zmekS28UiTUTUZDkkAhhkrWFvdx3gqgxGwj/l+DX82StHiyyOo=&#x27;</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">0x00a2f1fcc64fe2cb96aad3af057fdc9ad7fabe7d032b0fd6ef7a94af14d0adf155a85cb56edca219cd9f6077b41321093422890466a6c38ecc01f78c8db85c0ea27bd0a066709ac282688b8d0a3694a0a464f5d0292767a087636c0fe7dbfff92372836c4690b676fdde73b5479b46878d2449ddcd921f0837b52e6f7fd065b9dd</span></span><br><span class="line">dh = <span class="number">0x2b0d8d2048d33fbf9b7b3aef550d50cc6830148fd5bce5a978d5f83ca3b691e1740eaad193f230a727c931579f06478c42e3b909f65e0d48d1ec3a72e7974b362f59f5d3f871a2bd65bd44a8a503dd17b0b74e38b396c63f7e83dfa5ef203b9ebbcddfd3e4376b1388f1a9ce83225fe1</span></span><br><span class="line">leakbit = <span class="number">112</span> * <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(leakbit)</span><br><span class="line"></span><br><span class="line">k = e * (dh &lt;&lt; (<span class="number">1024</span> - leakbit)) // n + <span class="number">1</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(RealField(<span class="number">2048</span>))</span><br><span class="line">f = e * (dh &lt;&lt; ((<span class="number">1024</span> - leakbit))) * x - x - k * (x - <span class="number">1</span>) * (n- x)</span><br><span class="line">r = f.roots()</span><br><span class="line">ph = <span class="built_in">int</span>(r[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ph + x</span><br><span class="line">pl = <span class="built_in">int</span>(f.small_roots(X=<span class="number">2</span>**<span class="number">200</span>, beta=<span class="number">0.49</span>, epsilon=<span class="number">0.02</span>)[<span class="number">0</span>])</span><br><span class="line">p = ph + pl</span><br><span class="line">q = n // p</span><br><span class="line">c = bytes_to_long(b64decode(c))</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p * q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
flag{01D_W1Ne_in_4_n3W_80t7lE_HAh4hAH4h4}</p>
<h3 id="small-message-for-sm4-encryption">Small Message For (SM4)
Encryption</h3>
<p><strong>题目描述</strong> <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">SM4 is a block cipher, standardised for commercial cryptography in China. It is used in the Chinese National Standard for Wireless LAN WAPI (WLAN Authentication and Privacy Infrastructure), and with Transport Layer Security.</span><br><span class="line"></span><br><span class="line">It seems to be very secure... But what if someone implement it insecurely?</span><br></pre></td></tr></table></figure></p>
<p><strong>题目附件</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm4, func</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG, secret_message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(a, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, plaintext, iv</span>):</span><br><span class="line">    cipher = sm4.CryptSM4(sm4.SM4_ENCRYPT, <span class="number">0</span>)</span><br><span class="line">    cipher.set_key(key, sm4.SM4_ENCRYPT)</span><br><span class="line">    ciphertext = cipher.crypt_cbc(iv,plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    key = secret_message</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(key) &lt; <span class="number">16</span>:</span><br><span class="line">        key += secret_message</span><br><span class="line">    key = key[:<span class="number">16</span>]</span><br><span class="line">    iv = urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    plaintext = <span class="string">b&quot;My FLAG? If you want it, I&#x27;ll let you have it... search for it! I left all of it at that place: &quot;</span> + FLAG</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(plaintext) % <span class="number">16</span> == <span class="number">0</span>, <span class="string">&quot;The message must be a multiple of 16 bytes.&quot;</span></span><br><span class="line">    ciphertext = encrypt(key, plaintext, iv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Ciphertext: <span class="subst">&#123;ciphertext.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;What is this: <span class="subst">&#123;xor(key, iv).<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<h4 id="exp-1">exp</h4>
<p>让ai写一个爆破secret_message的脚本 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm4, func</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知数据</span></span><br><span class="line">ciphertext_hex = <span class="string">&quot;d9ea43b0d208aa168e4a275a69df3bc86051e756f9ca7959b68c6b23c9e1b69c19e08b75938375a6be830d1844d8a6e368faf1ddffecea69b5abe00ac0d6e10d6696be33d40e83a272072fbe131f98c82587011f61f2d58a020c8c54cf9b651abd740a3d55d36daa9c88cfc10a520ce4211fba4365ce98b82355b17c64dd2de4800fc68df36cfa8a3fd05baac6970dcd&quot;</span></span><br><span class="line">xor_key_iv_hex = <span class="string">&quot;ee278c4e526ff15b8d308b6b18f83221&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为字节</span></span><br><span class="line">ciphertext = <span class="built_in">bytes</span>.fromhex(ciphertext_hex)</span><br><span class="line">xor_key_iv = <span class="built_in">bytes</span>.fromhex(xor_key_iv_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可能的字符集 (可打印ASCII)</span></span><br><span class="line">charset = string.printable.strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">key, ciphertext, iv</span>):</span><br><span class="line">    cipher = sm4.CryptSM4(sm4.SM4_DECRYPT, <span class="number">0</span>)</span><br><span class="line">    cipher.set_key(key, sm4.SM4_DECRYPT)</span><br><span class="line">    plaintext = cipher.crypt_cbc(iv, ciphertext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_secret_message</span>():</span><br><span class="line">    <span class="comment"># 尝试1-16字节长度的secret_message</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">17</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Trying length: <span class="subst">&#123;length&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 生成所有可能的组合</span></span><br><span class="line">        <span class="keyword">for</span> candidate <span class="keyword">in</span> itertools.product(charset, repeat=length):</span><br><span class="line">            secret = <span class="string">&#x27;&#x27;</span>.join(candidate)</span><br><span class="line">            <span class="comment"># 扩展key到16字节</span></span><br><span class="line">            key = (secret * (<span class="number">16</span> // <span class="built_in">len</span>(secret) + <span class="number">1</span>))[:<span class="number">16</span>].encode()</span><br><span class="line">            <span class="comment"># 计算iv</span></span><br><span class="line">            iv = <span class="built_in">bytes</span>(x ^ y <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(key, xor_key_iv))</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plaintext = decrypt(key, ciphertext, iv)</span><br><span class="line">                <span class="comment"># 检查解密结果是否符合预期格式</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&quot;My FLAG? If you want it&quot;</span> <span class="keyword">in</span> plaintext:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Found secret_message: <span class="subst">&#123;secret&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted plaintext: <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="comment"># 提取FLAG</span></span><br><span class="line">                    flag_start = plaintext.find(<span class="string">b&quot;flag&#123;&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> flag_start != -<span class="number">1</span>:</span><br><span class="line">                        flag_end = plaintext.find(<span class="string">b&quot;&#125;&quot;</span>, flag_start) + <span class="number">1</span></span><br><span class="line">                        flag = plaintext[flag_start:flag_end].decode()</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;FLAG found: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span> secret, flag</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    secret_message, flag = brute_force_secret_message()</span><br><span class="line">    <span class="keyword">if</span> secret_message:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Success! secret_message: &#x27;<span class="subst">&#123;secret_message&#125;</span>&#x27;, FLAG: &#x27;<span class="subst">&#123;flag&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed to find the secret_message and FLAG.&quot;</span>)</span><br></pre></td></tr></table></figure>
flag{tHe_m3s5ag3_1s_2_sMa11!11!}</p>
<h3 id="weak_random">Weak_random</h3>
<p><strong>题目描述</strong> <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">一道弱伪随机数生成器题目，密钥的生成过程存在严重漏洞。</span><br></pre></td></tr></table></figure></p>
<p><strong>题目附件</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">len</span>(flag)==<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">message</span>):</span><br><span class="line">    padding_len = <span class="number">16</span> - <span class="built_in">len</span>(message)%<span class="number">16</span></span><br><span class="line">    ret = <span class="built_in">hex</span>(padding_len)[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(ret*padding_len)+message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weak_entropy</span>():</span><br><span class="line">    time_now=time.time()%<span class="number">10000</span></span><br><span class="line"></span><br><span class="line">    entropy_part1 = <span class="built_in">int</span>(time_now) &amp; <span class="number">0xFFFF</span> </span><br><span class="line"></span><br><span class="line">    entropy_part2 = os.getpid() &amp; <span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">    final_seed = entropy_part1 + (entropy_part2 &lt;&lt; <span class="number">8</span>) </span><br><span class="line">    random.seed(final_seed)</span><br><span class="line">    </span><br><span class="line">    key = random.getrandbits(<span class="number">128</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line">entropy_key=get_weak_entropy()</span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">key_bytes = entropy_key.to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">msg=padding(flag.encode())</span><br><span class="line">aes = AES.new(key_bytes,AES.MODE_CBC,iv=iv)</span><br><span class="line">enc = aes.encrypt(msg)</span><br><span class="line"><span class="built_in">print</span>(enc.<span class="built_in">hex</span>())</span><br><span class="line">check=hashlib.sha256(flag.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()  </span><br><span class="line"><span class="built_in">print</span>(check)</span><br><span class="line"><span class="comment">#enc=e88b2eb25b22929b2eb84898bc2c620c8798637ab64b892c218c83a0e523580f6c5772c84461f09045b6bce48c102a5f</span></span><br><span class="line"><span class="comment">#check=83d92dc441e420587b2eb46f46ca424597af97a88f0da1b64243e287c69aa645</span></span><br></pre></td></tr></table></figure></p>
<h4 id="exp-2">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;e88b2eb25b22929b2eb84898bc2c620c8798637ab64b892c218c83a0e523580f6c5772c84461f09045b6bce48c102a5f&quot;</span>)</span><br><span class="line">check = <span class="string">&quot;83d92dc441e420587b2eb46f46ca424597af97a88f0da1b64243e287c69aa645&quot;</span></span><br><span class="line"></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> seed <span class="keyword">in</span> trange(<span class="number">0</span>, <span class="number">256</span>*<span class="number">256</span> + <span class="number">10000</span>):</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    key = random.getrandbits(<span class="number">128</span>).to_bytes(<span class="number">16</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    aes = AES.new(key,AES.MODE_CBC,iv=iv)</span><br><span class="line">    msg = aes.decrypt(enc)[<span class="number">16</span>:]</span><br><span class="line">    <span class="keyword">if</span> hashlib.sha256(msg).hexdigest() == check:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">b&quot;flag&#123;&quot;</span> + msg + <span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>flag{9848ca46c1c1cc9db4246566b275d3c8}</p>
<h3 id="simple-lll">Simple LLL</h3>
<p><strong>题目描述</strong> <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">simple lattice but openharmony</span><br></pre></td></tr></table></figure></p>
<p><strong>题目附件</strong></p>
<p><a href="Simple%20LLL.zip">Simple_LLL.zip</a></p>
<h4 id="思路-1">思路</h4>
<p>解压后发现是个鸿蒙逆向，拿<a href="https://github.com/ohos-decompiler/abc-decompiler/releases">https://github.com/ohos-decompiler/abc-decompiler/releases</a>工具反编译。</p>
<p>核心加密如下： <img src="/2025/06/08/2025OpenHarmonyCTF-Crypto-WP/enc.png"></p>
<p>即我们可以得到50组如下形式的<span class="math inline">\(c_i\)</span>： <span class="math display">\[
c_i = r_i*q + (g^{m_i}s_i \mod p)
\]</span> 其中<span class="math inline">\(r_i\)</span>，<span class="math inline">\(q\)</span>相对<span class="math inline">\(p\)</span>较小，所以直接用正交格加离散对数就解掉了</p>
<h4 id="exp-3">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"></span><br><span class="line">a = [<span class="number">45596599146517595769213567008027354990530152281109573038863246709378806226257335310766479851680188494182323525530530505256</span>, <span class="number">62432374431437591826734273911812391207656242897401885268127107607214388994256327721530322212234111642476641341569615655775</span>, <span class="number">66640867270680683651105915351782232550272910743762721024149499622223272317021218813086665442488154134536635091168151679262</span>, <span class="number">76568791607439426429890581080326982594324744169701114653618996191036247280167861065425161127891911640115719874949519513409</span>, <span class="number">80505764860782440798434567134832555598469365799962186558947545820389077349592175372099995788813126347559362498096484561087</span>, <span class="number">49886762049415620162731028873582943421775694364410242029122769830561241631714493053920164993309711714828904752810911376673</span>, <span class="number">63764608791300251401000140557122880801227171628942028982810331285921668215965127876492165610922306217924951340692885034445</span>, <span class="number">75150749592297738434833716596208117968146378967070896331493267301751508105379281839545556616649489492862396168011336629860</span>, <span class="number">64640885967491510460161437267821813741190981731057014520820089056784197782061031601387968993783090906716081424349788858131</span>, <span class="number">64437291571761719605154322068355171624572928894219031137168295198426051411772641573978100287013420825453909253049882111608</span>, <span class="number">66504977482535802726769039193408744223638783830651957559642117606942253995141503865661025618554702478031262816698525032136</span>, <span class="number">76002568717709562873915527551148914168997623756300359592451412016772230012774064201866937923034345062382027041394993181454</span>, <span class="number">63266985974944409749869963721110410312519236858231888474633226073550935799575298125269866699330196788217453515960042308014</span>, <span class="number">41378678610694150590920910285112607982977816143559599698344863434208418190795670372530100158282880873585095139346542182207</span>, <span class="number">47095714976926850579359360089815975293364468242683704814212607488560707212600108415692525003584392669639960496824687225871</span>, <span class="number">81712279014270911594566324410970967065420131442219991825217142864252526122573901396406765443368883802863522142841038531059</span>, <span class="number">46899315688285826493888208674882803737623349293461166939548270777452716728288162058211757343071983713080383903753175566525</span>, <span class="number">77001953210338837057924001273567386417735976768153786434377740557131463743054441573962638411859255662145059533392768151159</span>, <span class="number">61344092790836117616593559739714992543552126735084182427898958666452402020794852886254745796680655750124380725951855048010</span>, <span class="number">41798537018707926245084694076262041173943033079080146970126525132704066495699601424087894987780276017360809502522616125394</span>, <span class="number">63387993920920122367999624086483629563252946113412688583890185139461926238435833641040933872789534901371558025032872075509</span>, <span class="number">73308599701131409464380487348189364538310423897958233779818170276256490392349086950293706361381652255418906670559849023338</span>, <span class="number">79656592431138093729170996132259461695478861668300598583789836126987243595249158493470453092373692862598725554307228872775</span>, <span class="number">66686609349363352414174552287289340779849453906905378709020779878225151601984410724395496186873990929643813847426883168892</span>, <span class="number">73629238580972114305567044343530088917932511220527756471428594467552523423255130084899098302915123830683981111535738601638</span>, <span class="number">49498906417357835892520675114611644052169603417532472178901453472582291336119172842035513537774428033797593014512677351435</span>, <span class="number">52174217475092237597936231689235487926615205995485347429534522208443240578238018451973609326577546098568499813741462015539</span>, <span class="number">80047762077509250355763047192733755477123946490832613760007651778991838965572319380438868001156427212461586278039816493826</span>, <span class="number">65093211867471012814356995410138867637862719476444799545940055034242517927221160325208221269710241764401111566664350993658</span>, <span class="number">46011244750481202278149073625755585684260386245667515244622055779661135900620865355790231322990781098608449420272236827649</span>, <span class="number">53117509020129498861968904973153083766481628602843082575566170552766982459112237988922328578653333150309738552227954392141</span>, <span class="number">55459188663102328389961593038479425938901985433225942468392445820718629229313178400426180281496533959937344423076984430674</span>, <span class="number">78444745613219318304755274100121829802982955598779086342705126567561388206659867698016883565928585796097381260797922655519</span>, <span class="number">43958732315072668909629997482365926883011682959499021501879834969759552915014043651906394862009078183350949233959094932805</span>, <span class="number">61305435387549084308484680178646146929431427882044457046211844779552509450815730509488874603808230047212187842781103455153</span>, <span class="number">70637259106230458373333494078168198926256656499333956870221228138617427598610924695021659385808327535049122557717095889661</span>, <span class="number">65488728024961307175054135997812474419797386013099712092129340958152238442655356597216364171923967429155549425314004976747</span>, <span class="number">41625960760631805176266652837586144901306841022437321127731795763904181671613462308134640764955282404049919880515527122098</span>, <span class="number">71963979924766202542689152185192891354279089665062029590009513136963032846334363384099417013523272240110934926309168051428</span>, <span class="number">80251778335603398358629896861168846340221689717009306678229176648582836983027616322956600208242209788987847059377353910549</span>, <span class="number">70284032408930923412572260535342969184801973281722349552207656726600064883190098349426312634152674923127303108515857786319</span>, <span class="number">42017603985852991154545640679246147284482910315115721206206452863103006355613789016611463239370863506027749335463578575305</span>, <span class="number">69877399809833254387653649392946328765278216825706254792870473350054372563698919553742183921227432721214640597147524631246</span>, <span class="number">53857121890842582862177371083826128456199075709482866213895717527182513045934317770490721788186406883690528462156380898247</span>, <span class="number">64001232528214466569851169431725495993460092493119013330479471106567913343082607991839399906226146294179112946412714353633</span>, <span class="number">68794934824127239944040431762674854475686621190929074032646726399953434603694936833899174892998387998834509107900100986371</span>, <span class="number">68966508075486889501108784849699866656588246221931458138799356947047368779859934967665457687684069221994712578788436679754</span>, <span class="number">76000714031230558195498090452755463892015002095887478759556871466937829860283192442760605574465753606694091015079927493429</span>, <span class="number">65889577129438227733404759215735188782970893752143620491220200742094265192946367814381845991305876972823427075367837470223</span>, <span class="number">78057186896723223998512735748769800421682091882992425661700127016657965666059373278973633235161094736796529787276595121298</span>]</span><br><span class="line">M = column_matrix(a)</span><br><span class="line">M *= getPrime(<span class="number">1024</span>)</span><br><span class="line">M = M.augment(identity_matrix(M.nrows()))</span><br><span class="line">ML = M.LLL()</span><br><span class="line"></span><br><span class="line">K = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    <span class="keyword">assert</span> ML[i][<span class="number">0</span>] == <span class="number">0</span></span><br><span class="line">    K.append(ML[i][<span class="number">1</span>:])</span><br><span class="line">K = matrix(K)</span><br><span class="line">KK = K.right_kernel_matrix().LLL()</span><br><span class="line">m_ = KK[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> m_[<span class="number">0</span>] &lt; <span class="number">0</span>:</span><br><span class="line">    m_ *= -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;Lattice-based cryptography is the generic term for constructions of cryptographic primitives that involve &quot;</span>[:<span class="number">50</span>]</span><br><span class="line">P = <span class="number">910927656194791222517913045809166069831899969390111</span></span><br><span class="line">G = <span class="number">181486661693304272005374759243600368243</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">49</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    gm = m_[i] * <span class="built_in">pow</span>(<span class="built_in">ord</span>(s[i]), -<span class="number">1</span>, P)</span><br><span class="line">    m = discrete_log_lambda(Mod(gm, P), Mod(G, P), bounds=(<span class="number">2</span>**<span class="number">16</span>, <span class="number">2</span>**<span class="number">24</span>))</span><br><span class="line">    flag = long_to_bytes(m).decode() + flag</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b8fdba363c31f3a4cadaf5289e0bf4fb578f2a5e28dcdb8fdba363c31f3a4cadaf5289e0bf4fb578f2a5e28dcdb8fdba363c31f3a4cadaf5289e0bf4fb578f2a5e28dcdb8fdba363c31f3a</span></span><br></pre></td></tr></table></figure>
<p>最后解出来这一串不是flag，flag是子串b8fdba363c31f3a4cadaf5289e0bf4fb578f2a5e28dcd。。。</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>OL-attack</tag>
        <tag>DLP</tag>
      </tags>
  </entry>
  <entry>
    <title>2025VNCTF-Crypto-WP</title>
    <url>/2025/02/15/2025VNCTF-Crypto-WP/</url>
    <content><![CDATA[<p>只写了密码部分和一道杂项，最后离比赛结束还有几十秒的时候发现自己从30掉到了31，以为与奖品无缘了，但是后面收集wp的时候，前面有两队没交wp，所以排到29了:D。
<span id="more"></span></p>
<h3 id="eazymath">eazymath</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">flag=bytes_to_long(flag)</span><br><span class="line">l=flag.bit_length()//<span class="number">3</span> + <span class="number">1</span></span><br><span class="line">n=[]</span><br><span class="line">N=<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(n) &lt; <span class="number">3</span>:</span><br><span class="line">    p = <span class="number">4</span>*getPrime(l)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> isPrime(p):</span><br><span class="line">        n.append(p)</span><br><span class="line">        N *= p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;flag*flag%N&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols, expand</span><br><span class="line">x = symbols(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">polynomial = expand((x - n[<span class="number">0</span>]) * (x - n[<span class="number">1</span>]) * (x - n[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;polynomial=&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># c=24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"><span class="comment"># polynomial=x**3 - 15264966144147258587171776703005926730518438603688487721465*x**2 + 76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923*x - 125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br></pre></td></tr></table></figure></p>
<p>题目对flag做了如下加密: <span class="math display">\[
c = (flag)^2 \mod N
\]</span> 其中N是三个素数(n0, n1,
n2)的乘积，所以我们可以把加密的等式现转换到模素数下： <span class="math display">\[
c = (flag)^2 \mod n_i \ \ \ i \in {0, 1, 2}
\]</span>
然后来看如何获取这3个素数，题目给了一个整数上的polynomial，这3个素数就是这个多项式的根，所以直接用roots方法求解就行。
这样我们就得到了3个模素数下的二次方程，解这3个方程可以用AMM算法开模素数下的根号，但是这里我们用的是sage自带的roots方法，roots方法也是可以求解模素数下的多项式的根的。最后我们得到的结果是模<span class="math inline">\(n_i\)</span>下的<span class="math inline">\(flag\)</span>，所以还要用CRT(中国剩余定理)将模数提升到<span class="math inline">\(N\)</span>。 exp.sage: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(ZZ)</span><br><span class="line">c=<span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line">polynomial=x**<span class="number">3</span> - <span class="number">15264966144147258587171776703005926730518438603688487721465</span>*x**<span class="number">2</span> + <span class="number">76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923</span>*x - <span class="number">125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br><span class="line">n1, n2, n3 = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> polynomial.roots()]</span><br><span class="line">all_root = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> [n1, n2, n3]:</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(GF(n))</span><br><span class="line">    f = x^<span class="number">2</span> - c</span><br><span class="line">    all_root.append([ZZ(r[<span class="number">0</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> f.roots()])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r1 <span class="keyword">in</span> all_root[<span class="number">0</span>]:</span><br><span class="line">    <span class="keyword">for</span> r2 <span class="keyword">in</span> all_root[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">for</span> r3 <span class="keyword">in</span> all_root[<span class="number">2</span>]:</span><br><span class="line">            flag = crt([r1, r2, r3], [n1, n2, n3])</span><br><span class="line">            flag = long_to_bytes(flag)</span><br><span class="line">            <span class="keyword">if</span> flag.isascii():</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;VNCTF&#123;90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="simple_prediction">Simple_prediction</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice, randint</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag来源</span></span><br><span class="line">flag = <span class="string">b&quot;VNCTF&#123;xxxxxxx&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)&lt;<span class="number">100</span></span><br><span class="line">FLAG1=flag[:<span class="number">32</span>]</span><br><span class="line">FLAG2=flag[<span class="number">32</span>:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># part1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed=<span class="literal">None</span>, a=<span class="literal">None</span>, b=<span class="literal">None</span>, m=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> m:</span><br><span class="line">            <span class="variable language_">self</span>.m = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> seed:</span><br><span class="line">            <span class="variable language_">self</span>.seed = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">            <span class="variable language_">self</span>.a = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">            <span class="variable language_">self</span>.b = getPrime(<span class="number">512</span>)</span><br><span class="line">        <span class="comment">#print(f&quot;LCG 初始化参数: seed=&#123;self.seed&#125;\n a=&#123;self.a&#125;\n b=&#123;self.b&#125;\n m=&#123;self.m&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.seed = (<span class="variable language_">self</span>.seed * <span class="variable language_">self</span>.a + <span class="variable language_">self</span>.b) % <span class="variable language_">self</span>.m</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.seed</span><br><span class="line">binary_flag = <span class="string">&#x27;&#x27;</span>.join(<span class="string">f&quot;<span class="subst">&#123;byte:08b&#125;</span>&quot;</span> <span class="keyword">for</span> byte <span class="keyword">in</span> FLAG1)</span><br><span class="line">m = [<span class="built_in">int</span>(bit) <span class="keyword">for</span> bit <span class="keyword">in</span> binary_flag]</span><br><span class="line"></span><br><span class="line">n=[]</span><br><span class="line">lcg=LCG()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    z=lcg.<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        n.append(z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        z=randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">512</span>)</span><br><span class="line">        n.append(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = [...]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># part2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlagEncoder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, flag: <span class="built_in">bytes</span>, e: <span class="built_in">int</span> = <span class="number">65537</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.flag = flag</span><br><span class="line">        <span class="variable language_">self</span>.e = e</span><br><span class="line">        <span class="variable language_">self</span>.encoded_flag = []</span><br><span class="line">        <span class="variable language_">self</span>.n = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.c = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> idx, byte <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.flag):</span><br><span class="line">            <span class="variable language_">self</span>.encoded_flag.extend([idx + <span class="number">0x1234</span>] * byte)</span><br><span class="line">        shuffle(<span class="variable language_">self</span>.encoded_flag)</span><br><span class="line">        p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">        <span class="variable language_">self</span>.n = p * q</span><br><span class="line">        <span class="variable language_">self</span>.c = <span class="built_in">sum</span>(<span class="built_in">pow</span>(m, <span class="variable language_">self</span>.e, <span class="variable language_">self</span>.n) <span class="keyword">for</span> m <span class="keyword">in</span> <span class="variable language_">self</span>.encoded_flag) % <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.n = &#125;</span>\n<span class="subst">&#123;self.e = &#125;</span>\n<span class="subst">&#123;self.c = &#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">encoder = FlagEncoder(FLAG2)</span><br><span class="line">encoder.process()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">self.n = 16880924655573626811763865075201881594085658222047473444427295924181371341406971359787070757333746323665180258925280624345937931067302673406166527557074157053768756954809954623549764696024889104571712837947570927160960150469942624060518463231436452655059364616329589584232929658472512262657486196000339385053006838678892053410082983193195313760143294107276239320478952773774926076976118332506709002823833966693933772855520415233420873109157410013754228009873467565264170667190055496092630482018483458436328026371767734605083997033690559928072813698606007542923203397847175503893541662307450142747604801158547519780249</span></span><br><span class="line"><span class="string">self.e = 65537</span></span><br><span class="line"><span class="string">self.c = 9032357989989555941675564821401950498589029986516332099523507342092837051434738218296315677579902547951839735936211470189183670081413398549328213424711630953101945318953216233002076158699383482500577204410862449005374635380205765227970071715701130376936200309849157913293371540209836180873164955112090522763296400826270168187684580268049900241471974781359543289845547305509778118625872361241263888981982239852260791787315392967289385225742091913059414916109642527756161790351439311378131805693115561811434117214628348326091634314754373956682740966173046220578724814192276046560931649844628370528719818294616692090359</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Part1</strong>
题目基于一个LCG(线性同余的伪随机数生成器)，他的参数我们都不知道，但是由于FLAG1前缀是b"VNCTF{"，所以可以知道LCG特定位置的值，那么可以找到一个i，使得：
<span class="math display">\[
X_i = (aX_{i-1} + b) \% m
\]</span> 这里找到的是： <span class="math display">\[
\begin{aligned}
X_{8} = (aX_{7} + b) \% m \\
X_{11} = (aX_{10} + b) \% m \\
X_{12} = (aX_{15} + b) \% m \\
X_{19} = (aX_{18} + b) \% m
\end{aligned}
\]</span> 所以有： <span class="math display">\[
a = \frac{X_{8} - X_{11}}{X_{7}-X_{10}} =
\frac{X_{11}-X_{16}}{X_{10}-X_{15}} = \frac{X_{16} -
X_{19}}{X_{15}-X_{18}}
\]</span> 所以: <span class="math display">\[
\begin{aligned}
(X_{8} - X_{11})(X_{10}-X_{15})-(X_{7}-X_{10})(X_{11}-X_{16}) \equiv
0  \mod m \\
(X_{11} - X_{16})(X_{15}-X_{18})-(X_{10}-X_{15})(X_{16}-X_{19}) \equiv 0
\mod m
\end{aligned}
\]</span>
上面两式的左侧都是m的倍数，那他们的最大公因数很可能就是m，得到m后再利用上式求出a，b，然后反推出seed。
exp.sage: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, GCD</span><br><span class="line">n=[...]</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed=<span class="literal">None</span>, a=<span class="literal">None</span>, b=<span class="literal">None</span>, m=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.m = m</span><br><span class="line">        <span class="variable language_">self</span>.seed = seed</span><br><span class="line">        <span class="variable language_">self</span>.a = a</span><br><span class="line">        <span class="variable language_">self</span>.b = b</span><br><span class="line">        <span class="comment">#print(f&quot;LCG 初始化参数: seed=&#123;self.seed&#125;\n a=&#123;self.a&#125;\n b=&#123;self.b&#125;\n m=&#123;self.m&#125;&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.seed = (<span class="variable language_">self</span>.seed * <span class="variable language_">self</span>.a + <span class="variable language_">self</span>.b) % <span class="variable language_">self</span>.m</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.seed</span><br><span class="line"></span><br><span class="line">p1 = (n[<span class="number">8</span>]-n[<span class="number">11</span>])*(n[<span class="number">10</span>]-n[<span class="number">15</span>]) - (n[<span class="number">7</span>]-n[<span class="number">10</span>])*(n[<span class="number">11</span>]-n[<span class="number">16</span>])</span><br><span class="line">p2 = (n[<span class="number">11</span>]-n[<span class="number">16</span>])*(n[<span class="number">15</span>]-n[<span class="number">18</span>]) - (n[<span class="number">10</span>]-n[<span class="number">15</span>])*(n[<span class="number">16</span>]-n[<span class="number">19</span>])</span><br><span class="line">p = (GCD(p1, p2))</span><br><span class="line">a = (n[<span class="number">8</span>] - n[<span class="number">11</span>])*<span class="built_in">pow</span>(n[<span class="number">7</span>] - n[<span class="number">10</span>], -<span class="number">1</span>, p) % p</span><br><span class="line">b = (n[<span class="number">8</span>] - a*n[<span class="number">7</span>]) % p</span><br><span class="line">seed = (n[<span class="number">0</span>] - b)*<span class="built_in">pow</span>(a, -<span class="number">1</span>, p) % p</span><br><span class="line">lcg = LCG(seed, a, b, p)</span><br><span class="line">FLAG1 = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n)):</span><br><span class="line">    <span class="keyword">if</span> n[i] == lcg.<span class="built_in">next</span>():</span><br><span class="line">        FLAG1 = FLAG1 + <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        FLAG1 = FLAG1 + <span class="string">&quot;1&quot;</span></span><br><span class="line">FLAG1 = long_to_bytes(<span class="built_in">int</span>(FLAG1, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(FLAG1)</span><br><span class="line"><span class="comment"># b&#x27;VNCTF&#123;Happy_New_Year_C0ngratu1at&#x27;</span></span><br></pre></td></tr></table></figure> <strong>Part2</strong>
题目中的密文c可以如下表示： <span class="math display">\[
c = \sum^{len(FLAG2)-1}_{i=0} m_{i}*a_{i} \\
a_i = (i + 0x1234)^e \ \%n
\]</span>
由于FLAG2的长度未知，这里只知道他的长度小于69，但是我们还是可以假设长度为68，这样如果实际上没有这么长，那也就对应到<span class="math inline">\(m_i=0\)</span>的情况。
所以现在的问题就是如何解上面的多元线性方程组了，这里一共68个变量，但我们只有一个等式，所以这个方程实际上是有无穷多个解。难道就没办法求解了吗，其实我们还漏掉了一些信息，那就是这里的线性方程组都是整数，而且我们要求的未知量<span class="math inline">\(m_i\)</span>相比系数<span class="math inline">\(a_i\)</span>要小的多。前面无穷多解的结论是建立在实数域上的，这里满足上述条件的解是有限的。而找到这个解的方法就是使用格基规约算法，我们找下面这样的格<span class="math inline">\(A\)</span>:</p>
<p><span class="math display">\[
\begin{pmatrix}
a_0 &amp; 1 &amp; 0 &amp; \cdots &amp; 0\\
a_1 &amp; 0 &amp; 1 &amp; \cdots &amp; 0\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{67} &amp; 0 &amp; 0 &amp; \cdots &amp; 1 \\
c &amp; 0 &amp; 0 &amp; \cdots &amp; 0 \\
\end{pmatrix}_{68 \times 68}
\]</span> 这个格满足如下的线性关系: <span class="math display">\[
(m_0, m_1 \cdots, m_{67}, -1)\begin{pmatrix}
a_0 &amp; 1 &amp; 0 &amp; \cdots &amp; 0\\
a_1 &amp; 0 &amp; 1 &amp; \cdots &amp; 0\\
\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{67} &amp; 0 &amp; 0 &amp; \cdots &amp; 1 \\
c &amp; 0 &amp; 0 &amp; \cdots &amp; 0 \\
\end{pmatrix}_{68 \times 68} =
(0, m_0, m_1, \cdots, m_{67})
\]</span> 所以<span class="math inline">\((0, m_0, m_1, \cdots,
m_{67})\)</span>就是格中的一个短向量，我们对格使用格基规约算法就很有可能得到这个短向量。
exp.sage: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">16880924655573626811763865075201881594085658222047473444427295924181371341406971359787070757333746323665180258925280624345937931067302673406166527557074157053768756954809954623549764696024889104571712837947570927160960150469942624060518463231436452655059364616329589584232929658472512262657486196000339385053006838678892053410082983193195313760143294107276239320478952773774926076976118332506709002823833966693933772855520415233420873109157410013754228009873467565264170667190055496092630482018483458436328026371767734605083997033690559928072813698606007542923203397847175503893541662307450142747604801158547519780249</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">9032357989989555941675564821401950498589029986516332099523507342092837051434738218296315677579902547951839735936211470189183670081413398549328213424711630953101945318953216233002076158699383482500577204410862449005374635380205765227970071715701130376936200309849157913293371540209836180873164955112090522763296400826270168187684580268049900241471974781359543289845547305509778118625872361241263888981982239852260791787315392967289385225742091913059414916109642527756161790351439311378131805693115561811434117214628348326091634314754373956682740966173046220578724814192276046560931649844628370528719818294616692090359</span></span><br><span class="line">length = <span class="number">68</span></span><br><span class="line">m = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">    m.append(<span class="built_in">pow</span>(i + <span class="number">0x1234</span>, e, n))</span><br><span class="line">M = column_matrix(ZZ, m + [c])</span><br><span class="line">M = M.augment(identity_matrix(ZZ, length+<span class="number">1</span>))</span><br><span class="line">M = M.stack(vector(ZZ, [n] + [<span class="number">0</span>]*(length+<span class="number">1</span>)))</span><br><span class="line">MLLL = M.LLL()</span><br><span class="line">f = -MLLL[<span class="number">0</span>]</span><br><span class="line">FLAG2 = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">32</span> <span class="keyword">and</span> i &lt;= <span class="number">127</span>:</span><br><span class="line">        FLAG2 += <span class="built_in">bytes</span>([i])</span><br><span class="line"><span class="built_in">print</span>(FLAG2)</span><br><span class="line"><span class="built_in">print</span>(FLAG1 + FLAG2)</span><br><span class="line"><span class="comment"># b&#x27;i0ns_On_Rec0vering_The_Messages&#125;&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;VNCTF&#123;Happy_New_Year_C0ngratu1ati0ns_On_Rec0vering_The_Messages&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="ss0hurt">ss0Hurt!</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DaMie</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, flag , n = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.m = ZZ(bytes_to_long(flag))</span><br><span class="line">        <span class="variable language_">self</span>.n = n <span class="keyword">if</span> n <span class="keyword">else</span> getPrime(<span class="number">1024</span>)</span><br><span class="line">        <span class="variable language_">self</span>.P = Zmod(<span class="variable language_">self</span>.n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;self.n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, x, y, z</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vector([<span class="number">5</span> * x + y - <span class="number">5</span> * z, <span class="number">5</span> * y - z, <span class="number">5</span> * z])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Mat</span>(<span class="params">self, m</span>):</span><br><span class="line">        PR = <span class="variable language_">self</span>.P[<span class="string">&#x27;x,y,z&#x27;</span>]</span><br><span class="line">        x,y,z = PR.gens()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span>:</span><br><span class="line">            plana = <span class="variable language_">self</span>.Mat(m//<span class="number">2</span>)</span><br><span class="line">            planb = plana(*plana)</span><br><span class="line">            <span class="keyword">if</span> m % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> planb</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">self</span>.process(*planb)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.process(*PR.gens())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">self, A, B, C</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.Mat(<span class="variable language_">self</span>.m)(A, B, C)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    </span><br><span class="line">    Ouch = DaMie(flag)</span><br><span class="line">    result = Ouch.<span class="built_in">hash</span>(<span class="number">2025</span>,<span class="number">208</span>,<span class="number">209</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;hash(A,B,C) = <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>题目中的process方法实际上实现了一个如下的线性变换： <span class="math display">\[
M = \left(\begin{matrix}
5 &amp; 0  &amp; 0\\
1 &amp; 5  &amp; 0\\
-5&amp;-1  &amp; 5\\
\end{matrix}
\right)
\]</span>
题目中的Mat方法实现了一个类似矩阵快速幂的算法，之所以是类似，是因为快速幂算法中，当m=0时，返回值是一个恒等变换的结果，但这里又返回了经过<span class="math inline">\(M\)</span>变换后的结果，所以当输入为flag时，得到的实际上时<span class="math inline">\(M^{flag+2^k}\)</span>。我们可以不用管这个<span class="math inline">\(2^k\)</span>，因为他只会让我们最后得到的flag有1个比特的偏差，手动修复就好。</p>
<p>所以现在我们的问题就是已知<span class="math inline">\(M,
M^n\)</span>，如何求<span class="math inline">\(n\)</span>。
对于矩阵<span class="math inline">\(M^n\)</span>的求解，可以做如下操作：
<span class="math display">\[
M = \left(\begin{matrix}
0 &amp; 0  &amp; 0\\
1 &amp; 0  &amp; 0\\
-5&amp;-1  &amp; 0\\
\end{matrix}
\right)  +
\left(\begin{matrix}
5 &amp; 0  &amp; 0\\
0 &amp; 5  &amp; 0\\
0 &amp; 0  &amp; 5\\
\end{matrix}
\right) = K + 5I
\]</span> 而: <span class="math display">\[
K^3 = \mathbf{0}
\]</span> 所以对<span class="math inline">\((K+5I)^n\)</span>用二项式定理: <span class="math display">\[
M^n = (K + 5I)^n = C^2_nK^2(5I)^{n-2} + C^1_nK(5I)^{n-1}+(5I)^n \\ =
\left(\begin{matrix}
5^n &amp; 0  &amp; 0\\
n5^{n-1} &amp; 5^n  &amp; 0\\
a_{31} &amp; -n5^{n-1}  &amp; 5^n\\
\end{matrix}
\right)
\]</span> 所以: <span class="math display">\[
(2025,208,209)M^n = (A, 2028*5^n-2029*n5^{n-1}, 2029*5^n) = (A, B, C)
\]</span> 根据上面向量相等，可以提取出下面两个等式： <span class="math display">\[
\begin{gather}
2028*5^n-2029*n5^{n-1} = B \\
2029*5^n = C
\end{gather}
\]</span> 我们把<span class="math inline">\(n,
5^n\)</span>看作两个新的未知量，直接解方程组就可以得到<span class="math inline">\(n\)</span>。</p>
<p>exp.sage： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">h_A, h_B, h_C = (<span class="number">17199707718762989481733793569240992776243099972784327196212023936622130204798694753865087501654381623876011128783229020278210160383185417670794284015692458326761011808048967854332413536183785458993128524881447529380387804712214305034841856237045463243243451585619997751904403447841431924053651568039257094910</span>, <span class="number">62503976674384744837417986781499538335164333679603320998241675970253762411134672614307594505442798271581593168080110727738181755339828909879977419645331630791420448736959554172731899301884779691119177400457640826361914359964889995618273843955820050051136401731342998940859792560938931787155426766034754760036</span>, <span class="number">93840121740656543170616546027906623588891573113673113077637257131079221429328035796416874995388795184080636312185908173422461254266536066991205933270191964776577196573147847000446118311985331680378772920169894541350064423243733498672684875039906829095473677927238488927923581806647297338935716890606987700071</span>)</span><br><span class="line">A, B, C = [<span class="number">2025</span>, <span class="number">208</span>, <span class="number">209</span>]</span><br><span class="line">n = <span class="number">106743081253087007974132382690669187409167641660258665859915640694456867788135702053312073228376307091325146727550371538313884850638568106223326195447798997814912891375244381751926653858549419946547894675646011818800255999071070352934719005006228971056393128007601573916373180007524930454138943896336817929823</span></span><br><span class="line">K_5 = h_C * <span class="built_in">pow</span>(C, -<span class="number">1</span>, n) % n</span><br><span class="line">K = <span class="number">5</span>*(B*K_5 - h_B)*<span class="built_in">pow</span>(C*K_5, -<span class="number">1</span>, n) % n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(K)))</span><br><span class="line"><span class="string">b&#x27;VNCTF&#123;WWhy_diagonalization_1s_s0_brRRRrRrrRrrrRrRRrRRrrrRrRrRuUuUUUTTTtte3333?????ouch!ouch!Th3t_is_S0_Crazy!!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="并非rc4">并非RC4</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> small_key, flag</span><br><span class="line"></span><br><span class="line"><span class="comment">#你能找到这个实现错在哪吗</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">faulty_rc4_encrypt</span>(<span class="params">text</span>):</span><br><span class="line">    data_xor_iv = []</span><br><span class="line">    sbox = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    x = y = k = <span class="number">0</span></span><br><span class="line">    key = small_key</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        sbox.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            j = j + sbox[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]) &amp; <span class="number">255</span></span><br><span class="line">            sbox[i] = sbox[j]  </span><br><span class="line">            sbox[j] = sbox[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> text:</span><br><span class="line">                x = x + <span class="number">1</span> &amp; <span class="number">255</span></span><br><span class="line">                y = y + sbox[x] &amp; <span class="number">255</span></span><br><span class="line">                sbox[x] = sbox[y] </span><br><span class="line">                sbox[y] = sbox[x]</span><br><span class="line">                k = sbox[sbox[x] + sbox[y] &amp; <span class="number">255</span>]</span><br><span class="line">                data_xor_iv.append(idx^k^<span class="number">17</span>)</span><br><span class="line">    <span class="keyword">return</span> data_xor_iv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    mt_string = <span class="built_in">bytes</span>([random.getrandbits(<span class="number">8</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40000</span>)])</span><br><span class="line">    encrypted_data = faulty_rc4_encrypt(mt_string)</span><br><span class="line">    </span><br><span class="line">    p = nextprime(random.getrandbits(<span class="number">512</span>))</span><br><span class="line">    q = nextprime(random.getrandbits(<span class="number">512</span>))</span><br><span class="line">    n = p * q</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    </span><br><span class="line">    flag_number = bytes_to_long(flag.encode())</span><br><span class="line">    encrypted_flag = <span class="built_in">pow</span>(flag_number, e, n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data_RC4.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(encrypted_data))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;e =&quot;</span>, e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;encrypted_flag =&quot;</span>, encrypted_flag)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 26980604887403283496573518645101009757918606698853458260144784342978772393393467159696674710328131884261355662514745622491261092465745269577290758714239679409012557118030398147480332081042210408218887341210447413254761345186067802391751122935097887010056608819272453816990951833451399957608884115252497940851</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">encrypted_flag = 22847144372366781807296364754215583869872051137564987029409815879189317730469949628642001732153066224531749269434313483657465708558426141747771243442436639562785183869683190497179323158809757566582076031163900773712582568942616829434508926165117919744857175079480357695183964845638413639130567108300906156467</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>这题RC4的实现的问题出在了swap部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sbox[i] = sbox[j]  </span><br><span class="line">sbox[j] = sbox[i]</span><br></pre></td></tr></table></figure>
<p>这样导致的在多次进行交换后，sbox中的值会慢慢同化，而这题在加密后面20000bits的数据时，sbox中的值已经完全一样了，所以可以枚举sbox，得到后面20000bits的数据，这20000bits的数据，用来破解python的随机数系统完全足够了，之后就可以预测后面的素数生成，求解RSA了。
exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, setstate, getstate</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">SAMPLES = <span class="number">20000</span>//<span class="number">8</span></span><br><span class="line">M = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">19968</span>):</span><br><span class="line">    state = [<span class="built_in">int</span>(<span class="number">0</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line">    state[i//<span class="number">32</span>] = <span class="built_in">int</span>(<span class="number">1</span> &lt;&lt; (<span class="number">31</span> - (i%<span class="number">32</span>)))</span><br><span class="line">    setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state+[<span class="built_in">int</span>(<span class="number">624</span>)]), <span class="literal">None</span>))</span><br><span class="line">    [getrandbits(<span class="number">8</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40000</span>-SAMPLES)]</span><br><span class="line">    v = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(SAMPLES):</span><br><span class="line">        v += [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">bin</span>(<span class="built_in">int</span>(getrandbits(<span class="number">8</span>)))[<span class="number">2</span>:].zfill(<span class="number">8</span>)]</span><br><span class="line">    M.append(v)</span><br><span class="line">M = matrix(GF(<span class="number">2</span>), M)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(M.dimensions())</span></span><br><span class="line"><span class="comment"># print(M.rank())</span></span><br><span class="line"><span class="comment"># (19968, 20000)</span></span><br><span class="line"><span class="comment"># 19937</span></span><br><span class="line"></span><br><span class="line">KK = M[:<span class="number">32</span>,  <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>, <span class="number">19968</span>))]</span><br><span class="line"><span class="built_in">print</span>(KK.dimensions())</span><br><span class="line">MM = M[<span class="number">32</span>:,  <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>, <span class="number">19968</span>))]</span><br><span class="line"><span class="built_in">print</span>(MM.dimensions())</span><br><span class="line"><span class="built_in">print</span>(MM.rank())</span><br><span class="line">MM_inv = MM^(-<span class="number">1</span>)</span><br><span class="line">a0 = matrix(GF(<span class="number">2</span>), [[<span class="number">1</span>] + [<span class="number">0</span>]*<span class="number">31</span>])</span><br><span class="line"></span><br><span class="line">C = [...] <span class="comment"># data_RC4.txt</span></span><br><span class="line">n = <span class="number">26980604887403283496573518645101009757918606698853458260144784342978772393393467159696674710328131884261355662514745622491261092465745269577290758714239679409012557118030398147480332081042210408218887341210447413254761345186067802391751122935097887010056608819272453816990951833451399957608884115252497940851</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">encrypted_flag = <span class="number">22847144372366781807296364754215583869872051137564987029409815879189317730469949628642001732153066224531749269434313483657465708558426141747771243442436639562785183869683190497179323158809757566582076031163900773712582568942616829434508926165117919744857175079480357695183964845638413639130567108300906156467</span></span><br><span class="line"><span class="keyword">for</span> sbox <span class="keyword">in</span> trange(<span class="number">256</span>):</span><br><span class="line">    <span class="comment"># print(sbox)</span></span><br><span class="line">    v = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> C[<span class="number">40000</span>-SAMPLES:]:</span><br><span class="line">        v += [<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">bin</span>(i^^<span class="number">17</span>^^sbox)[<span class="number">2</span>:].zfill(<span class="number">8</span>)]</span><br><span class="line">    s = matrix(GF(<span class="number">2</span>), [v[<span class="number">32</span>: <span class="number">19968</span>]])</span><br><span class="line">    v = s + a0*KK</span><br><span class="line">    sol = v*MM_inv</span><br><span class="line">    final_state = a0.<span class="built_in">list</span>()+sol.<span class="built_in">list</span>()</span><br><span class="line">    state = [<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> final_state[<span class="number">32</span>*i:<span class="number">32</span>*i+<span class="number">32</span>]]), <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line">    <span class="keyword">if</span> state[<span class="number">0</span>] != <span class="number">1</span>&lt;&lt;<span class="number">31</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state+[<span class="built_in">int</span>(<span class="number">624</span>)]), <span class="literal">None</span>))</span><br><span class="line">    [getrandbits(<span class="number">8</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40000</span>)]</span><br><span class="line">    p = nextprime(getrandbits(<span class="number">512</span>))</span><br><span class="line">    <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">q = n//p</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">flag = <span class="built_in">pow</span>(encrypted_flag, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag)))</span><br><span class="line"><span class="comment"># VNCTF&#123;FL4w3d_RC4_C0nv3rg3s_2_123_4nd_M1nd_Sm4ller_MT_Brut3&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="fwshikaku">*fwshikaku</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime </span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_handle_timeout</span>(<span class="params">signum, frame</span>):</span><br><span class="line">    <span class="keyword">raise</span> TimeoutError(<span class="string">&#x27;function timeout&#x27;</span>)</span><br><span class="line"></span><br><span class="line">timeout = <span class="number">450</span></span><br><span class="line">signal.signal(signal.SIGALRM, _handle_timeout)</span><br><span class="line">signal.alarm(timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uniform_sample</span>(<span class="params">n, bound, SecureRandom</span>):</span><br><span class="line">    <span class="keyword">return</span> [SecureRandom.randrange(-bound, bound) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice_sample</span>(<span class="params">n, L, SecureRandom</span>):</span><br><span class="line">    <span class="keyword">return</span> [SecureRandom.choice(L) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">n = <span class="number">197</span></span><br><span class="line">m = <span class="number">19700</span></span><br><span class="line">q = getPrime(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">e_L = [random.randrange(<span class="number">0</span>, q-<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">R_s = random.SystemRandom()</span><br><span class="line">R_e = random.SystemRandom()</span><br><span class="line"></span><br><span class="line">s = np.array(uniform_sample(n, q//<span class="number">2</span>, R_s))</span><br><span class="line">e = np.array(choice_sample(m,  e_L, R_e))</span><br><span class="line"></span><br><span class="line">seed = os.urandom(<span class="number">16</span>)</span><br><span class="line">R_A = random</span><br><span class="line">R_A.seed(seed)</span><br><span class="line">A = np.array([uniform_sample(n, q, R_A) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">b = (A.dot(s) + e) % q</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e_L = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;seed.<span class="built_in">hex</span>() = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;b.tolist() = &#125;</span>&quot;</span>) </span><br><span class="line"></span><br><span class="line">s_ = <span class="built_in">input</span>(<span class="string">&quot;Give me s: &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> s_ == <span class="built_in">str</span>(s.tolist()):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Congratulations! You have signed in successfully.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(FLAG)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Sorry, you cannot sign in.&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p>这题比赛的时候就有思路了，但是没写出来，因为当时的思路是求解一个19700维的方程组，但是我这内存不够，每次使用sage的求解器都会崩溃，而且sage的solve_right方法默认是单线程的，所以就算内存够，时间也不够，因为题目给了450s的限时。赛后升级了一下内存，也顺便研究了一下solve_right的多线程，就把这题复刻了一遍。</p>
<h4 id="思路">思路</h4>
<p>这题具体的思路如下: 题目会生成一个秘密向量<span class="math inline">\(\mathbf{s}\)</span>，然后将<span class="math inline">\(\mathbf{s}\)</span>进行如下操作: <span class="math display">\[
\mathbf{c}_{19700 \times 1} = \mathbf{A}_{19700 \times 197}
\mathbf{s}_{197 \times 1} + \mathbf{e}_{19700 \times 1}
\]</span></p>
<p>然后把<span class="math inline">\(\mathbf{c},
\mathbf{A}\)</span>发送给我们，如果我们能找到<span class="math inline">\(\mathbf{s}\)</span>就能获得flag。这题关键在于我们不知道<span class="math inline">\(\mathbf{e}\)</span>，但是只知道<span class="math inline">\(\mathbf{e}\)</span>中的每个分量都是从e_L这个列表二选一得到的，所以对于<span class="math inline">\(\mathbf{A}\)</span>的每行，我们可以得到: <span class="math display">\[
\begin{gather}
c_i = (a_{i0}, a_{i1}, \cdots, a_{i196})
\begin{pmatrix}
s_0\\
s_1\\
\vdots\\
s_{196}\\
\end{pmatrix} + e\_L[0] \\
\mathrm{or} \\
c_i = (a_{i0}, a_{i1}, \cdots, a_{i196})
\begin{pmatrix}
s_0\\
s_1\\
\vdots\\
s_{196}\\
\end{pmatrix} + e\_L[1]
\end{gather}
\]</span></p>
<p>稍微变形得： <span class="math display">\[
\begin{gather}
a_{i0}s_0 + a_{i1}s_1 + \cdots + a_{i196}s_{196} + e\_L[0] - c_i = 0  
\\ \mathrm{or}\\
a_{i0}s_0 + a_{i1}s_1 + \cdots + a_{i196}s_{196} + e\_L[1] - c_i = 0  
\end{gather}
\]</span>
虽然这两个等式不知道哪一个会成立，但是我们能得出下面这个式子一定成立:
<span class="math display">\[
(a_{i0}s_0 + a_{i1}s_1 + \cdots + a_{i196}s_{196} + e\_L[0] -
c_i)*(a_{i0}s_0 + a_{i1}s_1 + \cdots + a_{i196}s_{196} + e\_L[1] - c_i)
= 0  
\]</span>
这个方程是二次的，含有197未知量，即使我们能获取到19700个这样的等式，想要求解他们也是很困难的，所以我们可以采取以下措施来将方程行线性化，我们直接打开上面的括号:
<span class="math display">\[
\begin{gather}
a_{i0}^2s_{0}^2 + a_{i1}^2s_{1}^2 + \cdots + a_{i196}^2s_{196}^2 + \\
2a_{i0}a_{i1}s_{0}s_{1} + 2a_{i0}a_{2}s_{i0}s_{2} + \cdots +
2a_{i195}a_{i196}s_{195}s_{196} + \\
a_{i0}(e\_L[0]+e\_L[1]-2c_i)s_{0} + a_{i1}(e\_L[0]+e\_L[1]-2c_i)s_{1} +
\cdots + a_{i196}(e\_L[0]+e\_L[1]-2c_i)s_{196} \\
= (c_i-e\_L[0])(c_i-e\_L[1])
\end{gather}
\]</span>
打开后我们发现等号左边刚好19700项，所以我们可以把左边的每一项的未知量都用一个新的未知量代替：
<span class="math display">\[
a_{i0}^2x_{0} + a_{i1}^2x_{1} + \cdots +
a_{i196}(e\_L[0]+e\_L[1]-2c_i)x_{19699} = (c_i-e\_L[0])(c_i-e\_L[1])
\]</span>
这样就得到了一个19700个未知量的线性方程了，而这样的方程一共有19700个，所以我们就可以用sage的solve_right求解了。</p>
<h4 id="多线程solve_right">多线程solve_right</h4>
<p>sage的线性代数操作是基于BLAS(Basic Linear Algebra
Subprograms)接口的，而对于这个接口的实现，一般都是操作系统自带的实现，它主要保证了稳定性，但在效率方面一般，而且不能使用多线程，所以这里我们需要把这个默认的实现更换掉，这里我换成了openblas:
通过<code>sudo pacman -S openblas</code>安装openblas，
通过<code>sudo pacman -S blas-openblas</code>安装blas-openblas，这个包会将系统默认
blas 替换为 openblas。</p>
<h4 id="exp">exp</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uniform_sample</span>(<span class="params">n, bound, SecureRandom</span>):</span><br><span class="line">    <span class="keyword">return</span> [SecureRandom.randrange(-bound, bound) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice_sample</span>(<span class="params">n, L, SecureRandom</span>):</span><br><span class="line">    <span class="keyword">return</span> [SecureRandom.choice(L) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&quot;node.vnteam.cn&quot;</span>, <span class="number">47987</span>)</span><br><span class="line">q = <span class="built_in">int</span>(io.recvline().decode().strip().split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">e_L = <span class="built_in">eval</span>(io.recvline().decode().strip().split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>])</span><br><span class="line">seed = <span class="built_in">bytes</span>.fromhex(io.recvline().decode().strip().split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>].strip(<span class="string">&quot;&#x27;&quot;</span>))</span><br><span class="line">b = <span class="built_in">eval</span>(io.recvline().decode().strip().split(<span class="string">&quot; = &quot;</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;数据收集完成&quot;</span>)</span><br><span class="line">R_A = random</span><br><span class="line">R_A.seed(seed)</span><br><span class="line"></span><br><span class="line">A = [uniform_sample(<span class="number">197</span>, q, R_A) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19700</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_row_task</span>(<span class="params">begin, end</span>):</span><br><span class="line">    M_i = random_matrix(ZZ, end-begin, <span class="number">19700</span>)</span><br><span class="line">    row = [<span class="number">0</span>] * <span class="number">19700</span>  <span class="comment"># 初始化一行数据ZZ</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(begin, end):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">197</span>):</span><br><span class="line">            row[i] = A[k][i] ** <span class="number">2</span></span><br><span class="line">        cnt = <span class="number">197</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">197</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="number">197</span>):</span><br><span class="line">                row[cnt] = <span class="number">2</span> * A[k][i] * A[k][j]</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">197</span>):</span><br><span class="line">            row[cnt] = A[k][i] * (e_L[<span class="number">0</span>] + e_L[<span class="number">1</span>] - <span class="number">2</span> * b[k])</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        M_i[k-begin] = row</span><br><span class="line">    <span class="keyword">return</span> M_i</span><br><span class="line"></span><br><span class="line">begin = time.time()</span><br><span class="line">dim = <span class="number">19700</span></span><br><span class="line">num = <span class="number">8</span></span><br><span class="line">gap = dim // num</span><br><span class="line">M = matrix(GF(q), [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19700</span>)]])</span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor(max_workers=num) <span class="keyword">as</span> executor:</span><br><span class="line">    future_all = [executor.submit(get_row_task, gap*i, gap*(i+<span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)] + [executor.submit(get_row_task, gap*<span class="number">8</span>, dim)]</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> future_all:</span><br><span class="line">        M = M.stack(future.result())</span><br><span class="line">M = M[<span class="number">1</span>:]</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;矩阵 M 填充完成，耗时<span class="subst">&#123;end-begin&#125;</span>s&quot;</span>)</span><br><span class="line"></span><br><span class="line">begin = time.time()</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">    y.append(-(b[i]-e_L[<span class="number">0</span>])*(b[i]-e_L[<span class="number">1</span>]))</span><br><span class="line">y = vector(GF(q), y)</span><br><span class="line">x = M.solve_right(y)</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;求解完成，耗时<span class="subst">&#123;end-begin&#125;</span>s&quot;</span>)</span><br><span class="line">s = x[-<span class="number">197</span>:].change_ring(ZZ).<span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span> s[i] &gt;= q//<span class="number">2</span>:</span><br><span class="line">        s[i] -= q</span><br><span class="line">s = np.array(s)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;Give me s: &quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(s.tolist()).encode())</span><br><span class="line"><span class="built_in">print</span>(io.recvline())</span><br><span class="line">flag = io.recvline()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">矩阵 M 填充完成，耗时103.08421277999878s</span><br><span class="line">求解完成，耗时145.3967547416687s</span><br><span class="line">VNCTF&#123;Wh3%_th3rr0R_c@nd1d@t3s_0f_L3@rn1n9-w1tH-3r^20r_1s_sm4ll,it_WoulD_b3-R3411Y_D4ng3r0us!!&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2025GHCTF新生赛-Crypto-WP</title>
    <url>/2025/03/06/2025GHCTF%E6%96%B0%E7%94%9F%E8%B5%9B-Crypto-WP/</url>
    <content><![CDATA[<p>遇到了几个有意思的题记录一下</p>
<span id="more"></span>
<h3 id="babysign">babysign</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line">p=getPrime(<span class="number">128</span>)</span><br><span class="line">q=getPrime(<span class="number">128</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxx&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br><span class="line">m=bytes_to_long(flag.encode())</span><br><span class="line">e=<span class="number">4</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p= 182756071972245688517047475576147877841</span></span><br><span class="line"><span class="string">q= 305364532854935080710443995362714630091</span></span><br><span class="line"><span class="string">c= 14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line"><span class="string">n= 55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>可以发现这里<span class="math inline">\(e\)</span>为偶数，与<span class="math inline">\(\phi(n)\)</span>是不互素的，所以没办法求出<span class="math inline">\(d\)</span>，这里实际上是需在模素数的情况下开4次方根，开根可以直接用sagemath的roots方法，由于是在模p，q的情况下分别开根的，所以要用CRT将p，q合并。</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p= <span class="number">182756071972245688517047475576147877841</span></span><br><span class="line">q= <span class="number">305364532854935080710443995362714630091</span></span><br><span class="line">c= <span class="number">14745090428909283741632702934793176175157287000845660394920203837824364163635</span></span><br><span class="line">n= <span class="number">55807222544207698804941555841826949089076269327839468775219849408812970713531</span></span><br><span class="line">PR.&lt;x&gt; = ZZ[]</span><br><span class="line">f = x^<span class="number">4</span> - c</span><br><span class="line">mp = [<span class="built_in">int</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> f.change_ring(GF(p)).roots()]</span><br><span class="line">mq = [<span class="built_in">int</span>(i[<span class="number">0</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> f.change_ring(GF(q)).roots()]</span><br><span class="line"><span class="keyword">for</span> m1 <span class="keyword">in</span> mp:</span><br><span class="line">    <span class="keyword">for</span> m2 <span class="keyword">in</span> mq:</span><br><span class="line">        m = crt([m1, m2], [p, q])</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># NSSCTF&#123;4MM_1s_so_e4s7!&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="baby_factor">baby_factor</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pl  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pl.append(getPrime(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(pl)</span><br><span class="line">pl = create()</span><br><span class="line">m=<span class="string">b&#x27;NSSCTF&#123;xxx&#125;&#x27;</span></span><br><span class="line">p,q,r = pl[<span class="number">0</span>],pl[<span class="number">1</span>],pl[<span class="number">2</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(m),e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi=<span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197846086151042512153782486075793224874304872205720564733574010669935992016367832666397263951446340260962650378484847385424893514879629196181114844346169851383460163815147712907264437435463059397586675769959094397311450861780912636566993749356097243760640620004707428340786147078475120876426087835327094386842765660642186546472260607586011343238080538092580452700406255443887820337778505999803772196923996033929998741437250238302626841957729397241851219567703420968177784088484002831289722211924810899441563382481216744212304879717297444824808184727136770899310815544776369231934774967139834384853322157766059825736075553</span></span><br><span class="line"><span class="string">phi=2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197784246608456057052779643060628984335578973450260519106769911425793594847759982583376628098472390090331415895352869275325656949958242181688663465437185437198392460569653734315961071709533645370007008616755547195108861900432818710027794402838336405197750190466425895582236209479543326147804766393022786785337752319686125574507066082357748118175068545756301823381723776525427724798780890160482013759497102382173931716030992837059880049832065500252713739288235410544982532170147652055063681116147027591678349638753796122845041417275362394757384204924094885233281257928031484806977974575497621444483701792085077113227851520</span></span><br><span class="line"><span class="string">c=2675023626005191241628571734421094007494866451142251352071850033504791090546156004348738217761733467156596330653396106482342801412567035848069931148880296036606611571818493841795682186933874790388789734748415540102210757974884805905578650801916130709273985096229857987312816790471330181166965876955546627327549473645830218664078284830699777113214559053294592015697007540297033755845037866295098660371843447432672454589238297647906075964139778749351627739005675106752803394387612753005638224496040203274119150075266870378506841838513636541340104864561937527329845541975189814018246183215952285198950920021711141273569490277643382722047159198943471946774301837440950402563578645113393610924438585345876355654972759318203702572517614743063464534582417760958462550905093489838646250677941813170355212088529993225869303917882372480469839803533981671743959732373159808299457374754090436951368378994871937358645247263240789585351233</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure> 多素数的RSA，由于给了<span class="math inline">\(\phi(n)\)</span>，所以和常规的RSA一样，可以直接求出解密指数<span class="math inline">\(d\)</span>。</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n=<span class="number">2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197846086151042512153782486075793224874304872205720564733574010669935992016367832666397263951446340260962650378484847385424893514879629196181114844346169851383460163815147712907264437435463059397586675769959094397311450861780912636566993749356097243760640620004707428340786147078475120876426087835327094386842765660642186546472260607586011343238080538092580452700406255443887820337778505999803772196923996033929998741437250238302626841957729397241851219567703420968177784088484002831289722211924810899441563382481216744212304879717297444824808184727136770899310815544776369231934774967139834384853322157766059825736075553</span></span><br><span class="line">phi=<span class="number">2741832985459799195551463586200496171706401045582705736390510500694289553647578857170635209048629428396407631873312962021354740290808869502374444435394061448767702908255197762575345798570340246369827688321483639197634802985398882606068294663625992927239602442735647762662536456784313240499437659967114509197784246608456057052779643060628984335578973450260519106769911425793594847759982583376628098472390090331415895352869275325656949958242181688663465437185437198392460569653734315961071709533645370007008616755547195108861900432818710027794402838336405197750190466425895582236209479543326147804766393022786785337752319686125574507066082357748118175068545756301823381723776525427724798780890160482013759497102382173931716030992837059880049832065500252713739288235410544982532170147652055063681116147027591678349638753796122845041417275362394757384204924094885233281257928031484806977974575497621444483701792085077113227851520</span></span><br><span class="line">c=<span class="number">2675023626005191241628571734421094007494866451142251352071850033504791090546156004348738217761733467156596330653396106482342801412567035848069931148880296036606611571818493841795682186933874790388789734748415540102210757974884805905578650801916130709273985096229857987312816790471330181166965876955546627327549473645830218664078284830699777113214559053294592015697007540297033755845037866295098660371843447432672454589238297647906075964139778749351627739005675106752803394387612753005638224496040203274119150075266870378506841838513636541340104864561937527329845541975189814018246183215952285198950920021711141273569490277643382722047159198943471946774301837440950402563578645113393610924438585345876355654972759318203702572517614743063464534582417760958462550905093489838646250677941813170355212088529993225869303917882372480469839803533981671743959732373159808299457374754090436951368378994871937358645247263240789585351233</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;W0W!!_Y0u_4r3_g00d_G03!!!&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="ez_fermat">EZ_Fermat</h3>
<p>题目: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">f = R(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p),n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;e = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line"><span class="string">f = 2*x^332 - x^331 + x^329 + 3*x^328 - x^327 - 3*x^325 + x^323 - 3*x^322 - x^321 - 3*x^320 + x^319 + 2*x^318 - 4*x^317 - 3*x^315 - 2*x^314 + x^313 + x^312 + 2*x^311 + 2*x^309 + 2*x^308 + 5*x^307 + 2*x^306 + 3*x^305 + 5*x^304 + 4*x^303 + x^302 - x^301 - x^300 - 2*x^299 - 2*x^298 + x^297 + 3*x^296 - x^295 - 4*x^292 - x^290 + 4*x^289 - x^287 - 3*x^286 + x^285 - 2*x^284 + x^283 - x^282 - 2*x^281 + x^280 - 2*x^279 + x^278 + 2*x^277 - 3*x^276 - x^275 - 4*x^274 - 3*x^273 - 5*x^272 - 2*x^271 - 3*x^270 + 2*x^269 + 2*x^268 - x^267 - 2*x^266 + x^265 + x^264 - 3*x^262 - 3*x^259 + 2*x^258 - x^257 + 2*x^256 + 2*x^255 - x^254 - 2*x^253 - x^252 + 2*x^251 - x^250 + x^249 + 2*x^247 + 2*x^246 + 2*x^245 - 2*x^244 - 3*x^243 + 2*x^242 - 3*x^241 - x^240 - 3*x^239 - x^236 - 3*x^235 - 2*x^234 - x^233 - 2*x^232 - x^231 - 3*x^230 - 2*x^229 - 4*x^228 - 2*x^227 - 3*x^226 + 2*x^225 + x^224 - x^223 - 2*x^221 + 3*x^219 - x^217 - 2*x^216 + x^215 + 2*x^213 - x^212 + 3*x^211 + x^210 + 4*x^209 + x^208 - x^206 - x^205 - x^204 + 2*x^203 - 3*x^202 + 2*x^199 - x^198 + 2*x^196 - 2*x^195 + 3*x^194 + 3*x^193 - x^192 + 4*x^191 + 2*x^189 + x^186 - x^185 - x^184 + 3*x^183 + x^182 + 2*x^181 - 2*x^180 + x^177 + x^175 - x^173 + 3*x^172 + x^170 + x^169 - x^167 - 2*x^166 - x^165 - 4*x^164 - 2*x^163 + 2*x^162 + 4*x^161 - 2*x^160 - 3*x^159 - 2*x^158 - 2*x^157 + x^156 - x^155 + 3*x^154 - 4*x^153 + x^151 + 2*x^150 + x^149 - x^148 + 2*x^147 + 3*x^146 + 2*x^145 - 4*x^144 - 4*x^143 + x^142 - 2*x^140 - 2*x^139 + 2*x^138 + 3*x^137 + 3*x^136 + 3*x^135 + x^134 - x^133 + 2*x^132 + 3*x^130 - 3*x^129 - 2*x^128 - x^127 - 2*x^126 + x^125 + x^124 - 2*x^123 + x^122 - x^121 + 3*x^120 - x^119 - 2*x^118 - x^117 - x^116 - 2*x^115 + 2*x^114 + 2*x^113 - 3*x^112 - x^111 - 4*x^110 + x^109 + x^108 + x^106 - 4*x^105 + x^104 - x^103 - x^101 + x^100 - 2*x^99 + x^98 - x^97 + 3*x^96 + 3*x^94 - x^93 - x^92 + x^91 - 2*x^90 + x^89 - x^88 + x^87 - x^86 + x^85 + x^84 - x^83 + x^79 - 3*x^78 - 2*x^77 + x^74 + 3*x^73 - x^72 - 3*x^71 - 2*x^70 + x^69 - 3*x^66 + x^65 + x^64 - 4*x^62 - x^61 + x^60 - x^59 + 3*x^58 - x^57 - x^54 + 3*x^53 + x^51 - 3*x^50 - x^49 + 2*x^47 - x^46 - x^44 + x^43 - x^42 - 4*x^41 - 3*x^39 - x^37 - x^36 - 3*x^35 + x^34 + x^33 - 2*x^32 + 2*x^31 - x^30 + 2*x^29 - 2*x^28 - 2*x^27 - x^24 + x^22 - 5*x^21 + 3*x^20 + 2*x^19 - x^18 + 2*x^17 + x^16 - 2*x^15 - 2*x^14 + x^13 + x^12 + 2*x^11 - 3*x^10 + 3*x^9 + 2*x^8 - 4*x^6 - 2*x^5 - 4*x^4 + x^3 - x^2 - 1</span></span><br><span class="line"><span class="string">w = 32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>这题看题目就知道要用费马小定理: <span class="math display">\[
p为素数，对任意的整数a，有:\\
a^p \equiv a \mod p
\]</span> 这里要用到费马小定理的一个推论: <span class="math display">\[
a^{p^i} \equiv a \mod p
\]</span> 通过反复使用费马小定理可以得到这个推论。</p>
<p>对于题目所给的<span class="math inline">\(w\)</span>，有: <span class="math display">\[
w \equiv 2^{f(p)} \equiv 2^{\sum^{332}_0a_ip^i} \equiv
\prod^{332}_02^{a_ip^i} \equiv \prod^{332}_02^{a_i} \mod p
\]</span></p>
<p>所以: <span class="math display">\[
p \mid w - \prod^{332}_02^{a_i}
\]</span></p>
<p>所以<span class="math inline">\(w -
\prod^{332}_02^{a_i}\)</span>与<span class="math inline">\(n\)</span>的最大公因数就是<span class="math inline">\(p\)</span>，成功分解<span class="math inline">\(n\)</span>后就是常规的RSA解密了。</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">n = <span class="number">101780569941880865465631942473186578520071435753163950944409148606282910806650879176280021512435190682009749926285674412651435782567149633130455645157688819845748439487113261739503325065997835517112163014056297017874761742768297646567397770742374004940360061700285170103292360590891188591132054903101398360047</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">77538275949900942020886849496162539665323546686749270705418870515132296087721218282974435210763225488530925782158331269160555819622551413648073293857866671421886753377970220838141826468831099375757481041897142546760492813343115244448184595644585857978116766199800311200819967057790401213156560742779242511746</span></span><br><span class="line">f = <span class="number">2</span>*x^<span class="number">332</span> - x^<span class="number">331</span> + x^<span class="number">329</span> + <span class="number">3</span>*x^<span class="number">328</span> - x^<span class="number">327</span> - <span class="number">3</span>*x^<span class="number">325</span> + x^<span class="number">323</span> - <span class="number">3</span>*x^<span class="number">322</span> - x^<span class="number">321</span> - <span class="number">3</span>*x^<span class="number">320</span> + x^<span class="number">319</span> + <span class="number">2</span>*x^<span class="number">318</span> - <span class="number">4</span>*x^<span class="number">317</span> - <span class="number">3</span>*x^<span class="number">315</span> - <span class="number">2</span>*x^<span class="number">314</span> + x^<span class="number">313</span> + x^<span class="number">312</span> + <span class="number">2</span>*x^<span class="number">311</span> + <span class="number">2</span>*x^<span class="number">309</span> + <span class="number">2</span>*x^<span class="number">308</span> + <span class="number">5</span>*x^<span class="number">307</span> + <span class="number">2</span>*x^<span class="number">306</span> + <span class="number">3</span>*x^<span class="number">305</span> + <span class="number">5</span>*x^<span class="number">304</span> + <span class="number">4</span>*x^<span class="number">303</span> + x^<span class="number">302</span> - x^<span class="number">301</span> - x^<span class="number">300</span> - <span class="number">2</span>*x^<span class="number">299</span> - <span class="number">2</span>*x^<span class="number">298</span> + x^<span class="number">297</span> + <span class="number">3</span>*x^<span class="number">296</span> - x^<span class="number">295</span> - <span class="number">4</span>*x^<span class="number">292</span> - x^<span class="number">290</span> + <span class="number">4</span>*x^<span class="number">289</span> - x^<span class="number">287</span> - <span class="number">3</span>*x^<span class="number">286</span> + x^<span class="number">285</span> - <span class="number">2</span>*x^<span class="number">284</span> + x^<span class="number">283</span> - x^<span class="number">282</span> - <span class="number">2</span>*x^<span class="number">281</span> + x^<span class="number">280</span> - <span class="number">2</span>*x^<span class="number">279</span> + x^<span class="number">278</span> + <span class="number">2</span>*x^<span class="number">277</span> - <span class="number">3</span>*x^<span class="number">276</span> - x^<span class="number">275</span> - <span class="number">4</span>*x^<span class="number">274</span> - <span class="number">3</span>*x^<span class="number">273</span> - <span class="number">5</span>*x^<span class="number">272</span> - <span class="number">2</span>*x^<span class="number">271</span> - <span class="number">3</span>*x^<span class="number">270</span> + <span class="number">2</span>*x^<span class="number">269</span> + <span class="number">2</span>*x^<span class="number">268</span> - x^<span class="number">267</span> - <span class="number">2</span>*x^<span class="number">266</span> + x^<span class="number">265</span> + x^<span class="number">264</span> - <span class="number">3</span>*x^<span class="number">262</span> - <span class="number">3</span>*x^<span class="number">259</span> + <span class="number">2</span>*x^<span class="number">258</span> - x^<span class="number">257</span> + <span class="number">2</span>*x^<span class="number">256</span> + <span class="number">2</span>*x^<span class="number">255</span> - x^<span class="number">254</span> - <span class="number">2</span>*x^<span class="number">253</span> - x^<span class="number">252</span> + <span class="number">2</span>*x^<span class="number">251</span> - x^<span class="number">250</span> + x^<span class="number">249</span> + <span class="number">2</span>*x^<span class="number">247</span> + <span class="number">2</span>*x^<span class="number">246</span> + <span class="number">2</span>*x^<span class="number">245</span> - <span class="number">2</span>*x^<span class="number">244</span> - <span class="number">3</span>*x^<span class="number">243</span> + <span class="number">2</span>*x^<span class="number">242</span> - <span class="number">3</span>*x^<span class="number">241</span> - x^<span class="number">240</span> - <span class="number">3</span>*x^<span class="number">239</span> - x^<span class="number">236</span> - <span class="number">3</span>*x^<span class="number">235</span> - <span class="number">2</span>*x^<span class="number">234</span> - x^<span class="number">233</span> - <span class="number">2</span>*x^<span class="number">232</span> - x^<span class="number">231</span> - <span class="number">3</span>*x^<span class="number">230</span> - <span class="number">2</span>*x^<span class="number">229</span> - <span class="number">4</span>*x^<span class="number">228</span> - <span class="number">2</span>*x^<span class="number">227</span> - <span class="number">3</span>*x^<span class="number">226</span> + <span class="number">2</span>*x^<span class="number">225</span> + x^<span class="number">224</span> - x^<span class="number">223</span> - <span class="number">2</span>*x^<span class="number">221</span> + <span class="number">3</span>*x^<span class="number">219</span> - x^<span class="number">217</span> - <span class="number">2</span>*x^<span class="number">216</span> + x^<span class="number">215</span> + <span class="number">2</span>*x^<span class="number">213</span> - x^<span class="number">212</span> + <span class="number">3</span>*x^<span class="number">211</span> + x^<span class="number">210</span> + <span class="number">4</span>*x^<span class="number">209</span> + x^<span class="number">208</span> - x^<span class="number">206</span> - x^<span class="number">205</span> - x^<span class="number">204</span> + <span class="number">2</span>*x^<span class="number">203</span> - <span class="number">3</span>*x^<span class="number">202</span> + <span class="number">2</span>*x^<span class="number">199</span> - x^<span class="number">198</span> + <span class="number">2</span>*x^<span class="number">196</span> - <span class="number">2</span>*x^<span class="number">195</span> + <span class="number">3</span>*x^<span class="number">194</span> + <span class="number">3</span>*x^<span class="number">193</span> - x^<span class="number">192</span> + <span class="number">4</span>*x^<span class="number">191</span> + <span class="number">2</span>*x^<span class="number">189</span> + x^<span class="number">186</span> - x^<span class="number">185</span> - x^<span class="number">184</span> + <span class="number">3</span>*x^<span class="number">183</span> + x^<span class="number">182</span> + <span class="number">2</span>*x^<span class="number">181</span> - <span class="number">2</span>*x^<span class="number">180</span> + x^<span class="number">177</span> + x^<span class="number">175</span> - x^<span class="number">173</span> + <span class="number">3</span>*x^<span class="number">172</span> + x^<span class="number">170</span> + x^<span class="number">169</span> - x^<span class="number">167</span> - <span class="number">2</span>*x^<span class="number">166</span> - x^<span class="number">165</span> - <span class="number">4</span>*x^<span class="number">164</span> - <span class="number">2</span>*x^<span class="number">163</span> + <span class="number">2</span>*x^<span class="number">162</span> + <span class="number">4</span>*x^<span class="number">161</span> - <span class="number">2</span>*x^<span class="number">160</span> - <span class="number">3</span>*x^<span class="number">159</span> - <span class="number">2</span>*x^<span class="number">158</span> - <span class="number">2</span>*x^<span class="number">157</span> + x^<span class="number">156</span> - x^<span class="number">155</span> + <span class="number">3</span>*x^<span class="number">154</span> - <span class="number">4</span>*x^<span class="number">153</span> + x^<span class="number">151</span> + <span class="number">2</span>*x^<span class="number">150</span> + x^<span class="number">149</span> - x^<span class="number">148</span> + <span class="number">2</span>*x^<span class="number">147</span> + <span class="number">3</span>*x^<span class="number">146</span> + <span class="number">2</span>*x^<span class="number">145</span> - <span class="number">4</span>*x^<span class="number">144</span> - <span class="number">4</span>*x^<span class="number">143</span> + x^<span class="number">142</span> - <span class="number">2</span>*x^<span class="number">140</span> - <span class="number">2</span>*x^<span class="number">139</span> + <span class="number">2</span>*x^<span class="number">138</span> + <span class="number">3</span>*x^<span class="number">137</span> + <span class="number">3</span>*x^<span class="number">136</span> + <span class="number">3</span>*x^<span class="number">135</span> + x^<span class="number">134</span> - x^<span class="number">133</span> + <span class="number">2</span>*x^<span class="number">132</span> + <span class="number">3</span>*x^<span class="number">130</span> - <span class="number">3</span>*x^<span class="number">129</span> - <span class="number">2</span>*x^<span class="number">128</span> - x^<span class="number">127</span> - <span class="number">2</span>*x^<span class="number">126</span> + x^<span class="number">125</span> + x^<span class="number">124</span> - <span class="number">2</span>*x^<span class="number">123</span> + x^<span class="number">122</span> - x^<span class="number">121</span> + <span class="number">3</span>*x^<span class="number">120</span> - x^<span class="number">119</span> - <span class="number">2</span>*x^<span class="number">118</span> - x^<span class="number">117</span> - x^<span class="number">116</span> - <span class="number">2</span>*x^<span class="number">115</span> + <span class="number">2</span>*x^<span class="number">114</span> + <span class="number">2</span>*x^<span class="number">113</span> - <span class="number">3</span>*x^<span class="number">112</span> - x^<span class="number">111</span> - <span class="number">4</span>*x^<span class="number">110</span> + x^<span class="number">109</span> + x^<span class="number">108</span> + x^<span class="number">106</span> - <span class="number">4</span>*x^<span class="number">105</span> + x^<span class="number">104</span> - x^<span class="number">103</span> - x^<span class="number">101</span> + x^<span class="number">100</span> - <span class="number">2</span>*x^<span class="number">99</span> + x^<span class="number">98</span> - x^<span class="number">97</span> + <span class="number">3</span>*x^<span class="number">96</span> + <span class="number">3</span>*x^<span class="number">94</span> - x^<span class="number">93</span> - x^<span class="number">92</span> + x^<span class="number">91</span> - <span class="number">2</span>*x^<span class="number">90</span> + x^<span class="number">89</span> - x^<span class="number">88</span> + x^<span class="number">87</span> - x^<span class="number">86</span> + x^<span class="number">85</span> + x^<span class="number">84</span> - x^<span class="number">83</span> + x^<span class="number">79</span> - <span class="number">3</span>*x^<span class="number">78</span> - <span class="number">2</span>*x^<span class="number">77</span> + x^<span class="number">74</span> + <span class="number">3</span>*x^<span class="number">73</span> - x^<span class="number">72</span> - <span class="number">3</span>*x^<span class="number">71</span> - <span class="number">2</span>*x^<span class="number">70</span> + x^<span class="number">69</span> - <span class="number">3</span>*x^<span class="number">66</span> + x^<span class="number">65</span> + x^<span class="number">64</span> - <span class="number">4</span>*x^<span class="number">62</span> - x^<span class="number">61</span> + x^<span class="number">60</span> - x^<span class="number">59</span> + <span class="number">3</span>*x^<span class="number">58</span> - x^<span class="number">57</span> - x^<span class="number">54</span> + <span class="number">3</span>*x^<span class="number">53</span> + x^<span class="number">51</span> - <span class="number">3</span>*x^<span class="number">50</span> - x^<span class="number">49</span> + <span class="number">2</span>*x^<span class="number">47</span> - x^<span class="number">46</span> - x^<span class="number">44</span> + x^<span class="number">43</span> - x^<span class="number">42</span> - <span class="number">4</span>*x^<span class="number">41</span> - <span class="number">3</span>*x^<span class="number">39</span> - x^<span class="number">37</span> - x^<span class="number">36</span> - <span class="number">3</span>*x^<span class="number">35</span> + x^<span class="number">34</span> + x^<span class="number">33</span> - <span class="number">2</span>*x^<span class="number">32</span> + <span class="number">2</span>*x^<span class="number">31</span> - x^<span class="number">30</span> + <span class="number">2</span>*x^<span class="number">29</span> - <span class="number">2</span>*x^<span class="number">28</span> - <span class="number">2</span>*x^<span class="number">27</span> - x^<span class="number">24</span> + x^<span class="number">22</span> - <span class="number">5</span>*x^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span> - x^<span class="number">18</span> + <span class="number">2</span>*x^<span class="number">17</span> + x^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">15</span> - <span class="number">2</span>*x^<span class="number">14</span> + x^<span class="number">13</span> + x^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">5</span> - <span class="number">4</span>*x^<span class="number">4</span> + x^<span class="number">3</span> - x^<span class="number">2</span> - <span class="number">1</span></span><br><span class="line">w = <span class="number">32824596080441735190523997982799829197530203904568086251690542244969244071312854874746142497647579310192994177896837383837384405062036521829088599595750902976191010000575697075792720479387771945760107268598283406893094243282498381006464103080551366587157561686900620059394693185990788592220509670478190685244</span></span><br><span class="line">p = gcd(w - <span class="built_in">pow</span>(<span class="number">2</span>, <span class="built_in">sum</span>(f.coefficients()), n), n)</span><br><span class="line">q = n // p</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(ZZ(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;8d1e3405044a79b23a44a43084bd994b&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="ez_fermat_bag_pro">EZ_Fermat_bag_PRO</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> f, flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">88</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">b&#x27;NSSCTF&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">f = P(<span class="built_in">str</span>(f))</span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(<span class="number">2</span>,f(p,q),n)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">all</span>(<span class="built_in">chr</span>(i) <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">set</span>(<span class="built_in">str</span>(p)))) <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">7</span>:-<span class="number">1</span>:])</span><br><span class="line">c = bytes_to_long(flag) % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;f = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;w = &#125;</span>\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;c = &#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line"><span class="string">f = x^31 - x^30*y - 2*x^29*y^2 + 7*x^28*y^3 + 2*x^27*y^4 - 4*x^24*y^7 + 3*x^23*y^8 - x^20*y^11 - 4*x^19*y^12 + x^18*y^13 - 5*x^17*y^14 - 4*x^16*y^15 - x^15*y^16 + x^14*y^17 + x^13*y^18 + x^12*y^19 - 2*x^11*y^20 - 3*x^9*y^22 + 5*x^7*y^24 + x^6*y^25 + 6*x^4*y^27 + x^3*y^28 + 2*x*y^30 + y^31 - 2*x^30 - 3*x^29*y + 2*x^28*y^2 + 2*x^27*y^3 - x^26*y^4 - x^25*y^5 - 2*x^24*y^6 - 3*x^23*y^7 - 3*x^22*y^8 - 3*x^20*y^10 - 4*x^19*y^11 + 2*x^18*y^12 + x^15*y^15 - x^14*y^16 - 2*x^12*y^18 - 3*x^11*y^19 - x^10*y^20 + x^9*y^21 + 2*x^8*y^22 + x^7*y^23 + x^5*y^25 - x^4*y^26 - 2*x^3*y^27 - 2*x^2*y^28 - y^30 - 2*x^29 - x^28*y + 3*x^26*y^3 - x^25*y^4 - 2*x^24*y^5 + x^23*y^6 - x^22*y^7 - x^20*y^9 + 2*x^19*y^10 + 2*x^18*y^11 + x^16*y^13 + x^15*y^14 + x^14*y^15 + x^13*y^16 + x^12*y^17 + 5*x^11*y^18 - x^9*y^20 - 2*x^8*y^21 - 5*x^7*y^22 - 2*x^6*y^23 + 3*x^5*y^24 - 5*x^3*y^26 - x^2*y^27 + 2*x*y^28 - y^29 + 3*x^28 + 3*x^27*y - 2*x^26*y^2 + x^25*y^3 + 2*x^24*y^4 - x^23*y^5 - 2*x^22*y^6 - 3*x^20*y^8 - 3*x^19*y^9 + 4*x^17*y^11 - x^16*y^12 - 3*x^15*y^13 - 2*x^14*y^14 + x^13*y^15 + 2*x^12*y^16 - 2*x^11*y^17 + x^10*y^18 - 2*x^9*y^19 + x^8*y^20 - 2*x^7*y^21 - x^6*y^22 + x^5*y^23 - x^4*y^24 + x^3*y^25 + x^2*y^26 - x*y^27 - y^28 + x^27 + x^26*y - 2*x^24*y^3 + x^23*y^4 - 3*x^22*y^5 - 2*x^21*y^6 - 2*x^20*y^7 - 5*x^19*y^8 + 2*x^18*y^9 - 5*x^17*y^10 + x^16*y^11 - 3*x^15*y^12 - 4*x^14*y^13 - x^13*y^14 + x^12*y^15 + 3*x^11*y^16 + 2*x^10*y^17 - 4*x^9*y^18 - 2*x^6*y^21 + x^5*y^22 + 4*x^3*y^24 + 2*x^2*y^25 + 2*x*y^26 - 2*y^27 + x^25*y + x^24*y^2 + x^23*y^3 + 5*x^22*y^4 + x^20*y^6 - 3*x^19*y^7 + x^18*y^8 - x^17*y^9 + 2*x^15*y^11 - x^14*y^12 + 2*x^13*y^13 - x^12*y^14 + 4*x^11*y^15 - x^10*y^16 - 2*x^6*y^20 - x^5*y^21 + 3*x^3*y^23 + x^2*y^24 - 3*x*y^25 - 3*y^26 + 3*x^25 - 2*x^23*y^2 - x^21*y^4 + x^17*y^8 + 2*x^16*y^9 - x^15*y^10 - 2*x^14*y^11 - x^13*y^12 + 2*x^12*y^13 - 2*x^11*y^14 - x^9*y^16 - x^8*y^17 - x^6*y^19 - x^5*y^20 + x^4*y^21 + x^3*y^22 + 5*x*y^24 - 2*y^25 - x^24 + 2*x^23*y + x^22*y^2 - x^21*y^3 - x^19*y^5 + x^18*y^6 - x^17*y^7 + 2*x^16*y^8 - 4*x^15*y^9 - x^14*y^10 - x^13*y^11 - x^12*y^12 + 4*x^10*y^14 + 2*x^9*y^15 - x^8*y^16 - 2*x^7*y^17 - 2*x^6*y^18 + 4*x^5*y^19 + x^4*y^20 + 2*x^2*y^22 - 5*x*y^23 - y^24 + x^23 - x^22*y + 2*x^21*y^2 - x^20*y^3 - x^18*y^5 - x^17*y^6 - 5*x^15*y^8 + x^14*y^9 - 3*x^13*y^10 + 3*x^12*y^11 + 2*x^11*y^12 - 2*x^10*y^13 - 2*x^9*y^14 - x^8*y^15 + 2*x^7*y^16 - 2*x^6*y^17 - 4*x^5*y^18 - 5*x^3*y^20 - x^2*y^21 - x*y^22 - 4*y^23 - x^22 + 2*x^21*y - 2*x^20*y^2 - 2*x^19*y^3 - 3*x^17*y^5 - x^16*y^6 - x^15*y^7 + 4*x^13*y^9 + 2*x^12*y^10 + 3*x^11*y^11 + 2*x^10*y^12 - x^9*y^13 - x^7*y^15 + 2*x^6*y^16 + x^3*y^19 + 2*x^2*y^20 + 2*x*y^21 + 3*y^22 - 3*x^21 - x^20*y - x^19*y^2 + 2*x^17*y^4 - x^16*y^5 - x^15*y^6 + x^14*y^7 - 5*x^12*y^9 - 2*x^11*y^10 + x^10*y^11 + x^6*y^15 + x^5*y^16 + x^4*y^17 - 3*x^2*y^19 - 2*x*y^20 - 2*y^21 + x^20 + 2*x^19*y - 2*x^17*y^3 + 2*x^16*y^4 - 3*x^15*y^5 + 4*x^14*y^6 + 2*x^13*y^7 - x^12*y^8 - 2*x^11*y^9 + x^10*y^10 + 6*x^9*y^11 + x^8*y^12 + x^7*y^13 + 2*x^5*y^15 + 4*x^4*y^16 + x^3*y^17 - x^2*y^18 + 3*x*y^19 - x^17*y^2 + 2*x^16*y^3 + 3*x^14*y^5 - x^13*y^6 + 2*x^11*y^8 + x^10*y^9 + 3*x^9*y^10 - x^7*y^12 - x^6*y^13 + 3*x^5*y^14 - 4*x^4*y^15 + x^2*y^17 + 2*y^19 - x^18 - x^16*y^2 - 2*x^14*y^4 - 2*x^13*y^5 - 2*x^12*y^6 + 2*x^11*y^7 + 3*x^9*y^9 + 3*x^8*y^10 + x^6*y^12 - x^4*y^14 + 2*x^3*y^15 + 2*x^2*y^16 - 2*x*y^17 - x^17 - 4*x^16*y - 2*x^15*y^2 + 2*x^14*y^3 - x^13*y^4 + x^12*y^5 - 2*x^11*y^6 - 3*x^10*y^7 - x^9*y^8 - 5*x^8*y^9 + 2*x^7*y^10 + 2*x^6*y^11 - x^5*y^12 + x^4*y^13 - 3*x^2*y^15 + x*y^16 - 3*x^16 + x^15*y - 3*x^14*y^2 - x^13*y^3 - x^12*y^4 + 2*x^11*y^5 - x^10*y^6 + 5*x^8*y^8 + 3*x^7*y^9 + 3*x^6*y^10 + 2*x^5*y^11 + 4*x^4*y^12 + 2*x^3*y^13 + x^2*y^14 - 3*x*y^15 - x^15 + 3*x^14*y + x^13*y^2 - x^12*y^3 - 3*x^11*y^4 + x^10*y^5 - x^9*y^6 + 2*x^8*y^7 - x^7*y^8 + 4*x^5*y^10 - 2*x^4*y^11 + x^3*y^12 - x^14 + x^13*y + 2*x^12*y^2 + x^11*y^3 - 5*x^10*y^4 - x^9*y^5 - 3*x^8*y^6 - 2*x^7*y^7 + x^6*y^8 + 3*x^5*y^9 + x^4*y^10 + 2*x^3*y^11 - x^2*y^12 - 4*x*y^13 + 3*y^14 + x^12*y - 2*x^11*y^2 - x^9*y^4 - x^8*y^5 + 5*x^7*y^6 - 4*x^6*y^7 + 3*x^5*y^8 + 4*x^4*y^9 - 3*x^3*y^10 - x^2*y^11 - 2*x*y^12 - 3*y^13 + 3*x^12 + x^11*y + x^10*y^2 + x^9*y^3 + x^8*y^4 - x^6*y^6 - x^5*y^7 - 4*x^3*y^9 - x^2*y^10 - 3*x*y^11 - 2*y^12 + x^10*y + 5*x^9*y^2 + x^8*y^3 + 3*x^5*y^6 + x^4*y^7 + 2*x^3*y^8 - 4*x^2*y^9 + 2*x*y^10 + 3*y^11 - x^10 - 2*x^9*y - 2*x^7*y^3 - x^6*y^4 + x^5*y^5 + 3*x^4*y^6 - 2*x^2*y^8 - x*y^9 + 4*x^9 - 3*x^8*y - 3*x^6*y^3 + x^5*y^4 - x^4*y^5 - 2*x^3*y^6 - 2*x^2*y^7 + x*y^8 + 4*y^9 + 2*x^8 - x^7*y - 2*x^5*y^3 - 4*x^4*y^4 + 3*x^3*y^5 + 4*x^2*y^6 + 2*x*y^7 - 2*y^8 + 2*x^7 + 3*x^5*y^2 + 3*x^2*y^5 - x*y^6 - 4*x^6 + 6*x^3*y^3 + 2*x^2*y^4 - 2*x*y^5 - 3*y^6 + x^5 - 3*x^4*y + x^3*y^2 + x^2*y^3 - 2*x*y^4 + 2*x^4 - 2*x^3*y + 6*x^2*y^2 - 3*x*y^3 - 2*y^4 - 5*x^3 - 2*x^2*y - 2*x*y^2 + 3*y^3 + 2*x^2 - x*y + y^2 - 2*x + 2*y - 2</span></span><br><span class="line"><span class="string">w = 12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line"><span class="string">c = 10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>这题难点在于<span class="math inline">\(f\)</span>是一个二元多项式，如果还直接采取模p的方法的话，指数上会剩余q，这题的做法是用<span class="math inline">\(f(x, y)\)</span>对<span class="math inline">\((n -
x - y + 1)\)</span>做带余除法： <span class="math display">\[
f(x, y) = k(x, y)(n - x - y + 1) + r(y)
\]</span> 由于除式是个一次项，所以余式<span class="math inline">\(r(y)\)</span>只含变量<span class="math inline">\(y\)</span>，然后就可以得到: <span class="math display">\[
w \equiv 2^{f(p, q)} \equiv 2^{k(p, q)(n - p - q + 1) + r(q)} \equiv
2^{k(p, q)\phi(n) + r(q)} \equiv 2^{r(q)} \mod n
\]</span></p>
<p>然后采取和<strong>EZ_Fermat</strong>一样的做法就行。</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">P.&lt;x,y&gt; = ZZ[]</span><br><span class="line">PR.&lt;z&gt; = ZZ[]</span><br><span class="line">f = x^<span class="number">31</span> - x^<span class="number">30</span>*y - <span class="number">2</span>*x^<span class="number">29</span>*y^<span class="number">2</span> + <span class="number">7</span>*x^<span class="number">28</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">4</span> - <span class="number">4</span>*x^<span class="number">24</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">8</span> - x^<span class="number">20</span>*y^<span class="number">11</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">12</span> + x^<span class="number">18</span>*y^<span class="number">13</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">16</span>*y^<span class="number">15</span> - x^<span class="number">15</span>*y^<span class="number">16</span> + x^<span class="number">14</span>*y^<span class="number">17</span> + x^<span class="number">13</span>*y^<span class="number">18</span> + x^<span class="number">12</span>*y^<span class="number">19</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">20</span> - <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">22</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">24</span> + x^<span class="number">6</span>*y^<span class="number">25</span> + <span class="number">6</span>*x^<span class="number">4</span>*y^<span class="number">27</span> + x^<span class="number">3</span>*y^<span class="number">28</span> + <span class="number">2</span>*x*y^<span class="number">30</span> + y^<span class="number">31</span> - <span class="number">2</span>*x^<span class="number">30</span> - <span class="number">3</span>*x^<span class="number">29</span>*y + <span class="number">2</span>*x^<span class="number">28</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">27</span>*y^<span class="number">3</span> - x^<span class="number">26</span>*y^<span class="number">4</span> - x^<span class="number">25</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">23</span>*y^<span class="number">7</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">10</span> - <span class="number">4</span>*x^<span class="number">19</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">12</span> + x^<span class="number">15</span>*y^<span class="number">15</span> - x^<span class="number">14</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">18</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">19</span> - x^<span class="number">10</span>*y^<span class="number">20</span> + x^<span class="number">9</span>*y^<span class="number">21</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">22</span> + x^<span class="number">7</span>*y^<span class="number">23</span> + x^<span class="number">5</span>*y^<span class="number">25</span> - x^<span class="number">4</span>*y^<span class="number">26</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">27</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">28</span> - y^<span class="number">30</span> - <span class="number">2</span>*x^<span class="number">29</span> - x^<span class="number">28</span>*y + <span class="number">3</span>*x^<span class="number">26</span>*y^<span class="number">3</span> - x^<span class="number">25</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">5</span> + x^<span class="number">23</span>*y^<span class="number">6</span> - x^<span class="number">22</span>*y^<span class="number">7</span> - x^<span class="number">20</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">11</span> + x^<span class="number">16</span>*y^<span class="number">13</span> + x^<span class="number">15</span>*y^<span class="number">14</span> + x^<span class="number">14</span>*y^<span class="number">15</span> + x^<span class="number">13</span>*y^<span class="number">16</span> + x^<span class="number">12</span>*y^<span class="number">17</span> + <span class="number">5</span>*x^<span class="number">11</span>*y^<span class="number">18</span> - x^<span class="number">9</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">21</span> - <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">22</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">23</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">24</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">26</span> - x^<span class="number">2</span>*y^<span class="number">27</span> + <span class="number">2</span>*x*y^<span class="number">28</span> - y^<span class="number">29</span> + <span class="number">3</span>*x^<span class="number">28</span> + <span class="number">3</span>*x^<span class="number">27</span>*y - <span class="number">2</span>*x^<span class="number">26</span>*y^<span class="number">2</span> + x^<span class="number">25</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">4</span> - x^<span class="number">23</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">22</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">20</span>*y^<span class="number">8</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">17</span>*y^<span class="number">11</span> - x^<span class="number">16</span>*y^<span class="number">12</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">14</span> + x^<span class="number">13</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">17</span> + x^<span class="number">10</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">19</span> + x^<span class="number">8</span>*y^<span class="number">20</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">21</span> - x^<span class="number">6</span>*y^<span class="number">22</span> + x^<span class="number">5</span>*y^<span class="number">23</span> - x^<span class="number">4</span>*y^<span class="number">24</span> + x^<span class="number">3</span>*y^<span class="number">25</span> + x^<span class="number">2</span>*y^<span class="number">26</span> - x*y^<span class="number">27</span> - y^<span class="number">28</span> + x^<span class="number">27</span> + x^<span class="number">26</span>*y - <span class="number">2</span>*x^<span class="number">24</span>*y^<span class="number">3</span> + x^<span class="number">23</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">22</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">19</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">18</span>*y^<span class="number">9</span> - <span class="number">5</span>*x^<span class="number">17</span>*y^<span class="number">10</span> + x^<span class="number">16</span>*y^<span class="number">11</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">12</span> - <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">13</span> - x^<span class="number">13</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">16</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">9</span>*y^<span class="number">18</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">21</span> + x^<span class="number">5</span>*y^<span class="number">22</span> + <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">25</span> + <span class="number">2</span>*x*y^<span class="number">26</span> - <span class="number">2</span>*y^<span class="number">27</span> + x^<span class="number">25</span>*y + x^<span class="number">24</span>*y^<span class="number">2</span> + x^<span class="number">23</span>*y^<span class="number">3</span> + <span class="number">5</span>*x^<span class="number">22</span>*y^<span class="number">4</span> + x^<span class="number">20</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">19</span>*y^<span class="number">7</span> + x^<span class="number">18</span>*y^<span class="number">8</span> - x^<span class="number">17</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">11</span> - x^<span class="number">14</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">13</span> - x^<span class="number">12</span>*y^<span class="number">14</span> + <span class="number">4</span>*x^<span class="number">11</span>*y^<span class="number">15</span> - x^<span class="number">10</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">20</span> - x^<span class="number">5</span>*y^<span class="number">21</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">23</span> + x^<span class="number">2</span>*y^<span class="number">24</span> - <span class="number">3</span>*x*y^<span class="number">25</span> - <span class="number">3</span>*y^<span class="number">26</span> + <span class="number">3</span>*x^<span class="number">25</span> - <span class="number">2</span>*x^<span class="number">23</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">4</span> + x^<span class="number">17</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">9</span> - x^<span class="number">15</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">11</span> - x^<span class="number">13</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">14</span> - x^<span class="number">9</span>*y^<span class="number">16</span> - x^<span class="number">8</span>*y^<span class="number">17</span> - x^<span class="number">6</span>*y^<span class="number">19</span> - x^<span class="number">5</span>*y^<span class="number">20</span> + x^<span class="number">4</span>*y^<span class="number">21</span> + x^<span class="number">3</span>*y^<span class="number">22</span> + <span class="number">5</span>*x*y^<span class="number">24</span> - <span class="number">2</span>*y^<span class="number">25</span> - x^<span class="number">24</span> + <span class="number">2</span>*x^<span class="number">23</span>*y + x^<span class="number">22</span>*y^<span class="number">2</span> - x^<span class="number">21</span>*y^<span class="number">3</span> - x^<span class="number">19</span>*y^<span class="number">5</span> + x^<span class="number">18</span>*y^<span class="number">6</span> - x^<span class="number">17</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">15</span>*y^<span class="number">9</span> - x^<span class="number">14</span>*y^<span class="number">10</span> - x^<span class="number">13</span>*y^<span class="number">11</span> - x^<span class="number">12</span>*y^<span class="number">12</span> + <span class="number">4</span>*x^<span class="number">10</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">15</span> - x^<span class="number">8</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">17</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">18</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">19</span> + x^<span class="number">4</span>*y^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">22</span> - <span class="number">5</span>*x*y^<span class="number">23</span> - y^<span class="number">24</span> + x^<span class="number">23</span> - x^<span class="number">22</span>*y + <span class="number">2</span>*x^<span class="number">21</span>*y^<span class="number">2</span> - x^<span class="number">20</span>*y^<span class="number">3</span> - x^<span class="number">18</span>*y^<span class="number">5</span> - x^<span class="number">17</span>*y^<span class="number">6</span> - <span class="number">5</span>*x^<span class="number">15</span>*y^<span class="number">8</span> + x^<span class="number">14</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">13</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">12</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">12</span> - <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">13</span> - <span class="number">2</span>*x^<span class="number">9</span>*y^<span class="number">14</span> - x^<span class="number">8</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">16</span> - <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">18</span> - <span class="number">5</span>*x^<span class="number">3</span>*y^<span class="number">20</span> - x^<span class="number">2</span>*y^<span class="number">21</span> - x*y^<span class="number">22</span> - <span class="number">4</span>*y^<span class="number">23</span> - x^<span class="number">22</span> + <span class="number">2</span>*x^<span class="number">21</span>*y - <span class="number">2</span>*x^<span class="number">20</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">19</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">17</span>*y^<span class="number">5</span> - x^<span class="number">16</span>*y^<span class="number">6</span> - x^<span class="number">15</span>*y^<span class="number">7</span> + <span class="number">4</span>*x^<span class="number">13</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">10</span> + <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">11</span> + <span class="number">2</span>*x^<span class="number">10</span>*y^<span class="number">12</span> - x^<span class="number">9</span>*y^<span class="number">13</span> - x^<span class="number">7</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">19</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">20</span> + <span class="number">2</span>*x*y^<span class="number">21</span> + <span class="number">3</span>*y^<span class="number">22</span> - <span class="number">3</span>*x^<span class="number">21</span> - x^<span class="number">20</span>*y - x^<span class="number">19</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">4</span> - x^<span class="number">16</span>*y^<span class="number">5</span> - x^<span class="number">15</span>*y^<span class="number">6</span> + x^<span class="number">14</span>*y^<span class="number">7</span> - <span class="number">5</span>*x^<span class="number">12</span>*y^<span class="number">9</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">10</span> + x^<span class="number">10</span>*y^<span class="number">11</span> + x^<span class="number">6</span>*y^<span class="number">15</span> + x^<span class="number">5</span>*y^<span class="number">16</span> + x^<span class="number">4</span>*y^<span class="number">17</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">19</span> - <span class="number">2</span>*x*y^<span class="number">20</span> - <span class="number">2</span>*y^<span class="number">21</span> + x^<span class="number">20</span> + <span class="number">2</span>*x^<span class="number">19</span>*y - <span class="number">2</span>*x^<span class="number">17</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">4</span> - <span class="number">3</span>*x^<span class="number">15</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">14</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">7</span> - x^<span class="number">12</span>*y^<span class="number">8</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">9</span> + x^<span class="number">10</span>*y^<span class="number">10</span> + <span class="number">6</span>*x^<span class="number">9</span>*y^<span class="number">11</span> + x^<span class="number">8</span>*y^<span class="number">12</span> + x^<span class="number">7</span>*y^<span class="number">13</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">15</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">16</span> + x^<span class="number">3</span>*y^<span class="number">17</span> - x^<span class="number">2</span>*y^<span class="number">18</span> + <span class="number">3</span>*x*y^<span class="number">19</span> - x^<span class="number">17</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">16</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">5</span> - x^<span class="number">13</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">8</span> + x^<span class="number">10</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">10</span> - x^<span class="number">7</span>*y^<span class="number">12</span> - x^<span class="number">6</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">14</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">15</span> + x^<span class="number">2</span>*y^<span class="number">17</span> + <span class="number">2</span>*y^<span class="number">19</span> - x^<span class="number">18</span> - x^<span class="number">16</span>*y^<span class="number">2</span> - <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">13</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">9</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">10</span> + x^<span class="number">6</span>*y^<span class="number">12</span> - x^<span class="number">4</span>*y^<span class="number">14</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">15</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">16</span> - <span class="number">2</span>*x*y^<span class="number">17</span> - x^<span class="number">17</span> - <span class="number">4</span>*x^<span class="number">16</span>*y - <span class="number">2</span>*x^<span class="number">15</span>*y^<span class="number">2</span> + <span class="number">2</span>*x^<span class="number">14</span>*y^<span class="number">3</span> - x^<span class="number">13</span>*y^<span class="number">4</span> + x^<span class="number">12</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">6</span> - <span class="number">3</span>*x^<span class="number">10</span>*y^<span class="number">7</span> - x^<span class="number">9</span>*y^<span class="number">8</span> - <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">6</span>*y^<span class="number">11</span> - x^<span class="number">5</span>*y^<span class="number">12</span> + x^<span class="number">4</span>*y^<span class="number">13</span> - <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">15</span> + x*y^<span class="number">16</span> - <span class="number">3</span>*x^<span class="number">16</span> + x^<span class="number">15</span>*y - <span class="number">3</span>*x^<span class="number">14</span>*y^<span class="number">2</span> - x^<span class="number">13</span>*y^<span class="number">3</span> - x^<span class="number">12</span>*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">5</span> - x^<span class="number">10</span>*y^<span class="number">6</span> + <span class="number">5</span>*x^<span class="number">8</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">7</span>*y^<span class="number">9</span> + <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">11</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">12</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">13</span> + x^<span class="number">2</span>*y^<span class="number">14</span> - <span class="number">3</span>*x*y^<span class="number">15</span> - x^<span class="number">15</span> + <span class="number">3</span>*x^<span class="number">14</span>*y + x^<span class="number">13</span>*y^<span class="number">2</span> - x^<span class="number">12</span>*y^<span class="number">3</span> - <span class="number">3</span>*x^<span class="number">11</span>*y^<span class="number">4</span> + x^<span class="number">10</span>*y^<span class="number">5</span> - x^<span class="number">9</span>*y^<span class="number">6</span> + <span class="number">2</span>*x^<span class="number">8</span>*y^<span class="number">7</span> - x^<span class="number">7</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">5</span>*y^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">4</span>*y^<span class="number">11</span> + x^<span class="number">3</span>*y^<span class="number">12</span> - x^<span class="number">14</span> + x^<span class="number">13</span>*y + <span class="number">2</span>*x^<span class="number">12</span>*y^<span class="number">2</span> + x^<span class="number">11</span>*y^<span class="number">3</span> - <span class="number">5</span>*x^<span class="number">10</span>*y^<span class="number">4</span> - x^<span class="number">9</span>*y^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">8</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">7</span> + x^<span class="number">6</span>*y^<span class="number">8</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">9</span> + x^<span class="number">4</span>*y^<span class="number">10</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">2</span>*y^<span class="number">12</span> - <span class="number">4</span>*x*y^<span class="number">13</span> + <span class="number">3</span>*y^<span class="number">14</span> + x^<span class="number">12</span>*y - <span class="number">2</span>*x^<span class="number">11</span>*y^<span class="number">2</span> - x^<span class="number">9</span>*y^<span class="number">4</span> - x^<span class="number">8</span>*y^<span class="number">5</span> + <span class="number">5</span>*x^<span class="number">7</span>*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span>*y^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">8</span> + <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">10</span> - x^<span class="number">2</span>*y^<span class="number">11</span> - <span class="number">2</span>*x*y^<span class="number">12</span> - <span class="number">3</span>*y^<span class="number">13</span> + <span class="number">3</span>*x^<span class="number">12</span> + x^<span class="number">11</span>*y + x^<span class="number">10</span>*y^<span class="number">2</span> + x^<span class="number">9</span>*y^<span class="number">3</span> + x^<span class="number">8</span>*y^<span class="number">4</span> - x^<span class="number">6</span>*y^<span class="number">6</span> - x^<span class="number">5</span>*y^<span class="number">7</span> - <span class="number">4</span>*x^<span class="number">3</span>*y^<span class="number">9</span> - x^<span class="number">2</span>*y^<span class="number">10</span> - <span class="number">3</span>*x*y^<span class="number">11</span> - <span class="number">2</span>*y^<span class="number">12</span> + x^<span class="number">10</span>*y + <span class="number">5</span>*x^<span class="number">9</span>*y^<span class="number">2</span> + x^<span class="number">8</span>*y^<span class="number">3</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">6</span> + x^<span class="number">4</span>*y^<span class="number">7</span> + <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">8</span> - <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">9</span> + <span class="number">2</span>*x*y^<span class="number">10</span> + <span class="number">3</span>*y^<span class="number">11</span> - x^<span class="number">10</span> - <span class="number">2</span>*x^<span class="number">9</span>*y - <span class="number">2</span>*x^<span class="number">7</span>*y^<span class="number">3</span> - x^<span class="number">6</span>*y^<span class="number">4</span> + x^<span class="number">5</span>*y^<span class="number">5</span> + <span class="number">3</span>*x^<span class="number">4</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">8</span> - x*y^<span class="number">9</span> + <span class="number">4</span>*x^<span class="number">9</span> - <span class="number">3</span>*x^<span class="number">8</span>*y - <span class="number">3</span>*x^<span class="number">6</span>*y^<span class="number">3</span> + x^<span class="number">5</span>*y^<span class="number">4</span> - x^<span class="number">4</span>*y^<span class="number">5</span> - <span class="number">2</span>*x^<span class="number">3</span>*y^<span class="number">6</span> - <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">7</span> + x*y^<span class="number">8</span> + <span class="number">4</span>*y^<span class="number">9</span> + <span class="number">2</span>*x^<span class="number">8</span> - x^<span class="number">7</span>*y - <span class="number">2</span>*x^<span class="number">5</span>*y^<span class="number">3</span> - <span class="number">4</span>*x^<span class="number">4</span>*y^<span class="number">4</span> + <span class="number">3</span>*x^<span class="number">3</span>*y^<span class="number">5</span> + <span class="number">4</span>*x^<span class="number">2</span>*y^<span class="number">6</span> + <span class="number">2</span>*x*y^<span class="number">7</span> - <span class="number">2</span>*y^<span class="number">8</span> + <span class="number">2</span>*x^<span class="number">7</span> + <span class="number">3</span>*x^<span class="number">5</span>*y^<span class="number">2</span> + <span class="number">3</span>*x^<span class="number">2</span>*y^<span class="number">5</span> - x*y^<span class="number">6</span> - <span class="number">4</span>*x^<span class="number">6</span> + <span class="number">6</span>*x^<span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span>*y^<span class="number">4</span> - <span class="number">2</span>*x*y^<span class="number">5</span> - <span class="number">3</span>*y^<span class="number">6</span> + x^<span class="number">5</span> - <span class="number">3</span>*x^<span class="number">4</span>*y + x^<span class="number">3</span>*y^<span class="number">2</span> + x^<span class="number">2</span>*y^<span class="number">3</span> - <span class="number">2</span>*x*y^<span class="number">4</span> + <span class="number">2</span>*x^<span class="number">4</span> - <span class="number">2</span>*x^<span class="number">3</span>*y + <span class="number">6</span>*x^<span class="number">2</span>*y^<span class="number">2</span> - <span class="number">3</span>*x*y^<span class="number">3</span> - <span class="number">2</span>*y^<span class="number">4</span> - <span class="number">5</span>*x^<span class="number">3</span> - <span class="number">2</span>*x^<span class="number">2</span>*y - <span class="number">2</span>*x*y^<span class="number">2</span> + <span class="number">3</span>*y^<span class="number">3</span> + <span class="number">2</span>*x^<span class="number">2</span> - x*y + y^<span class="number">2</span> - <span class="number">2</span>*x + <span class="number">2</span>*y - <span class="number">2</span></span><br><span class="line">n = <span class="number">95656952327201449381426394713246214670537600365883923624876350719801926817916514429721785287844335184715049179879891389941974481490433975689601829920289485889138252888029716516069912637121531561601839948367426922036690701168975937162280451323099126372019216020898338909808577022618554997063496690156977790629</span></span><br><span class="line">w = <span class="number">12796020294902567574981427270787776254781813995526831579805652479456168245098217943847166109912113827479436654134179666391771173421469188197935460525521295192736123648410762964187396897298542198935971755852754544978564521188423737649175136194386664628304164316905741781089536713701674793641345344818309314224</span></span><br><span class="line">c = <span class="number">10266913434526071998707605266130137733134248608585146234981245806763995653822203763396430876254213500327272952979577138542487120755771047170064775346450942</span></span><br><span class="line">g = f % (n - x - y + <span class="number">1</span>)</span><br><span class="line">g = g(<span class="number">0</span>, z)</span><br><span class="line">q = GCD(<span class="built_in">pow</span>(<span class="number">2</span>, g(<span class="number">1</span>), n) - w, n)</span><br><span class="line">p = n // q</span><br><span class="line"></span><br><span class="line">diff = <span class="string">b&quot;NSSCTF&#123;&quot;</span> + <span class="string">b&quot;0&quot;</span>*<span class="number">80</span> + <span class="string">b&quot;&#125;&quot;</span></span><br><span class="line">diff = bytes_to_long(diff)</span><br><span class="line">M = column_matrix([<span class="number">2</span>**(<span class="number">8</span>*(<span class="number">80</span> - i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>)] + [diff-c] + [p])</span><br><span class="line">M = M.augment(identity_matrix(<span class="number">81</span>).stack(zero_vector(<span class="number">81</span>)))</span><br><span class="line">MLLL = M.LLL()</span><br><span class="line">v = MLLL[<span class="number">0</span>]</span><br><span class="line">v = v[-<span class="number">1</span>]*v</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;NSSCTF&#123;&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v[<span class="number">1</span>:-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># NSSCTF&#123;38886172735077060750460332815973614272222523052135584902884007925985948919714862&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="baby_factor_revenge">baby_factor_revenge</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pl  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        pl.append(getPrime(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(pl)</span><br><span class="line">pl = create()</span><br><span class="line">m=<span class="string">b&#x27;NSSCTF&#123;xxxxxx&#125;&#x27;</span></span><br><span class="line">p,q,r = pl[<span class="number">0</span>],pl[<span class="number">1</span>],pl[<span class="number">2</span>]</span><br><span class="line">n = p*q*r</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">phi_2=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n2=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(m),e,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi=<span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line"><span class="string">phi=3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line"><span class="string">c=8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></p>
<p>这题与<strong>baby_factor</strong>的区别是需要我们必须分解<span class="math inline">\(n\)</span>，题目给了<span class="math inline">\(n,
phi\)</span>，那么我们就得到了两个关于<span class="math inline">\(p,q,r\)</span>的两个等式，由于变量多了一个，所以没办法利用解方程来分解<span class="math inline">\(n\)</span>。这里用到的分解技巧可以看我写的这篇文章:
<a href="https://blog.csdn.net/AxuAxuA123/article/details/141454579">[多素数RSA]利用phi(n)分解n</a></p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984460699747964946764645986828307675081596907634022110868102739948513844625534865764252668312850364286204872187001344218083941399088833989233474318289529103178632284291007694811574023047207470113594082533713524606268388742119103653587354956091145288566437795469230667897089543048576812362251576281067933183713438502813206542834734983616378764909202774603304124497453696792428111112644362307853143219890039129054302905340695668256116233515323529918746264727874817221051242387145263342018617858562987223211598238069486447049955021864781104312134816578626968386395835285074116149472750100154961405785440009296096563521430833</span></span><br><span class="line">phi=<span class="number">3191868707489083296976422171754481125088448532695639929013026951283334085716937496519972309690132954050242378974370025245594553866043111294840209514577676946872746793700126873931085112786381515154186105142460622301297252278473097650013016482539838576476763183025029834004241446095147665598581368214114851984394758254181484105857103844940487787404078873566779953101987404891507588290232992132681729619718279684673827347612899406697514777723904351697638562060304399923174376216080338949397741477013367831377040866937433520175862575061413321076151761545984886547872427147498175814451096795344136954743868643889768901204954902708679102384061694877757565486240670882343628571424084461972849147495569088820011108794930593172573959423278140327579049114196086428504291102619820322231225943837444001821535593671764186251713714593498207219093585758479440828038119079608764008747539277397742897542501803218788455452391287578171880267200</span></span><br><span class="line">c=<span class="number">8847973599594272436100870059187158819529199340583461915617467299706215012295598155778224026186157290320191983062022702191439286020733625396165573681688842631368993650799220713225485752608650482408353598320160571916055498330875851476520668973214124194890108144336715482373743731578734960096351460142579903010557821654345995923836938260379746304222820835040419844947019844885128550552066290798665884099701340641403329066058638137944934073185448687990744852400616823426082588916251127609191094346267837812018236673478691437630461425526779014305216914035039981685211625653600564431704400207095883904994772993227506462664</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line">s = phi</span><br><span class="line"><span class="keyword">while</span> (s % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">    s //= <span class="number">2</span></span><br><span class="line">    t += <span class="number">1</span></span><br><span class="line">factor = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">    p = GCD(<span class="built_in">pow</span>(a, s, n) - <span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">1</span> &lt; p &lt; n:</span><br><span class="line">            factor.add(p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t):</span><br><span class="line">        p = GCD(<span class="built_in">pow</span>(a, <span class="number">2</span>**t*s, n) + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; p &lt; n:</span><br><span class="line">            factor.add(p)</span><br><span class="line">factor = <span class="built_in">list</span>(factor)</span><br><span class="line"></span><br><span class="line">pqr = []</span><br><span class="line">pqr.append(GCD(factor[<span class="number">0</span>], factor[<span class="number">1</span>]))</span><br><span class="line">pqr.append(factor[<span class="number">0</span>]//pqr[<span class="number">0</span>])</span><br><span class="line">pqr.append(factor[<span class="number">1</span>]//pqr[<span class="number">0</span>])</span><br><span class="line">pqr = <span class="built_in">sorted</span>(pqr)</span><br><span class="line"></span><br><span class="line">p, q, r = pqr</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p*q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># NSSCTF&#123;D0_Y0u_knnn0www_p71!!!&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="mimt_rsa">MIMT_RSA</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> KEY， flag  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(KEY).bit_length() == <span class="number">36</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> isPrime(KEY)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">ck = <span class="built_in">pow</span>(KEY, e, n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> flag == <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(KEY).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;n = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;e = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ck = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">ck = 8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p>这题题目已经告诉了我们是MIMT攻击，这里说一下它的原理，对于本题而言，漏洞点在于<span class="math inline">\(\text{KEY}\)</span>不是素数，所以<span class="math inline">\(\text{KEY} =
k_1k_2\)</span>，这里我们可以猜测<span class="math inline">\(k_1,k_2\)</span>是比较接近的，也就是<span class="math inline">\(k_1 \approx k_2 \approx \sqrt{\text{KEY}}\)</span>
我们已知: <span class="math display">\[
ck \equiv \text{KEY}^e \equiv k_1^ek_2^e \mod n
\]</span> 稍加变形得: <span class="math display">\[
ck \cdot k_1^{-e} \equiv k_2^e \mod n
\]</span></p>
<p>这里<span class="math inline">\(\text{KEY}\)</span>是36bits，所以<span class="math inline">\(k_1,k_2\)</span>大概18bits，我们可以先枚举<span class="math inline">\(k_1\)</span>，求出<span class="math inline">\(ck
\cdot k_1^{-e}\)</span>的所有可能值放到集合中<span class="math inline">\(S\)</span>中，然后枚举<span class="math inline">\(k_2\)</span>，看看<span class="math inline">\(k_2^e\)</span>是否存在于<span class="math inline">\(S\)</span>中，如果存在，就说明我们找到了<span class="math inline">\(k_1,k_2\)</span>。可以发现，由于查找的时间复杂度是<span class="math inline">\(O(lg(k_2))\)</span>，所以总的时间复杂度是<span class="math inline">\(O(\sqrt{k_1}\text{log}(k_2))\)</span>，相比直接枚举<span class="math inline">\(\text{KEY}\)</span>的时间复杂度<span class="math inline">\(O(k_1k_2)\)</span>要快不少。最后实测下来其中一个因子的大小是17bits。
exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">n = <span class="number">26563847822899403123579768059987758748518109506340688366937229057385768563897579939399589878779201509595131302887212371556759550226965583832707699167542469352676806103999861576255689028708092007726895892953065618536676788020023461249303717579266840903337614272894749021562443472322941868357046500507962652585875038973455411548683247853955371839865042918531636085668780924020410159272977805762814306445393524647460775620243065858710021030314398928537847762167177417552351157872682037902372485985979513934517709478252552309280270916202653365726591219198063597536812483568301622917160509027075508471349507817295226801011</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">ck = <span class="number">8371316287078036479056771367631991220353236851470185127168826270131149168993253524332451231708758763231051593801540258044681874144589595532078353953294719353350061853623495168005196486200144643168051115479293775329183635187974365652867387949378467702492757863040766745765841802577850659614528558282832995416523310220159445712674390202765601817050315773584214422244200409445854102170875265289152628311393710624256106528871400593480435083264403949059237446948467480548680533474642869718029551240453665446328781616706968352290100705279838871524562305806920722372815812982124238074246044446213460443693473663239594932076</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_KEY</span>():</span><br><span class="line">    l = []</span><br><span class="line">    begin, end = <span class="number">2</span>**<span class="number">16</span>, <span class="number">2</span>**<span class="number">17</span></span><br><span class="line">    <span class="keyword">for</span> k2 <span class="keyword">in</span> trange(begin, end):</span><br><span class="line">        l.append(ck*<span class="built_in">pow</span>(k2, -e, n) % n)</span><br><span class="line"></span><br><span class="line">    begin, end = <span class="number">2</span>**<span class="number">36</span> // end, <span class="number">2</span>**<span class="number">36</span> // begin</span><br><span class="line">    <span class="keyword">for</span> k1 <span class="keyword">in</span> trange(begin, end):</span><br><span class="line">        tmp = <span class="built_in">pow</span>(k1, e, n)</span><br><span class="line">        <span class="keyword">if</span> tmp <span class="keyword">in</span> l:</span><br><span class="line">            k1, k2 = k1, l.index(tmp)</span><br><span class="line">            <span class="keyword">return</span> k1, k2</span><br><span class="line"></span><br><span class="line">k1, k2 = get_KEY()</span><br><span class="line">KEY = k1 * (k2 + <span class="number">2</span>**<span class="number">16</span>)</span><br><span class="line"><span class="keyword">assert</span> ck == <span class="built_in">pow</span>(KEY, e, n)</span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;&#x27;</span> + md5(<span class="built_in">str</span>(KEY).encode()).hexdigest().encode() + <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;14369380f677abec84ed8b6d0e3a0ba9&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="baby_lattice">baby_lattice</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">miku = <span class="number">30</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">key = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> key&gt; p:</span><br><span class="line">    key= getPrime(<span class="number">512</span>)</span><br><span class="line">ts = []</span><br><span class="line">gs = []</span><br><span class="line">zs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(miku):</span><br><span class="line">    t = getPrime(<span class="number">512</span>)</span><br><span class="line">    z = getPrime(<span class="number">400</span>)</span><br><span class="line">    g= (t * key + z) % p</span><br><span class="line">    ts.append(t)</span><br><span class="line">    gs.append(g)</span><br><span class="line">    zs.append(z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ts = <span class="subst">&#123;ts&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;gs = <span class="subst">&#123;gs&#125;</span>&#x27;</span>)</span><br><span class="line">iv= os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">ciphertext=cipher.encrypt(pad(flag.encode(),<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;iv=<span class="subst">&#123;iv&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ciphertext=<span class="subst">&#123;ciphertext&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure></p>
<p>题目给了30组如下的等式: <span class="math display">\[
g_i \equiv t_i * key + z \mod p
\]</span> 即: <span class="math display">\[
g_i = t_i * key + z - k_ip
\]</span></p>
<p>注意到<span class="math inline">\(z\)</span>是比较小的，可以构造如下的格： <span class="math display">\[
\begin{pmatrix}
g_1 &amp; g_2 &amp; \cdots &amp; g_{30} &amp; 1 &amp; \\
t_1 &amp; t_2 &amp; \cdots &amp; t_{30} &amp;   &amp; 1\\
p \\
&amp;p\\
&amp;&amp;\ddots\\
&amp;&amp;&amp;p
\end{pmatrix}
\]</span> 这个格具有如下的小向量: <span class="math display">\[
(1, -key, k_1, k_2, \cdots, k_{30})
\begin{pmatrix}
g_1 &amp; g_2 &amp; \cdots &amp; g_{30} &amp; 1 &amp; \\
t_1 &amp; t_2 &amp; \cdots &amp; t_{30} &amp;   &amp; 1\\
p \\
&amp;p\\
&amp;&amp;\ddots\\
&amp;&amp;&amp;p
\end{pmatrix}
= (z_1, z_2, \cdots, z_{30}, 1, -key)
\]</span> <span class="math inline">\(z_i\)</span>是比较小的，所以对格使用格基规约算法可能可以得到这个短向量。这里我们还需要稍微调整一下，让这个向量的各分量都比较接近，这样更容易得到我们想要的答案，最终我们构造一个如下的格，具有如下的短向量:
<span class="math display">\[
(1, -key, k_1, k_2, \cdots, k_{30})
\begin{pmatrix}
2^{112}g_1 &amp; 2^{112}g_2 &amp; \cdots &amp; 2^{112}g_{30} &amp;
2^{512} &amp; \\
2^{112}t_1 &amp; 2^{112}t_2 &amp; \cdots &amp; 2^{112}t_{30}
&amp;   &amp; 1\\
2^{112}p \\
&amp;2^{112}p\\
&amp;&amp;\ddots\\
&amp;&amp;&amp;2^{112}p
\end{pmatrix}
= (2^{112}z_1, 2^{112}z_2, \cdots, 2^{112}z_{30}, 2^{512}, -key)
\]</span></p>
<p>因为<span class="math inline">\(key\)</span>与<span class="math inline">\(p\)</span>的大小相近，所以最后格出来的实际上是<span class="math inline">\(key-p\)</span></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">p = <span class="number">13401991645840298882794100147034379521242237285821020793208518466205688272722127694554243298223159648613332253774886696888511245155898681828972316158766813</span></span><br><span class="line">ts = [<span class="number">8016983781273189754281912962247057409930227455812224730112055674262101679986538896353333785641031178561641562965339977035588567181180100475283408488320671</span>, <span class="number">12980173980684618239567238092970002844391225790428809984588444288874980047043175328056782109973890659670718383856150425014293022930574469326618263083648099</span>, <span class="number">8109856702010014482292978050018141635784057812487351143916154508689142112615449144377702002382005662470835964315028619291602564624893518861557701327890923</span>, <span class="number">12785373226115694299429762427866573289359143336748874789256870948157808484043436344897926547699412946084053665605873366419653263394817308889578649556482317</span>, <span class="number">12293720016807713691819354075258380849321736691923473670291035750221768289875347194928451102365603432383881559318603460687890903510706219895796459019974867</span>, <span class="number">9784378896444105030039569921777285228994264456281120536753266782980679466146906618674672118057906497814953677764528302638725540882074537262487534252076829</span>, <span class="number">9241433814815706758885649801540944918822400007457713603674159882791199750057709773097552334465041959969676782253637817171507122904345522225398825682237481</span>, <span class="number">11204803848333722110323297716136514262820561394355433234423667799557561253910421337700868735544193790444406938869863716247161888020220901893711513603634809</span>, <span class="number">10851090251796215969502640347727949807230163009657915435491546953253351810608099195268759626721620529756828379004467476267712531905975334082089231769707617</span>, <span class="number">11250957460128461102060212243723539805901629603092001540925013383541943835129096257407578679799378517176957440298695788786794500447140718667332595080944869</span>, <span class="number">12248623923069220370917375593286718711586079377902376988707257328512455851210970182518826733646869485671374318338949112466814956514662420760908691130244383</span>, <span class="number">11061068271412202445428992286301637014530049371871820612053163253748795430394720967354122057185625710764847486790478210908967065668096047462000900877243843</span>, <span class="number">9250800791153158078642768324800520716511537203538708124830844957330029236789799844775267058446261708862442981956837389747149720449997356553753692631237873</span>, <span class="number">11442112467994330302413453979716258058149104607244851803491048585747359474970005873336772224480265499136742622823880716879860377641238675210553131052206691</span>, <span class="number">8851268226889934481971979527547782930762103134830344221114784617526682434893736517219781937490279514229768881864475696389373739501629994242420024622585309</span>, <span class="number">8761826274329402585517262093482651333161640060627583337505498299736119877176278155436111156185319629046980645810012652601825582701466570339570478108791887</span>, <span class="number">8173260008522260126563915135008278248111293487661172115633899079869720932758788675224579864948752039769531398938248083971071345978173279466336354696742377</span>, <span class="number">11733325877716881936637372036969125985631514189799569847189115606745019694984456424617859168884541552882900918661071180298079869943357668081866511603361429</span>, <span class="number">12798678249651545625305346509566263707129030745621625744465668772298872710674031103310015594375483838020916596533864897632924958154707810583510669376046159</span>, <span class="number">11972367565183102195894957634073708898746516169055154830786380821612631063771935949099855541345280195465211676841845799521135332692746439801114025346776451</span>, <span class="number">8309485355838062558333744941897142201736283502970173073711189070760311131678107029730686549988329677109870570827466668034034377094834508445549924223585219</span>, <span class="number">10037957030668927878463105058548635761147918169468443696251870837018029994579358415317101911755591591785037623566701920710453008930531891302329922308475079</span>, <span class="number">13221078857886779075714191159549244640144219704164657103905516889650093241197471185563906205007376146027157620524696025494715411571586859030421582641250071</span>, <span class="number">13377141034964464295846379646837504968557246139611266461228568513844912255762222441387410898249170108735540582627742796017922462329606088337301365183628591</span>, <span class="number">11503417590216916228951909788782481610038959664264972733435373475346403291387209063270057139621628854733942831548624992555175497319058962145185736395531609</span>, <span class="number">10682562966818807073688884352394574841623385668134186058213080078637580526582062737913378756835873195913042020318042792997704842570481165538229628253983417</span>, <span class="number">7009494733984067792833862756223517770477471938386639921019003601598472840183655333614008677846799784155444425042016748876974547683111073376705004070094301</span>, <span class="number">9396274922380984183217450286560296708001013262936289587249206096013034374236192395477584831821730898646879768741299571262843654547918064041618890696711333</span>, <span class="number">9055143657462834722016836241561857041386247088507191351272758917384350750091500866289528933248085632291073921554368989805281660196853938630560350667255913</span>, <span class="number">7075881589550115729079726581415060529537262743216265811601339312252250745864621882784185460812341989475906020671174894015501378625757286896275136526488817</span>]</span><br><span class="line">gs = [<span class="number">3547025130757031371763547817278671805806523773597386380426228204353325314755125874825372064344551510783942287325061869515563511720377069479838665918916338</span>, <span class="number">561524185998066303459395863084068415723518371857539287162474295289737845979144864495515229777991463363132381517905379393086271602757286846999926034367409</span>, <span class="number">10630918988200018501478600883655233518093875635494077893436132190015060760951001030031068630865667129447250982542911493607849695255758299063471724885107320</span>, <span class="number">5385738167688714294394456876987750423263279740302210790063861475593679005286633965917637168163655774852001750955925563171806165861440634515967640179944804</span>, <span class="number">3686451063569312252337028014973428925521749963152262622523483348285262144703447272544972123815729823760936936761643322992469583780002855185407873398768127</span>, <span class="number">9596580956215126253893458055745193704575088913515678341231900675542245449333964660007025564677263334281046226112471415925784249910282102204627251580303047</span>, <span class="number">9656829597739031272294632966205884640125918053307645634673206826103547310810254891833432384622548154588598670746803614688469837172848481449498079690935715</span>, <span class="number">9907308304392368929600091658386459655450451232070442677496713774343506026327224070703486188335961098033888098971263207077722473044862118000082007110037557</span>, <span class="number">7839372385123283975949639433665292734490760458360682832497005213559939527031767909811695257768341209806346811519315554587887588294359891829457980910373676</span>, <span class="number">9524560447616291402016995361580593070951296833074538783490159546001656765257005901587161833656370873513309819850104060230660386406669378214335512722509152</span>, <span class="number">8734422874517209772760818316188000967216535009508164549745674472106165337990045713973843427581730460676070294620298664038968581128044873585552989614725336</span>, <span class="number">5148158222052082942951739997892280954937954769195857112271289335776175568625514426629773392655353554820374445881301175856523121361252868192790918069469104</span>, <span class="number">3405639365216597742633558534342314393231966921971024333387009357007031255109911181571542920889177048552084631482291912851876735480121959418518626599223928</span>, <span class="number">6965895908963098896413697893751255263053889382630643791713636829201586125658579731479485123904224727756791164618191156426250811133029277086293720268527300</span>, <span class="number">515472047175628755463279789359658211455570096067652817360508027869002916852457796014115363850477155232728049656195126940493402028508630979737222916876246</span>, <span class="number">8377848726362282033165443045774756072489017398005262818165334796393061408947900148462399707261050565348807577258621241416711089587307194346694505937252864</span>, <span class="number">1178755053483981880338850194698011124968424379914871101461970724324613752209283539401502897388962321646518511682063263530792638817282211333222820982688221</span>, <span class="number">6409725586399153562174435158247599193499008381130383743433623949976530392240171542527657077771723107664747118903213393154893390715457247849808357209465942</span>, <span class="number">3372824803484968486680937546271819996332625362891283809637871759604598252172343794474197823370030403360262989580844260103083478034905726890611202238641340</span>, <span class="number">13221067729455004299677399984872603663881675510140157358091630484387026309376774076498558628883879446483977202290444900329681753187886973457338777404374837</span>, <span class="number">7168388056726802823482632673894477305062116631923141017136239676696007696629606782541016490173953868270727600022309320772114799519383514048456314407549126</span>, <span class="number">5250230933448962245502125593869313477032913928941516938273943408457441209365441112912617832856547549404891414953525445963675011329667621804152746371657313</span>, <span class="number">8511291855606246692070730459514263912089592580342504124890734122750181111943376656479213361961009582891618556261302703133404839204999651359329176948170842</span>, <span class="number">10576966024912004586600985705328475294820172279541596349092328002861342696932964481093301707680584309062968518297314914578723605267596141569538103299931592</span>, <span class="number">12610576251820483830699440118009518195547953924641848179631259695652398482759919292823264035055444639679877606276670927735340951916197191958922906156370663</span>, <span class="number">3742260845065949575192054445757226288737527960324254459850715703182879384214273141678432129201712761002566924178045796602250837169613100836509080462118064</span>, <span class="number">11563799338655584285772430060426469486983276581413105960901201146319641194721216394735314795999096052047566733050321685673448559752053334666493545565267458</span>, <span class="number">2135904971793751083168704063674429207856744601756475004904460101727999030934815461118290836502605293753384609825541213034656253854812143724421464450937515</span>, <span class="number">3115138049292154301818359336614981367419382594686950083225042221335435796679806070685800479754927915293066789893346628151325862299622031407323031470432866</span>, <span class="number">11834987428374239733081967249175125232293539826462896997963240557834259212701171232384194311849363016441847536816726226234955703291712817155658535826680986</span>]</span><br><span class="line">iv=<span class="string">b&#x27;\x88\x0c\x7f\x92\xd7\xb7\xaf4\xe4\xfb\xd1_\xab\xff)\xb8&#x27;</span></span><br><span class="line">ciphertext=<span class="string">b&#x27;\x94\x198\xd6\xa2mK\x00\x06\x7f\xad\xa0M\xf7\xadV;EO$\xee\xcdB0)\xfb!&amp;8%,M&#x27;</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">30</span></span><br><span class="line">M = matrix([gs[:num], ts[:num]])</span><br><span class="line">M = M.stack(p * identity_matrix(num))</span><br><span class="line"></span><br><span class="line">M = <span class="number">2</span>**<span class="number">112</span> * M</span><br><span class="line">I = matrix([[<span class="number">2</span>**<span class="number">512</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,      <span class="number">1</span>]])</span><br><span class="line">M = M.augment(I.stack(zero_matrix(<span class="number">30</span>, <span class="number">2</span>)))</span><br><span class="line">MLLL = M.LLL()</span><br><span class="line">key = MLLL[<span class="number">1</span>][-<span class="number">1</span>] + p</span><br><span class="line">cipher = AES.new(<span class="built_in">str</span>(key).encode()[:<span class="number">16</span>], AES.MODE_CBC,iv)</span><br><span class="line">flag=cipher.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># NSSCTF&#123;F@@@un7_L4444t1c3333!!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="rsa_and_dsa">RSA_and_DSA</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits, randint</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">ink=getPrime(<span class="number">20</span>)</span><br><span class="line">p1= getPrime(<span class="number">512</span>)</span><br><span class="line">q1= getPrime(<span class="number">512</span>)</span><br><span class="line">N = p1* q1</span><br><span class="line">phi = (p1-<span class="number">1</span>) * (q1-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    d1= getRandomNBitInteger(<span class="number">200</span>)</span><br><span class="line">    <span class="keyword">if</span> GCD(d1, phi) == <span class="number">1</span>:</span><br><span class="line">        e = inverse(d1, phi)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">c_ink = <span class="built_in">pow</span>(ink, e, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c_ink=&#x27;</span>,c_ink)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e=&#x27;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N=&#x27;</span>,N)</span><br><span class="line"></span><br><span class="line">k= getPrime(<span class="number">64</span>)</span><br><span class="line">q = getPrime(<span class="number">160</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">msg, pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p) % q)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">    s = <span class="built_in">int</span>((h + x * r) * gmpy2.invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    temp = q * getrandbits(<span class="number">864</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(temp + <span class="number">1</span>):</span><br><span class="line">        p = temp + <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> p % q == <span class="number">1</span></span><br><span class="line">h = randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">g = <span class="built_in">pow</span>(h, (p - <span class="number">1</span>) // q, p)</span><br><span class="line">y = <span class="built_in">pow</span>(g, k, p)</span><br><span class="line">pub = (p,q,g,y)</span><br><span class="line">pri = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r1,s1)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;(r2,s2)=&quot;</span>,sign(<span class="string">b&#x27;GHCTF-2025&#x27;</span>, pub, pri, k+ink))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;g= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;q= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p= &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;y= &#125;</span>&quot;</span>)</span><br><span class="line">key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag=<span class="string">&quot;NSSCTF&#123;xxxxxxxxx&#125;&quot;</span></span><br><span class="line">ciphertext = cipher.encrypt(pad(flag.encode(), <span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ciphertext = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c_ink= 84329531596553394336538987023357227935440127545924398750500007122949822951975451942488164538560925222694222413022235832336439700420379598454619959178424907616592885325169668838139433265501326382467741883799799897305247164532663683724926267222341485376684034461780316163663624769479766276645610470850267093664</span></span><br><span class="line"><span class="string">e= 100797590979191597676081881632112443200677974501832055481332601002844223186483558337099380805371010917502984674789369037985572270571944684404114475915036053451756526659905789324413633016308331745100752282051937597697581233757669107763643041665187533373053952694612521031477624363476981177214961821456672635823</span></span><br><span class="line"><span class="string">N= 133020919573254586736009662994351483197630110046444622015176359062686053521475990861985101412597512894313048001198942449066636145265799205815566892581351543233960812384316942438814742826123037762680960898927252792974233266551853930274479435403549161383103059746381782668941421906340168652870371226382805032027</span></span><br><span class="line"><span class="string">(r1,s1)= (105538622724986198173818280402723234123231812870, 165871242333491991006684781121637801537623792920)</span></span><br><span class="line"><span class="string">(r2,s2)= (895673018852361693797535983771888430717799939767, 511956887428148277909616673338517730698888202223)</span></span><br><span class="line"><span class="string">g= 97444164915108666817264719918456841236668149777715575246719562319277238318814584882880249446488655758781498681349330709135670188875982069778879957837454582916193915374305422049064769688749957611500682447936476425649642359105731049262259786188565867271216015835626264543593116387612078934710741467063982007499</span></span><br><span class="line"><span class="string">q= 974306102330898613562307019447798934376234044213</span></span><br><span class="line"><span class="string">p= 113996945917185663452903189185812083054654586038361814576057637684218572059191009152754335053396974825607186512631652893899380922217026759410880236546966561476761050482902589270845489570126254333374605973087540746242818447451510386137109253463070487353845675998098620056687507969012229115435439218407426962991</span></span><br><span class="line"><span class="string">y= 8015503667614219250943034151839311927430676423719991507127801373333532219335171760992873121586820712328636972152697436159934583810723294897449200937370031784164230148453787378834760102389031574149857480339843366568164403131143385627621208571673677878768568991050568882099039880976450795530322753270408770484</span></span><br><span class="line"><span class="string">ciphertext = b&#x27;\xb0\ra\x9c\xeb9y\xd5k\xfde\xdfJ\xba\n\xce^u\xae\x81J8\xe4\x8da\xdf;H@WV5&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>RSA部分</strong></p>
<p>这里发现d只有200bits，符合weiner攻击的条件： <span class="math display">\[
d &lt; \frac{1}{3}N^{0.25}
\]</span> 通过weiner攻击，我们就可以获得获取私钥d，解密得到ink。</p>
<p><strong>DAS部分</strong></p>
<p>DAS方案中，每次签名都应该使用两个不同的随机数，而这里进行的两次签名使用的随机数是k，k+ink，这样根据签名的等式，我们就有如下两组方程:</p>
<p><span class="math display">\[
\begin{aligned}
k*s_1 \equiv h + xr_1 \mod q \\
(k+ink)*s_2 \equiv h + xr_2 \mod q
\end{aligned}
\]</span> 刚好2个未知量，联立解出x即可。</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># RSA</span></span><br><span class="line">c_ink= <span class="number">84329531596553394336538987023357227935440127545924398750500007122949822951975451942488164538560925222694222413022235832336439700420379598454619959178424907616592885325169668838139433265501326382467741883799799897305247164532663683724926267222341485376684034461780316163663624769479766276645610470850267093664</span></span><br><span class="line">e= <span class="number">100797590979191597676081881632112443200677974501832055481332601002844223186483558337099380805371010917502984674789369037985572270571944684404114475915036053451756526659905789324413633016308331745100752282051937597697581233757669107763643041665187533373053952694612521031477624363476981177214961821456672635823</span></span><br><span class="line">N= <span class="number">133020919573254586736009662994351483197630110046444622015176359062686053521475990861985101412597512894313048001198942449066636145265799205815566892581351543233960812384316942438814742826123037762680960898927252792974233266551853930274479435403549161383103059746381782668941421906340168652870371226382805032027</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContinuedFraction</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="variable language_">self</span>.numberlist = []  <span class="comment"># number in continued fraction</span></span><br><span class="line">        <span class="variable language_">self</span>.fractionlist = []  <span class="comment"># the near fraction list</span></span><br><span class="line">        <span class="variable language_">self</span>.GenerateNumberList(numerator, denumerator)</span><br><span class="line">        <span class="variable language_">self</span>.GenerateFractionList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateNumberList</span>(<span class="params">self, numerator, denumerator</span>):</span><br><span class="line">        <span class="keyword">while</span> numerator != <span class="number">1</span>:</span><br><span class="line">            quotient = numerator // denumerator</span><br><span class="line">            remainder = numerator % denumerator</span><br><span class="line">            <span class="variable language_">self</span>.numberlist.append(quotient)</span><br><span class="line">            numerator = denumerator</span><br><span class="line">            denumerator = remainder</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GenerateFractionList</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.fractionlist.append([<span class="variable language_">self</span>.numberlist[<span class="number">0</span>], <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(<span class="variable language_">self</span>.numberlist)):</span><br><span class="line">            numerator = <span class="variable language_">self</span>.numberlist[i]</span><br><span class="line">            denumerator = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">                temp = numerator</span><br><span class="line">                numerator = denumerator + numerator * <span class="variable language_">self</span>.numberlist[i - j - <span class="number">1</span>]</span><br><span class="line">                denumerator = temp</span><br><span class="line">            <span class="variable language_">self</span>.fractionlist.append([numerator, denumerator])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = ContinuedFraction(e, N)</span><br><span class="line"><span class="keyword">for</span> k, d <span class="keyword">in</span> a.fractionlist:</span><br><span class="line">    <span class="keyword">if</span> d.bit_length() == <span class="number">200</span>:</span><br><span class="line">        phi = (e*d - <span class="number">1</span>) // k</span><br><span class="line">        delta = iroot((phi - N - <span class="number">1</span>)**<span class="number">2</span> - <span class="number">4</span>*N, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> delta[<span class="number">1</span>]:</span><br><span class="line">            delta = <span class="built_in">int</span>(delta[<span class="number">0</span>])</span><br><span class="line">            p, q = (delta - phi + N + <span class="number">1</span>) // <span class="number">2</span>, (-delta - phi + N + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">assert</span> p*q == N</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">ink = <span class="built_in">pow</span>(c_ink, d, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;ink = &#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DSA</span></span><br><span class="line">(r1,s1)= (<span class="number">105538622724986198173818280402723234123231812870</span>, <span class="number">165871242333491991006684781121637801537623792920</span>)</span><br><span class="line">(r2,s2)= (<span class="number">895673018852361693797535983771888430717799939767</span>, <span class="number">511956887428148277909616673338517730698888202223</span>)</span><br><span class="line">g= <span class="number">97444164915108666817264719918456841236668149777715575246719562319277238318814584882880249446488655758781498681349330709135670188875982069778879957837454582916193915374305422049064769688749957611500682447936476425649642359105731049262259786188565867271216015835626264543593116387612078934710741467063982007499</span></span><br><span class="line">q= <span class="number">974306102330898613562307019447798934376234044213</span></span><br><span class="line">p= <span class="number">113996945917185663452903189185812083054654586038361814576057637684218572059191009152754335053396974825607186512631652893899380922217026759410880236546966561476761050482902589270845489570126254333374605973087540746242818447451510386137109253463070487353845675998098620056687507969012229115435439218407426962991</span></span><br><span class="line">y= <span class="number">8015503667614219250943034151839311927430676423719991507127801373333532219335171760992873121586820712328636972152697436159934583810723294897449200937370031784164230148453787378834760102389031574149857480339843366568164403131143385627621208571673677878768568991050568882099039880976450795530322753270408770484</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\xb0\ra\x9c\xeb9y\xd5k\xfde\xdfJ\xba\n\xce^u\xae\x81J8\xe4\x8da\xdf;H@WV5&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;GHCTF-2025&#x27;</span></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">pri = x = (h*s1 - h*s2 - ink*s1*s2)*<span class="built_in">pow</span>(r1*s2 - r2*s1, -<span class="number">1</span>, q) % q</span><br><span class="line"></span><br><span class="line">key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;flag = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># NSSCTF&#123;n0_RRRrs4_or_DDDS4????&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>这里其实可以不用管RSA，因为ink只有20bits，直接爆破也行：</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brute.py</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line"><span class="comment"># DSA</span></span><br><span class="line">(r1,s1)= (<span class="number">105538622724986198173818280402723234123231812870</span>, <span class="number">165871242333491991006684781121637801537623792920</span>)</span><br><span class="line">(r2,s2)= (<span class="number">895673018852361693797535983771888430717799939767</span>, <span class="number">511956887428148277909616673338517730698888202223</span>)</span><br><span class="line">g= <span class="number">97444164915108666817264719918456841236668149777715575246719562319277238318814584882880249446488655758781498681349330709135670188875982069778879957837454582916193915374305422049064769688749957611500682447936476425649642359105731049262259786188565867271216015835626264543593116387612078934710741467063982007499</span></span><br><span class="line">q= <span class="number">974306102330898613562307019447798934376234044213</span></span><br><span class="line">p= <span class="number">113996945917185663452903189185812083054654586038361814576057637684218572059191009152754335053396974825607186512631652893899380922217026759410880236546966561476761050482902589270845489570126254333374605973087540746242818447451510386137109253463070487353845675998098620056687507969012229115435439218407426962991</span></span><br><span class="line">y= <span class="number">8015503667614219250943034151839311927430676423719991507127801373333532219335171760992873121586820712328636972152697436159934583810723294897449200937370031784164230148453787378834760102389031574149857480339843366568164403131143385627621208571673677878768568991050568882099039880976450795530322753270408770484</span></span><br><span class="line">ciphertext = <span class="string">b&#x27;\xb0\ra\x9c\xeb9y\xd5k\xfde\xdfJ\xba\n\xce^u\xae\x81J8\xe4\x8da\xdf;H@WV5&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;GHCTF-2025&#x27;</span></span><br><span class="line">h = <span class="built_in">int</span>(hashlib.sha256(msg).digest().<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line"><span class="keyword">for</span> ink <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">19</span>, <span class="number">2</span>**<span class="number">20</span>):</span><br><span class="line">    pri = x = (h*s1 - h*s2 - ink*s1*s2)*<span class="built_in">pow</span>(r1*s2 - r2*s1, -<span class="number">1</span>, q) % q</span><br><span class="line">    key = hashlib.sha1(<span class="built_in">str</span>(pri).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    flag = cipher.decrypt(ciphertext)</span><br><span class="line">    <span class="keyword">if</span> flag.startswith(<span class="string">b&quot;NSSCTF&#123;&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># NSSCTF&#123;n0_RRRrs4_or_DDDS4????&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="sin">Sin</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="built_in">print</span>((<span class="number">2</span> * sin((m := bytes_to_long(<span class="string">b&#x27;NSSCTF&#123;test_flag&#125;&#x27;</span>))) - <span class="number">2</span> * sin(m) * cos(<span class="number">2</span> * m)).n(<span class="number">1024</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">m的值即为flag</span></span><br><span class="line"><span class="string">0.002127416739298073705574696200593072466561264659902471755875472082922378713642526659977748539883974700909790177123989603377522367935117269828845667662846262538383970611125421928502514023071134249606638896732927126986577684281168953404180429353050907281796771238578083386883803332963268109308622153680934466412</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure> 知乎上有个很像但比这题简单的版本：</p>
<p><a href="https://www.zhihu.com/question/2059501083/answer/39015211971">设k是一个10位整数，且sqrt（k）的小数点后15位为418400286617716，求k。？</a></p>
<p>这题老套路了，之前在shctf上有道差不多的，只不过shctf那题是<span class="math inline">\(\cos\)</span>。 这里我们先化简: <span class="math display">\[
\begin{aligned}
c&amp;=2\sin(m) - 2\sin(m)\cos(2m)\\
&amp;=2\sin(m)(1-\cos(2m))\\
&amp;=4\sin^3(m)
\end{aligned}
\]</span> 所以: <span class="math display">\[
\arcsin((\frac{c}{4})^{\frac{1}{3}}) = m + k\pi
\]</span> 其中<span class="math inline">\(m,k\)</span>是整数。
为了方便，这里记<span class="math inline">\(\arcsin((\frac{c}{4})^{\frac{1}{3}})为m_{fake}\)</span></p>
<p>实数域上这个等式是成立的。但在计算机上不一定，假设我们对<span class="math inline">\(m_{fake},
\pi\)</span>都只取1024比特的精度，那么实际上是会存在一个非常小的误差<span class="math inline">\(\epsilon\)</span>: <span class="math display">\[
m_{fake} = m + k\pi  + \epsilon
\]</span> 即： <span class="math display">\[
\epsilon = m_{fake} - m - k\pi
\]</span></p>
<p>所以我们可以构造一个如下的格: <span class="math display">\[
(-m, 1, -k)
\begin{pmatrix}
1&amp;1&amp;0\\
m_{fake}&amp;0&amp;1\\
\pi&amp;0&amp;0\\
\end{pmatrix}
= (\epsilon, -m, 1)
\]</span> 这里为了让目标向量的各个分量比较均衡，所以对格稍微调整一下：
<span class="math display">\[
(-m, 1, -k)
\begin{pmatrix}
2^{1024}&amp;1&amp;0\\
2^{1024}m_{fake}&amp;0&amp;2^{256}\\
2^{1024}\pi&amp;0&amp;0\\
\end{pmatrix}
= (2^{1024}\epsilon, -m, 2^{256})
\]</span></p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">exp.sage</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">0.002127416739298073705574696200593072466561264659902471755875472082922378713642526659977748539883974700909790177123989603377522367935117269828845667662846262538383970611125421928502514023071134249606638896732927126986577684281168953404180429353050907281796771238578083386883803332963268109308622153680934466412</span></span><br><span class="line">sin_m = (c / <span class="number">4</span>).nth_root(<span class="number">3</span>)</span><br><span class="line">fake_m = arcsin(sin_m)</span><br><span class="line">PI = pi.n(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">M = column_matrix([<span class="number">1</span>, QQ(fake_m), QQ(PI)])</span><br><span class="line">M = <span class="number">2</span>**<span class="number">1024</span> * M </span><br><span class="line">I = matrix([[<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">2</span>**<span class="number">256</span>]])</span><br><span class="line">M = M.augment(I.stack(vector([<span class="number">0</span>, <span class="number">0</span>])))</span><br><span class="line">ML = M.LLL()</span><br><span class="line"><span class="comment"># print(ML[0])</span></span><br><span class="line"><span class="comment"># for i in ML[0]:</span></span><br><span class="line"><span class="comment">#     print(i.n())</span></span><br><span class="line">flag = <span class="built_in">abs</span>(ML[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag)))</span><br><span class="line"><span class="comment"># NSSCTF&#123;just_make_a_latter_and_LLL_is_OK_padpad&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="river">river</h3>
<p>题目： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, seed, mask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">踩踩背</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask, lfsr=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.state = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;seed:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.mask_bits = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;mask:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line">        <span class="variable language_">self</span>.lfsr = lfsr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">sum</span>([<span class="variable language_">self</span>.state[i] * <span class="variable language_">self</span>.mask_bits[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.n)]) &amp; <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.state = <span class="variable language_">self</span>.state[<span class="number">1</span>:] + [s]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.lfsr:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.lfsr():</span><br><span class="line">                <span class="variable language_">self</span>.update()</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.state[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.update()</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.state[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">奶龙</span>(<span class="title class_ inherited__">踩踩背</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(n, seed, mask, lfsr=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">64</span></span><br><span class="line"><span class="keyword">assert</span> seed.bit_length == mask.bit_length == n</span><br><span class="line">lfsr1 = 奶龙(n, seed, mask)</span><br><span class="line">lfsr2 = 踩踩背(n, seed, mask, lfsr1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;mask = <span class="subst">&#123;mask&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;output = <span class="subst">&#123;<span class="built_in">sum</span>(lfsr2() &lt;&lt; (n - <span class="number">1</span> - i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;AES.new(key=md5(<span class="built_in">str</span>(seed).encode()).digest(), mode=AES.MODE_ECB).encrypt(pad(flag, <span class="number">16</span>))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># mask = 9494051593829874780</span></span><br><span class="line"><span class="comment"># output = 13799267741689921474</span></span><br><span class="line"><span class="comment"># enc = b&#x27;\x03\xd1#\xb9\xaa5\xff3y\xba\xcb\x91`\x9d4p~9r\xf6i\r\xca\x03dW\xdb\x9a\xd2\xa6\xc6\x85\xfa\x19=b\xb2)5&gt;]\x05,\xeb\xa0\x12\xa9\x1e&#x27; </span></span><br></pre></td></tr></table></figure></p>
<p>这题一开始以为就是个简单的lfsr破解，直接把output当成lfsr的连续64bits输出去做了，结果发现output并不是lfsr的连续64bits输出。
但是可以发现output是由lfsr的连续64bits决定的，所以我们先试试能不能从output推出lfsr的连续64bits。</p>
<h4 id="获取lfsr的输出">获取lfsr的输出</h4>
<p>假设lfsr的前64bits输出如下： <span class="math display">\[
\mathbf{a} = (a_1, a_2, a_3, \cdots, a_{64})
\]</span> output第i位的输出逻辑是：</p>
<ul>
<li>如果<span class="math inline">\(\mathbf{a}\)</span>的第i位是1，那么更新lfsr的状态，输出当前状态的最后1bits</li>
<li>如果<span class="math inline">\(\mathbf{a}\)</span>的第i位是0，那么不更新lfsr的状态，输出当前状态的最后1bits</li>
</ul>
<p>根据这个输出逻辑，我们可以知道output一定是<span class="math inline">\(\mathbf{a}\)</span>中的元素，output的第k位一定来自于<span class="math inline">\(\mathbf{a}\)</span>的第i位，i不超过a。</p>
<p>output转化为二进制向量如下: <span class="math display">\[
(1, 0, 1, 1 , \cdots, 0, 1, 0)
\]</span> 我们可以知道<span class="math inline">\(a_2,
a_3\)</span>一定是1，因为output在第1位到第2位、第2位到3位发生了变化，也就是lfsr的状态一定更新了，而且我们还可以推出<span class="math inline">\(a_1\)</span>一定是0，因为如果<span class="math inline">\(a_1\)</span>是1的话，我们可以按照output的生成逻辑，得出output的第2位也是1，这与事实矛盾。
这样我们得到了<span class="math inline">\(\mathbf{a}\)</span>的前缀是<span class="math inline">\((0,1,1)\)</span>，然后可以利用
递归从前往后求解<span class="math inline">\(\mathbf{a}\)</span>。</p>
<p>递归函数为<strong>dfs(index, prefix, output)</strong></p>
<p>假设我们已经知道了<span class="math inline">\(\mathbf{a}\)</span>的k位前缀(代码中记作prefix)：
<span class="math display">\[
(a_1, a_2, \cdots, a_k)
\]</span> 假设output的第k位来自于<span class="math inline">\(\mathbf{a}\)</span>第i位(代码中记作index)
然后考虑output的第k+1位：</p>
<ol type="1">
<li>如果output的第k+1位等于<span class="math inline">\(\mathbf{a}\)</span>的第i位，说明lfsr可能没有更新，prefix后面就应该再加上0，即<strong>dfs(index,
prefix[:] + [0], output)</strong></li>
<li>如果output的第k+1位等于<span class="math inline">\(\mathbf{a}\)</span>的第i位且output的第k+1等于<span class="math inline">\(\mathbf{a}\)</span>的第i+1位，说明lfsr可能更新了，prefix后面应该再加上1，即<strong>dfs(index+1,
prefix[:] + [1], output)</strong></li>
<li>如果output的第k+1位不等于<span class="math inline">\(\mathbf{a}\)</span>的第i位且output的第k+1位不等于<span class="math inline">\(\mathbf{a}\)</span>的第i+1位，说明这是矛盾的。</li>
<li>如果output的第k+1位不等于<span class="math inline">\(\mathbf{a}\)</span>的第i位且output的第k+1位等于<span class="math inline">\(\mathbf{a}\)</span>的第i+1位，说明lfsr只可能是更新了，prefix后面应该再加上1，即<strong>dfs(index+1,
prefix[:] + [1], output)</strong></li>
</ol>
<p>就这样往后面递归，直到prefix的长度达到64，就说明已经找到了<span class="math inline">\(\mathbf{a}\)</span>的一种情况。</p>
<h4 id="破解lfsr">破解lfsr</h4>
<p>lfsr在生成随机数的过程中，一直在维护一个状态，这个状态由64个比特构成，我们可以把它记作：
<span class="math display">\[
\mathbf{state} = (s_1, s_2, \cdots, s_{64})
\]</span> 加密过程还需要一个掩码mask,我们记作： <span class="math display">\[
\mathbf{mask} = (m_1, m_2, \cdots, m_{64})
\]</span>
然后将这两个向量作内积，得到的就是输出比特，要注意这里的运算是在<span class="math inline">\(GF(2)\)</span>上进行的(可以简单的理解为所有运算都要模2，保证数据只有1比特的大小)。那么新的状态可以表示为：
<span class="math display">\[
\mathbf{state}^{&#39;} = ( s_2, s_3, \cdots, s_{64}, \mathbf{state}
\cdot \mathbf{mask}^T )
\]</span> 我们可以把它写作矩阵形式： <span class="math display">\[
\mathbf{state}^{&#39;} = \mathbf{state}
\begin{pmatrix}
&amp;&amp;&amp;&amp;m_1\\
1&amp;&amp;&amp;&amp;m_2\\
&amp;1&amp;&amp;&amp;m_3\\
&amp;&amp;\ddots&amp;&amp;\vdots\\
&amp;&amp;&amp;1&amp;m_{64}
\end{pmatrix}
\]</span>
将这个矩阵作用64次后得到的状态，就是lfsr的连续64比特的输出，即： <span class="math display">\[
\mathbf{a} = \mathbf{state}
\begin{pmatrix}
&amp;&amp;&amp;&amp;m_1\\
1&amp;&amp;&amp;&amp;m_2\\
&amp;1&amp;&amp;&amp;m_3\\
&amp;&amp;\ddots&amp;&amp;\vdots\\
&amp;&amp;&amp;1&amp;m_{64}
\end{pmatrix}^{64}
\]</span> 所以有了<span class="math inline">\(\mathbf{a}\)</span>后，只需要右乘一个矩阵逆原就可以恢复初始状态，从而得到seed。</p>
<p>exp: <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exp.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">mask = <span class="number">9494051593829874780</span></span><br><span class="line">output = <span class="number">13799267741689921474</span></span><br><span class="line">enc = <span class="string">b&#x27;\x03\xd1#\xb9\xaa5\xff3y\xba\xcb\x91`\x9d4p~9r\xf6i\r\xca\x03dW\xdb\x9a\xd2\xa6\xc6\x85\xfa\x19=b\xb2)5&gt;]\x05,\xeb\xa0\x12\xa9\x1e&#x27;</span> </span><br><span class="line">n = <span class="built_in">int</span>(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">踩踩背</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask, lfsr=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.state = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;seed:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.mask_bits = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;mask:<span class="number">0</span>&#123;n&#125;</span>b&#125;&quot;</span>]</span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line">        <span class="variable language_">self</span>.lfsr = lfsr</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        s = <span class="built_in">sum</span>([<span class="variable language_">self</span>.state[i] * <span class="variable language_">self</span>.mask_bits[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.n)]) &amp; <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.state = <span class="variable language_">self</span>.state[<span class="number">1</span>:] + [s]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.lfsr:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.lfsr():</span><br><span class="line">                <span class="variable language_">self</span>.update()</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.state[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.update()</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.state[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">奶龙</span>(<span class="title class_ inherited__">踩踩背</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n, seed, mask</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(n, seed, mask, lfsr=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">index, prefix, output</span>):</span><br><span class="line">    all_result = []</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(prefix) == <span class="number">64</span>:</span><br><span class="line">        <span class="keyword">return</span> [prefix]</span><br><span class="line">    next_num = <span class="built_in">len</span>(prefix)</span><br><span class="line">    <span class="keyword">if</span> prefix[index] == output[next_num]:</span><br><span class="line">        result = dfs(index, prefix[:] + [<span class="number">0</span>], output)</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">if</span> r != <span class="literal">None</span>:</span><br><span class="line">                all_result.append(r)</span><br><span class="line">        <span class="keyword">if</span> prefix[index+<span class="number">1</span>] == output[next_num]:</span><br><span class="line">            result = dfs(index + <span class="number">1</span>, prefix[:] + [<span class="number">1</span>], output)</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">                <span class="keyword">if</span> r != <span class="literal">None</span>:</span><br><span class="line">                    all_result.append(r)</span><br><span class="line">    <span class="keyword">if</span> prefix[index] != output[next_num]:</span><br><span class="line">        <span class="keyword">if</span> prefix[index + <span class="number">1</span>] == output[next_num]:</span><br><span class="line">            result = dfs(index + <span class="number">1</span>, prefix[:] + [<span class="number">1</span>], output)</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> result:</span><br><span class="line">                <span class="keyword">if</span> r != <span class="literal">None</span>:</span><br><span class="line">                    all_result.append(r)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [<span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">return</span> all_result</span><br><span class="line">    </span><br><span class="line">mask = matrix(GF(<span class="number">2</span>), [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="string">f&quot;<span class="subst">&#123;mask:<span class="number">0</span>&#123;<span class="number">64</span>&#125;</span>b&#125;&quot;</span>])</span><br><span class="line">M = zero_matrix(GF(<span class="number">2</span>), <span class="number">1</span>, <span class="number">63</span>).stack(identity_matrix(GF(<span class="number">2</span>), <span class="number">63</span>)).augment(mask.T)</span><br><span class="line">M = M^<span class="number">64</span></span><br><span class="line"><span class="keyword">assert</span> M.rank() == n</span><br><span class="line">M_inv = M^(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">prefix = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">output = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(output)[<span class="number">2</span>:].zfill(<span class="number">64</span>)]</span><br><span class="line">all_result = dfs(index, prefix, output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="built_in">len</span>(all_result)):</span><br><span class="line">    v = vector(GF(<span class="number">2</span>), all_result[i])</span><br><span class="line">    fake_s = v*M_inv</span><br><span class="line">    seed = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fake_s.change_ring(ZZ):</span><br><span class="line">        seed &lt;&lt;= <span class="number">1</span></span><br><span class="line">        seed ^^= i</span><br><span class="line">    flag = AES.new(key=md5(<span class="built_in">str</span>(seed).encode()).digest(), mode=AES.MODE_ECB).decrypt(enc)</span><br><span class="line">    <span class="keyword">if</span> flag[:<span class="number">32</span>].isascii():</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;5b322a2b-8d15-43b3-88f0-ee1586f1cf4f&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>NepCTF2025-Crypto-WP</title>
    <url>/2025/07/28/NepCTF2025-Crypto-WP/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bcae4541a43a731f9fd045512b75de2d943501148920cf4d3f9280fe625104ed"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
